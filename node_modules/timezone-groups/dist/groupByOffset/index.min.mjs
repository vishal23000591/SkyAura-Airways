import{timeZones as t}from"../utils/time-zones.min.mjs";import{extractRegion as e,global as n}from"../utils/region.min.mjs";import"../chunks/index-hJk_V6Xn.min.mjs";const r={groupDateRange:365,startDate:(new Date).toISOString()},s=(t,e,n)=>t.length===e.length&&t.every(((t,r)=>n.same(t,e[r]))),o=(t,r=5)=>{const s=t.filter((({label:t})=>e(t)!==n));if(0===s.length)return[0];return function(t,e=5){const n=t.length;if(n<=e)return t;const r=Math.min(n-2,e-2),s=(n-1)/(r+1);return[t[0],...Array.from({length:r},((e,n)=>t[Math.round((n+1)*s)])),t[n-1]]}(s.map((e=>t.indexOf(e))),r)};async function i(i){const{groupDateRange:a,startDate:l,dateEngine:c}={...r,...i},m=[];if(!c)throw new Error("dateEngine is required");const u=((t,r,s,o)=>{const i=new Map,a=((t,e,n)=>{const r=[];let s=n.create(t);for(let t=0;t<=e;t++)s=n.increase(s),r.push(n.formatToIsoDateString(s));return r})(r,s,o);return t.map((t=>{const{label:r}=t,s=e(r),l=a.map((t=>{const e=`${t}-${r}`;let n=i.get(e);return n||(n=o.isoToTimeZone(t,r),i.set(e,n),n)}));return{...t,continent:s,isRegularContinent:s!==n,dates:l}}))})(t.map((t=>({label:t}))),l,a,c);for(const t of u){const{label:e,continent:n,dates:r}=t;if(t.visited)continue;t.visited=!0;const o={labelIdx:[],tzs:[{label:e}]};for(const t of u.filter((t=>!t.visited))){const{label:e,continent:i,isRegularContinent:a,dates:l}=t;if((n===i||!a)&&s(r,l,c)){const n={label:e};o.tzs.push(n),t.visited=!0}}m.push(o)}return m.map((t=>(t.tzs=t.tzs.sort(((t,e)=>t.label.localeCompare(e.label))),{labelTzIdx:o(t.tzs,7),tzs:t.tzs.map((t=>t.label))}))).sort(((t,e)=>e.tzs.length-t.tzs.length))}export{i as groupByOffset};
