declare const _default: "#version 300 es\n\n#define SHADER_NAME grid-cell-layer-vertex-shader\n\nin vec3 positions;\nin vec3 normals;\n\nin vec2 instancePositions;\nin float instanceElevationValues;\nin float instanceColorValues;\nin vec3 instancePickingColors;\n\nuniform sampler2D colorRange;\n\n// Result\nout vec4 vColor;\n\nfloat interp(float value, vec2 domain, vec2 range) {\n  float r = min(max((value - domain.x) / (domain.y - domain.x), 0.), 1.);\n  return mix(range.x, range.y, r);\n}\n\nvec4 interp(float value, vec2 domain, sampler2D range) {\n  float r = (value - domain.x) / (domain.y - domain.x);\n  return texture(range, vec2(r, 0.5));\n}\n\nvoid main(void) {\n  geometry.pickingColor = instancePickingColors;\n\n  if (isnan(instanceColorValues) ||\n    instanceColorValues < grid.colorDomain.z ||\n    instanceColorValues > grid.colorDomain.w ||\n    instanceElevationValues < grid.elevationDomain.z ||\n    instanceElevationValues > grid.elevationDomain.w\n  ) {\n    gl_Position = vec4(0.);\n    return;\n  }\n  \n  vec2 commonPosition = (instancePositions + (positions.xy + 1.0) / 2.0 * column.coverage) * grid.sizeCommon + grid.originCommon - project.commonOrigin.xy;\n  geometry.position = vec4(commonPosition, 0.0, 1.0);\n  geometry.normal = project_normal(normals);\n\n  // calculate z, if 3d not enabled set to 0\n  float elevation = 0.0;\n  if (column.extruded) {\n    elevation = interp(instanceElevationValues, grid.elevationDomain.xy, grid.elevationRange);\n    elevation = project_size(elevation);\n    // cylindar gemoetry height are between -1.0 to 1.0, transform it to between 0, 1\n    geometry.position.z = (positions.z + 1.0) / 2.0 * elevation;\n  }\n\n  gl_Position = project_common_position_to_clipspace(geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  vColor = interp(instanceColorValues, grid.colorDomain.xy, colorRange);\n  vColor.a *= layer.opacity;\n  if (column.extruded) {\n    vColor.rgb = lighting_getLightColor(vColor.rgb, project.cameraPosition, geometry.position.xyz, geometry.normal);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n";
export default _default;
//# sourceMappingURL=grid-cell-layer-vertex.glsl.d.ts.map