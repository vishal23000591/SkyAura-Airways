{"version":3,"file":"api-client.cjs","sources":["../src/client.ts","../src/constants.ts","../src/utils/makeIntervalComplete.ts","../src/filters/FilterTypes.ts","../src/filters/Filter.ts","../src/filters/geosjonFeatures.ts","../node_modules/@math.gl/core/dist/lib/common.js","../node_modules/@math.gl/web-mercator/dist/assert.js","../node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js","../src/utils/transformToTileCoords.ts","../src/utils/transformTileCoordsToWGS84.ts","../src/filters/tileFeaturesGeometries.ts","../node_modules/tilebelt/index.js","../node_modules/@mapbox/tile-cover/index.js","../node_modules/quadbin/dist/esm/index.js","../src/filters/tileFeaturesSpatialIndex.ts","../src/constants-internal.ts","../src/filters/tileFeatures.ts","../src/deck/get-data-filter-extension-props.ts","../src/utils.ts","../src/filters.ts","../src/geo.ts","../src/api/endpoints.ts","../src/api/carto-api-error.ts","../src/api/request-with-parameters.ts","../src/sources/base-source.ts","../src/sources/boundary-query-source.ts","../src/sources/boundary-table-source.ts","../src/widget-sources/widget-source.ts","../src/models/common.ts","../src/models/model.ts","../src/widget-sources/widget-remote-source.ts","../src/widget-sources/widget-query-source.ts","../src/widget-sources/widget-table-source.ts","../src/operations/aggregation.ts","../node_modules/thenby/thenBy.module.js","../src/operations/applySorting.ts","../src/operations/groupBy.ts","../src/utils/dateUtils.ts","../src/operations/groupByDate.ts","../src/operations/histogram.ts","../src/operations/scatterPlot.ts","../src/widget-sources/widget-tileset-source.ts","../src/sources/h3-query-source.ts","../src/sources/h3-table-source.ts","../src/sources/h3-tileset-source.ts","../src/sources/raster-source.ts","../src/sources/quadbin-query-source.ts","../src/sources/quadbin-table-source.ts","../src/sources/quadbin-tileset-source.ts","../src/sources/vector-query-source.ts","../src/sources/vector-table-source.ts","../src/sources/vector-tileset-source.ts","../src/api/query.ts","../src/spatial-index.ts"],"sourcesContent":["/**\n * @internal\n * @privateRemarks Source: @carto/react-core, @carto/constants, @deck.gl/carto\n */\nlet client = 'deck-gl-carto';\n\n/**\n * Returns current client ID, used to categorize API requests. For internal use only.\n *\n * @internal\n * @privateRemarks Source: @carto/react-core\n */\nexport function getClient() {\n  return client;\n}\n\n/**\n * Sets current client ID, used to categorize API requests. For internal use only.\n *\n * @internal\n * @privateRemarks Source: @carto/react-core\n */\nexport function setClient(c: string) {\n  client = c;\n}\n","/**\n * Defines a comparator used when matching a column's values against given filter values.\n *\n * Example:\n *\n * ```javascript\n * import { FilterType } from '@carto/api-client';\n * const filters = {\n *   column_name: { [FilterType.IN]: { values: ['a', 'b', 'c'] } }\n * };\n * ```\n *\n * @privateRemarks Source: @carto/react-api, @deck.gl/carto\n */\nexport enum FilterType {\n  IN = 'in',\n  /** [a, b] both are included. */\n  BETWEEN = 'between',\n  /** [a, b) a is included, b is not. */\n  CLOSED_OPEN = 'closed_open',\n  TIME = 'time',\n  STRING_SEARCH = 'stringSearch',\n}\n\n/** @privateRemarks Source: @carto/constants */\nexport enum ApiVersion {\n  V1 = 'v1',\n  V2 = 'v2',\n  V3 = 'v3',\n}\n\n/** @privateRemarks Source: @carto/constants, @deck.gl/carto */\nexport const DEFAULT_API_BASE_URL = 'https://gcp-us-east1.api.carto.com';\n\n/** @privateRemarks Source: @carto/react-core */\nexport enum TileFormat {\n  MVT = 'mvt',\n  JSON = 'json',\n  GEOJSON = 'geojson',\n  BINARY = 'binary',\n}\n\n/** @privateRemarks Source: @carto/react-core */\nexport enum SpatialIndex {\n  H3 = 'h3',\n  S2 = 's2',\n  QUADBIN = 'quadbin',\n}\n\n/** @privateRemarks Source: @carto/react-core */\nexport enum Provider {\n  BIGQUERY = 'bigquery',\n  REDSHIFT = 'redshift',\n  POSTGRES = 'postgres',\n  SNOWFLAKE = 'snowflake',\n  DATABRICKS = 'databricks',\n  DATABRICKS_REST = 'databricksRest',\n}\n","import {FilterInterval, FilterIntervalComplete} from '../types.js';\n\nexport function makeIntervalComplete(\n  intervals: FilterInterval[]\n): FilterIntervalComplete[] {\n  return intervals.map((val) => {\n    if (val[0] === undefined || val[0] === null) {\n      return [Number.MIN_SAFE_INTEGER, val[1]];\n    }\n\n    if (val[1] === undefined || val[1] === null) {\n      return [val[0], Number.MAX_SAFE_INTEGER];\n    }\n\n    return val;\n  }) as FilterIntervalComplete[];\n}\n","import {FilterType} from '../constants.js';\nimport {FilterInterval, StringSearchOptions} from '../types.js';\nimport {makeIntervalComplete} from '../utils/makeIntervalComplete.js';\n\nexport type FilterFunction = (\n  filterValues: unknown[],\n  featureValue: unknown,\n  params?: Record<string, unknown>\n) => boolean;\n\nexport const filterFunctions: Record<FilterType, FilterFunction> = {\n  [FilterType.IN]: filterIn,\n  [FilterType.BETWEEN]: filterBetween,\n  [FilterType.TIME]: filterTime,\n  [FilterType.CLOSED_OPEN]: filterClosedOpen,\n  [FilterType.STRING_SEARCH]: filterStringSearch,\n};\n\nfunction filterIn(filterValues: unknown[], featureValue: unknown): boolean {\n  return filterValues.includes(featureValue);\n}\n\n// FilterTypes.BETWEEN\nfunction filterBetween(\n  filterValues: unknown[],\n  featureValue: unknown\n): boolean {\n  const checkRange = (range: [number, number]) => {\n    const [lowerBound, upperBound] = range;\n    return (\n      (featureValue as number) >= lowerBound &&\n      (featureValue as number) <= upperBound\n    );\n  };\n\n  return makeIntervalComplete(filterValues as FilterInterval[]).some(\n    checkRange\n  );\n}\n\nfunction filterTime(filterValues: unknown[], featureValue: unknown) {\n  const featureValueAsTimestamp = new Date(featureValue as number).getTime();\n  if (isFinite(featureValueAsTimestamp)) {\n    return filterBetween(filterValues, featureValueAsTimestamp);\n  } else {\n    throw new Error(`Column used to filter by time isn't well formatted.`);\n  }\n}\n\n// FilterTypes.CLOSED_OPEN\nfunction filterClosedOpen(\n  filterValues: unknown[],\n  featureValue: unknown\n): boolean {\n  const checkRange = (range: [number, number]) => {\n    const [lowerBound, upperBound] = range;\n    return (\n      (featureValue as number) >= lowerBound &&\n      (featureValue as number) < upperBound\n    );\n  };\n\n  return makeIntervalComplete(filterValues as [number, number][]).some(\n    checkRange\n  );\n}\n\n// FilterTypes.STRING_SEARCH\nfunction filterStringSearch(\n  filterValues: unknown[],\n  featureValue: unknown,\n  params: StringSearchOptions = {}\n): boolean {\n  const normalizedFeatureValue = normalize(featureValue, params);\n  const stringRegExp = params.useRegExp\n    ? filterValues\n    : filterValues.map((filterValue) => {\n        let stringRegExp = escapeRegExp(normalize(filterValue, params));\n\n        if (params.mustStart) stringRegExp = `^${stringRegExp}`;\n        if (params.mustEnd) stringRegExp = `${stringRegExp}$`;\n\n        return stringRegExp;\n      });\n\n  const regex = new RegExp(\n    stringRegExp.join('|'),\n    params.caseSensitive ? 'g' : 'gi'\n  );\n  return !!normalizedFeatureValue.match(regex);\n}\n\n// Aux\nconst specialCharRegExp = /[.*+?^${}()|[\\]\\\\]/g;\nconst normalizeRegExp = /\\p{Diacritic}/gu;\n\nfunction escapeRegExp(value: string) {\n  return value.replace(specialCharRegExp, '\\\\$&');\n}\n\nfunction normalize(data: unknown, params: StringSearchOptions) {\n  let normalizedData = String(data);\n  if (!params.keepSpecialCharacters)\n    normalizedData = normalizedData\n      .normalize('NFD')\n      .replace(normalizeRegExp, '');\n\n  return normalizedData;\n}\n","import {filterFunctions} from './FilterTypes.js';\nimport {Filter, FilterLogicalOperator, Filters} from '../types.js';\nimport {Feature} from 'geojson';\nimport {FilterType} from '../constants.js';\nimport {FeatureData} from '../types-internal.js';\nimport {BinaryFeature} from '@loaders.gl/schema';\n\nconst LOGICAL_OPERATOR_METHODS: Record<\n  FilterLogicalOperator,\n  'every' | 'some'\n> = {\n  and: 'every',\n  or: 'some',\n};\n\nfunction passesFilter(\n  columns: string[],\n  filters: Filters,\n  feature: FeatureData,\n  filtersLogicalOperator: FilterLogicalOperator\n): boolean {\n  const method = LOGICAL_OPERATOR_METHODS[filtersLogicalOperator];\n  return columns[method]((column) => {\n    const columnFilters = filters[column];\n    const columnFilterTypes = Object.keys(columnFilters) as FilterType[];\n\n    if (!feature || feature[column] === null || feature[column] === undefined) {\n      return false;\n    }\n\n    return columnFilterTypes.every((filter) => {\n      const filterFunction = filterFunctions[filter];\n\n      if (!filterFunction) {\n        throw new Error(`\"${filter}\" filter is not implemented.`);\n      }\n\n      return filterFunction(\n        columnFilters[filter]!.values,\n        feature[column],\n        (columnFilters[filter] as Filter[FilterType.STRING_SEARCH])!.params\n      );\n    });\n  });\n}\n\n/**\n * @internal\n * @privateRemarks Exported for use in @deck.gl/carto's getDataFilterExtensionProps.\n */\nexport function _buildFeatureFilter({\n  filters = {},\n  type = 'boolean',\n  filtersLogicalOperator = 'and',\n}: {\n  filters?: Filters;\n  type?: 'number' | 'boolean';\n  filtersLogicalOperator?: FilterLogicalOperator;\n}) {\n  const columns = Object.keys(filters);\n\n  if (!columns.length) {\n    return () => (type === 'number' ? 1 : true);\n  }\n\n  return (feature: Feature | FeatureData) => {\n    const f = feature.properties || feature;\n    const featurePassesFilter = passesFilter(\n      columns,\n      filters,\n      f as FeatureData,\n      filtersLogicalOperator\n    );\n\n    return type === 'number'\n      ? Number(featurePassesFilter)\n      : featurePassesFilter;\n  };\n}\n\n/**\n * Apply certain filters to a collection of features.\n * @internal\n */\nexport function applyFilters(\n  features: FeatureData[],\n  filters: Filters,\n  filtersLogicalOperator: FilterLogicalOperator\n) {\n  return Object.keys(filters).length\n    ? features.filter(_buildFeatureFilter({filters, filtersLogicalOperator}))\n    : features;\n}\n\n/**\n * Binary.\n * @internal\n */\nexport function buildBinaryFeatureFilter({filters = {}}: {filters: Filters}) {\n  const columns = Object.keys(filters);\n\n  if (!columns.length) {\n    return () => 1;\n  }\n\n  return (featureIdIdx: number, binaryData: BinaryFeature) =>\n    passesFilterUsingBinary(columns, filters, featureIdIdx, binaryData);\n}\n\nfunction getValueFromNumericProps(\n  featureIdIdx: number,\n  binaryData: BinaryFeature,\n  {column}: {column: string}\n) {\n  return binaryData.numericProps?.[column]?.value[featureIdIdx];\n}\n\nfunction getValueFromProperties(\n  featureIdIdx: number,\n  binaryData: BinaryFeature,\n  {column}: {column: string}\n) {\n  const propertyIdx = binaryData.featureIds.value[featureIdIdx];\n  return (binaryData.properties[propertyIdx] as Record<string, unknown>)?.[\n    column\n  ];\n}\n\nconst GET_VALUE_BY_BINARY_PROP = {\n  properties: getValueFromProperties,\n  numericProps: getValueFromNumericProps,\n};\n\nfunction getBinaryPropertyByFilterValues(filterValues: unknown[]) {\n  return typeof filterValues.flat()[0] === 'string'\n    ? 'properties'\n    : 'numericProps';\n}\n\nfunction getFeatureValue(\n  featureIdIdx: number,\n  binaryData: any,\n  filter: {type: FilterType; column: string; values: unknown[]}\n) {\n  const {column, values} = filter;\n  const binaryProp = getBinaryPropertyByFilterValues(values);\n  const getFeatureValueFn = GET_VALUE_BY_BINARY_PROP[binaryProp];\n  return getFeatureValueFn(featureIdIdx, binaryData, {column});\n}\n\nfunction passesFilterUsingBinary(\n  columns: string[],\n  filters: Filters,\n  featureIdIdx: number,\n  binaryData: BinaryFeature\n) {\n  return columns.every((column) => {\n    const columnFilters = filters[column];\n\n    return Object.entries(columnFilters).every(([type, {values}]) => {\n      const filterFn = filterFunctions[type as FilterType];\n      if (!filterFn) {\n        throw new Error(`\"${type}\" filter is not implemented.`);\n      }\n\n      if (!values) return 0;\n\n      const featureValue = getFeatureValue(featureIdIdx, binaryData, {\n        type: type as FilterType,\n        column,\n        values,\n      });\n\n      if (featureValue === undefined || featureValue === null) return 0;\n\n      return filterFn(values, featureValue);\n    });\n  });\n}\n","import intersects from '@turf/boolean-intersects';\nimport {FeatureCollection} from 'geojson';\nimport {FeatureData} from '../types-internal.js';\nimport {SpatialFilter} from '../types.js';\n\nexport function geojsonFeatures({\n  geojson,\n  spatialFilter,\n  uniqueIdProperty,\n}: {\n  geojson: FeatureCollection;\n  spatialFilter: SpatialFilter;\n  uniqueIdProperty?: string;\n}): FeatureData[] {\n  let uniqueIdx = 0;\n  const map = new Map();\n\n  if (!spatialFilter) {\n    return [];\n  }\n\n  for (const feature of geojson.features) {\n    const uniqueId = uniqueIdProperty\n      ? feature.properties![uniqueIdProperty]\n      : ++uniqueIdx;\n    if (!map.has(uniqueId) && intersects(spatialFilter, feature)) {\n      map.set(uniqueId, feature.properties);\n    }\n  }\n\n  return Array.from(map.values());\n}\n","// math.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\nconst RADIANS_TO_DEGREES = (1 / Math.PI) * 180;\nconst DEGREES_TO_RADIANS = (1 / 180) * Math.PI;\nconst DEFAULT_CONFIG = {\n    EPSILON: 1e-12,\n    debug: false,\n    precision: 4,\n    printTypes: false,\n    printDegrees: false,\n    printRowMajor: true,\n    _cartographicRadians: false\n};\n// Configuration is truly global as of v3.6 to ensure single config even if multiple copies of math.gl\n// Multiple copies of config can be quite tricky to debug...\nglobalThis.mathgl = globalThis.mathgl || { config: { ...DEFAULT_CONFIG } };\nexport const config = globalThis.mathgl.config;\nexport function configure(options) {\n    // Only copy existing keys\n    Object.assign(config, options);\n    return config;\n}\n/**\n * Formats a value into a string\n * @param value\n * @param param1\n * @returns\n */\nexport function formatValue(value, { precision = config.precision } = {}) {\n    value = round(value);\n    // get rid of trailing zeros\n    return `${parseFloat(value.toPrecision(precision))}`;\n}\n/**\n * Check if value is an \"array\"\n * Returns `true` if value is either an array or a typed array\n * Note: returns `false` for `ArrayBuffer` and `DataView` instances\n * @note isTypedArray and isNumericArray are often more useful in TypeScript\n */\nexport function isArray(value) {\n    return Array.isArray(value) || (ArrayBuffer.isView(value) && !(value instanceof DataView));\n}\nexport function clone(array) {\n    return 'clone' in array ? array.clone() : array.slice();\n}\nexport function toRadians(degrees) {\n    return radians(degrees);\n}\nexport function toDegrees(radians) {\n    return degrees(radians);\n}\nexport function radians(degrees, result) {\n    return map(degrees, (degrees) => degrees * DEGREES_TO_RADIANS, result);\n}\nexport function degrees(radians, result) {\n    return map(radians, (radians) => radians * RADIANS_TO_DEGREES, result);\n}\n/**\n * \"GLSL equivalent\" of `Math.sin`: Works on single values and vectors\n * @deprecated\n */\nexport function sin(radians, result) {\n    return map(radians, (angle) => Math.sin(angle), result);\n}\n/**\n * \"GLSL equivalent\" of `Math.cos`: Works on single values and vectors\n * @deprecated\n */\nexport function cos(radians, result) {\n    return map(radians, (angle) => Math.cos(angle), result);\n}\n/**\n * \"GLSL equivalent\" of `Math.tan`: Works on single values and vectors\n * @deprecated\n */\nexport function tan(radians, result) {\n    return map(radians, (angle) => Math.tan(angle), result);\n}\n/**\n * \"GLSL equivalent\" of `Math.asin`: Works on single values and vectors\n * @deprecated\n */\nexport function asin(radians, result) {\n    return map(radians, (angle) => Math.asin(angle), result);\n}\n/**\n * \"GLSL equivalent\" of `Math.acos`: Works on single values and vectors\n * @deprecated\n */\nexport function acos(radians, result) {\n    return map(radians, (angle) => Math.acos(angle), result);\n}\n/**\n * \"GLSL equivalent\" of `Math.atan`: Works on single values and vectors\n * @deprecated\n */\nexport function atan(radians, result) {\n    return map(radians, (angle) => Math.atan(angle), result);\n}\nexport function clamp(value, min, max) {\n    return map(value, (value) => Math.max(min, Math.min(max, value)));\n}\nexport function lerp(a, b, t) {\n    if (isArray(a)) {\n        return a.map((ai, i) => lerp(ai, b[i], t));\n    }\n    return t * b + (1 - t) * a;\n}\n/* eslint-disable */\n/**\n * Compares any two math objects, using `equals` method if available.\n * @param a\n * @param b\n * @param epsilon\n * @returns\n */\nexport function equals(a, b, epsilon) {\n    const oldEpsilon = config.EPSILON;\n    if (epsilon) {\n        config.EPSILON = epsilon;\n    }\n    try {\n        if (a === b) {\n            return true;\n        }\n        if (isArray(a) && isArray(b)) {\n            if (a.length !== b.length) {\n                return false;\n            }\n            for (let i = 0; i < a.length; ++i) {\n                // eslint-disable-next-line max-depth\n                if (!equals(a[i], b[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        if (a && a.equals) {\n            return a.equals(b);\n        }\n        if (b && b.equals) {\n            return b.equals(a);\n        }\n        if (typeof a === 'number' && typeof b === 'number') {\n            return Math.abs(a - b) <= config.EPSILON * Math.max(1, Math.abs(a), Math.abs(b));\n        }\n        return false;\n    }\n    finally {\n        config.EPSILON = oldEpsilon;\n    }\n}\nexport function exactEquals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a && typeof a === 'object' && b && typeof b === 'object') {\n        if (a.constructor !== b.constructor) {\n            return false;\n        }\n        if (a.exactEquals) {\n            return a.exactEquals(b);\n        }\n    }\n    if (isArray(a) && isArray(b)) {\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0; i < a.length; ++i) {\n            if (!exactEquals(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n/* eslint-enable */\nexport function withEpsilon(epsilon, func) {\n    const oldPrecision = config.EPSILON;\n    config.EPSILON = epsilon;\n    let value;\n    try {\n        value = func();\n    }\n    finally {\n        config.EPSILON = oldPrecision;\n    }\n    return value;\n}\n// HELPERS\nfunction round(value) {\n    return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n// If the array has a clone function, calls it, otherwise returns a copy\nfunction duplicateArray(array) {\n    // @ts-expect-error We check for math.gl class methods\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    return array.clone ? array.clone() : new Array(array.length);\n}\n// If the argument value is an array, applies the func element wise,\n// otherwise applies func to the argument value\nfunction map(value, func, result) {\n    if (isArray(value)) {\n        const array = value;\n        result = result || duplicateArray(array);\n        for (let i = 0; i < result.length && i < array.length; ++i) {\n            const val = typeof value === 'number' ? value : value[i];\n            result[i] = func(val, i, result);\n        }\n        return result;\n    }\n    return func(value);\n}\n//# sourceMappingURL=common.js.map","// Replacement for the external assert method to reduce bundle size\n// Note: We don't use the second \"message\" argument in calling code,\n// so no need to support it here\nexport function assert(condition, message) {\n    if (!condition) {\n        throw new Error(message || '@math.gl/web-mercator: assertion failed.');\n    }\n}\n//# sourceMappingURL=assert.js.map","// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\nimport { createMat4, transformVector, clamp, log2 } from \"./math-utils.js\";\nimport { mat4, vec2, vec3 } from '@math.gl/core';\nimport { assert } from \"./assert.js\";\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n// Latitude that makes a square world, 2 * atan(E ** PI) - PI / 2\nexport const MAX_LATITUDE = 85.051129;\n// Mapbox default altitude\nexport const DEFAULT_ALTITUDE = 1.5;\n/** Logarithimic zoom to linear scale **/\nexport function zoomToScale(zoom) {\n    return Math.pow(2, zoom);\n}\n/** Linear scale to logarithimic zoom **/\nexport function scaleToZoom(scale) {\n    return log2(scale);\n}\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return [x,y] coordinates.\n */\nexport function lngLatToWorld(lngLat) {\n    const [lng, lat] = lngLat;\n    assert(Number.isFinite(lng));\n    assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n    const lambda2 = lng * DEGREES_TO_RADIANS;\n    const phi2 = lat * DEGREES_TO_RADIANS;\n    const x = (TILE_SIZE * (lambda2 + PI)) / (2 * PI);\n    const y = (TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5)))) / (2 * PI);\n    return [x, y];\n}\n/**\n * Unproject world point [x,y] on map onto {lat, lon} on sphere\n *\n * @param xy - array with [x,y] members\n *  representing point on projected map plane\n * @return - array with [x,y] of point on sphere.\n *   Has toArray method if you need a GeoJSON Array.\n *   Per cartographic tradition, lat and lon are specified as degrees.\n */\nexport function worldToLngLat(xy) {\n    const [x, y] = xy;\n    const lambda2 = (x / TILE_SIZE) * (2 * PI) - PI;\n    const phi2 = 2 * (Math.atan(Math.exp((y / TILE_SIZE) * (2 * PI) - PI)) - PI_4);\n    return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n/**\n * Returns the zoom level that gives a 1 meter pixel at a certain latitude\n * 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\n */\nexport function getMeterZoom(options) {\n    const { latitude } = options;\n    assert(Number.isFinite(latitude));\n    const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n    return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n/**\n * Calculate the conversion from meter to common units at a given latitude\n * This is a cheaper version of `getDistanceScales`\n * @param latitude center latitude in degrees\n * @returns common units per meter\n */\nexport function unitsPerMeter(latitude) {\n    const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n    return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;\n}\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\nexport function getDistanceScales(options) {\n    const { latitude, longitude, highPrecision = false } = options;\n    assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n    const worldSize = TILE_SIZE;\n    const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n    /**\n     * Number of pixels occupied by one degree longitude around current lat/lon:\n       unitsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n         = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n       unitsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n         = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n     */\n    const unitsPerDegreeX = worldSize / 360;\n    const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n    /**\n     * Number of pixels occupied by one meter around current lat/lon:\n     */\n    const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n    /**\n     * LngLat: longitude -> east and latitude -> north (bottom left)\n     * UTM meter offset: x -> east and y -> north (bottom left)\n     * World space: x -> east and y -> south (top left)\n     *\n     * Y needs to be flipped when converting delta degree/meter to delta pixels\n     */\n    const result = {\n        unitsPerMeter: [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter],\n        metersPerUnit: [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter],\n        unitsPerDegree: [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter],\n        degreesPerUnit: [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter]\n    };\n    /**\n     * Taylor series 2nd order for 1/latCosine\n       f'(a) * (x - a)\n         = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n         = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n     */\n    if (highPrecision) {\n        const latCosine2 = (DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS)) / latCosine;\n        const unitsPerDegreeY2 = (unitsPerDegreeX * latCosine2) / 2;\n        const altUnitsPerDegree2 = (worldSize / EARTH_CIRCUMFERENCE) * latCosine2;\n        const altUnitsPerMeter2 = (altUnitsPerDegree2 / unitsPerDegreeY) * altUnitsPerMeter;\n        result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n        result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n    }\n    // Main results, used for converting meters to latlng deltas and scaling offsets\n    return result;\n}\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ, xyz) {\n    const [longitude, latitude, z0] = lngLatZ;\n    const [x, y, z] = xyz;\n    // eslint-disable-next-line no-shadow\n    const { unitsPerMeter, unitsPerMeter2 } = getDistanceScales({\n        longitude,\n        latitude,\n        highPrecision: true\n    });\n    const worldspace = lngLatToWorld(lngLatZ);\n    worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n    worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n    const newLngLat = worldToLngLat(worldspace);\n    const newZ = (z0 || 0) + (z || 0);\n    return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n/**\n *\n * view and projection matrix creation is intentionally kept compatible with\n * mapbox-gl's implementation to ensure that seamless interoperation\n * with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n */\nexport function getViewMatrix(options) {\n    const { \n    // Viewport props\n    height, pitch, bearing, altitude, \n    // Pre-calculated parameters\n    scale, center } = options;\n    // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n    // Note that mercator world coordinates typically need to be flipped\n    //\n    // Note: As usual, matrix operation orders should be read in reverse\n    // since vectors will be multiplied from the right during transformation\n    const vm = createMat4();\n    // Move camera to altitude (along the pitch & bearing direction)\n    mat4.translate(vm, vm, [0, 0, -altitude]);\n    // Rotate by bearing, and then by pitch (which tilts the view)\n    mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n    mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n    const relativeScale = scale / height;\n    mat4.scale(vm, vm, [relativeScale, relativeScale, relativeScale]);\n    if (center) {\n        mat4.translate(vm, vm, vec3.negate([], center));\n    }\n    return vm;\n}\n/**\n * Calculates mapbox compatible projection matrix from parameters\n *\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.scale Scale at the current zoom\n * @param options.center Offset of the target, vec3 in world space\n * @param options.offset Offset of the focal point, vec2 in screen space\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns project parameters object\n */\nexport function getProjectionParameters(options) {\n    const { width, height, altitude, pitch = 0, offset, center, scale, nearZMultiplier = 1, farZMultiplier = 1 } = options;\n    let { fovy = altitudeToFovy(DEFAULT_ALTITUDE) } = options;\n    // For back-compatibility allow field of view to be\n    // derived from altitude\n    if (altitude !== undefined) {\n        fovy = altitudeToFovy(altitude);\n    }\n    const fovRadians = fovy * DEGREES_TO_RADIANS;\n    const pitchRadians = pitch * DEGREES_TO_RADIANS;\n    // Distance from camera to the target\n    const focalDistance = fovyToAltitude(fovy);\n    let cameraToSeaLevelDistance = focalDistance;\n    if (center) {\n        cameraToSeaLevelDistance += (center[2] * scale) / Math.cos(pitchRadians) / height;\n    }\n    const fovAboveCenter = fovRadians * (0.5 + (offset ? offset[1] : 0) / height);\n    // Find the distance from the center point to the center top\n    // in focal distance units using law of sines.\n    const topHalfSurfaceDistance = (Math.sin(fovAboveCenter) * cameraToSeaLevelDistance) /\n        Math.sin(clamp(Math.PI / 2 - pitchRadians - fovAboveCenter, 0.01, Math.PI - 0.01));\n    // Calculate z distance of the farthest fragment that should be rendered.\n    const furthestDistance = Math.sin(pitchRadians) * topHalfSurfaceDistance + cameraToSeaLevelDistance;\n    // Matches mapbox limit\n    const horizonDistance = cameraToSeaLevelDistance * 10;\n    // Calculate z value of the farthest fragment that should be rendered.\n    const farZ = Math.min(furthestDistance * farZMultiplier, horizonDistance);\n    return {\n        fov: fovRadians,\n        aspect: width / height,\n        focalDistance,\n        near: nearZMultiplier,\n        far: farZ\n    };\n}\n/**\n * CALCULATE PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n *\n * To match mapbox's z buffer:\n *  - \\<= 0.28: nearZMultiplier: 0.1, farZmultiplier: 1\n *  - \\>= 0.29: nearZMultiplier: 1 / height, farZMultiplier: 1.01\n *\n * @param options Viewport options\n * @param options.width Width of \"viewport\" or window\n * @param options.height Height of \"viewport\" or window\n * @param options.scale Scale at the current zoom\n * @param options.center Offset of the target, vec3 in world space\n * @param options.offset Offset of the focal point, vec2 in screen space\n * @param options.pitch Camera angle in degrees (0 is straight down)\n * @param options.fovy field of view in degrees\n * @param options.altitude if provided, field of view is calculated using `altitudeToFovy()`\n * @param options.nearZMultiplier control z buffer\n * @param options.farZMultiplier control z buffer\n * @returns 4x4 projection matrix\n */\nexport function getProjectionMatrix(options) {\n    const { fov, aspect, near, far } = getProjectionParameters(options);\n    const projectionMatrix = mat4.perspective([], fov, // fov in radians\n    aspect, // aspect ratio\n    near, // near plane\n    far // far plane\n    );\n    return projectionMatrix;\n}\n/**\n *\n * Convert an altitude to field of view such that the\n * focal distance is equal to the altitude\n *\n * @param altitude - altitude of camera in screen units\n * @return fovy field of view in degrees\n */\nexport function altitudeToFovy(altitude) {\n    return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\n/**\n *\n * Convert an field of view such that the\n * focal distance is equal to the altitude\n *\n * @param fovy - field of view in degrees\n * @return altitude altitude of camera in screen units\n */\nexport function fovyToAltitude(fovy) {\n    return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\n// Project flat coordinates to pixels on screen.\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n    const [x, y, z = 0] = xyz;\n    assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n    return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n/**\n * Unproject pixels on screen to flat coordinates.\n *\n * @param xyz - pixel coordinate on screen.\n * @param pixelUnprojectionMatrix - unprojection matrix 4x4\n * @param targetZ - if pixel coordinate does not have a 3rd component (depth),\n *    targetZ is used as the elevation plane to unproject onto\n * @return [x, y, Z] flat coordinates on 512*512 Mercator Zoom 0 tile.\n */\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {\n    const [x, y, z] = xyz;\n    assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n    if (Number.isFinite(z)) {\n        // Has depth component\n        const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n        return coord;\n    }\n    // since we don't know the correct projected z value for the point,\n    // unproject two points to get a line and then find the point on that line with z=0\n    const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n    const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n    const z0 = coord0[2];\n    const z1 = coord1[2];\n    const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n    return vec2.lerp([], coord0, coord1, t);\n}\n//# sourceMappingURL=web-mercator-utils.js.map","import {lngLatToWorld} from '@math.gl/web-mercator';\nimport {BBox, GeoJsonGeometryTypes, Geometry, Position} from 'geojson';\n\ntype TransformFn = (coordinates: any[], bbox: Position[]) => any[];\n\nconst TRANSFORM_FN: Record<\n  Exclude<GeoJsonGeometryTypes, 'GeometryCollection'>,\n  TransformFn\n> = {\n  Point: transformPoint,\n  MultiPoint: transformMultiPoint,\n  LineString: transformLineString,\n  MultiLineString: transformMultiLineString,\n  Polygon: transformPolygon,\n  MultiPolygon: transformMultiPolygon,\n};\n\n/**\n * Transform WGS84 coordinates to tile coords.\n * It's the inverse of deck.gl coordinate-transform (https://github.com/visgl/deck.gl/blob/master/modules/geo-layers/src/mvt-layer/coordinate-transform.js)\n *\n * @param geometry - any valid geojson geometry\n * @param bbox - geojson bbox\n */\nexport function transformToTileCoords<T extends Geometry>(\n  geometry: T,\n  bbox: BBox\n): T {\n  const [west, south, east, north] = bbox;\n  const nw = projectFlat([west, north]);\n  const se = projectFlat([east, south]);\n  const projectedBbox = [nw, se];\n\n  if (geometry.type === 'GeometryCollection') {\n    throw new Error('Unsupported geometry type GeometryCollection');\n  }\n\n  const transformFn = TRANSFORM_FN[geometry.type];\n  const coordinates = transformFn(geometry.coordinates, projectedBbox);\n  return {...geometry, coordinates};\n}\n\nfunction transformPoint([pointX, pointY]: Position, [nw, se]: Position[]) {\n  const x = inverseLerp(nw[0], se[0], pointX);\n  const y = inverseLerp(nw[1], se[1], pointY);\n\n  return [x, y];\n}\n\nfunction getPoints(geometry: Position[], bbox: Position[]) {\n  return geometry.map((g) => transformPoint(projectFlat(g), bbox));\n}\n\nfunction transformMultiPoint(multiPoint: Position[], bbox: Position[]) {\n  return getPoints(multiPoint, bbox);\n}\n\nfunction transformLineString(line: Position[], bbox: Position[]) {\n  return getPoints(line, bbox);\n}\n\nfunction transformMultiLineString(\n  multiLineString: Position[][],\n  bbox: Position[]\n) {\n  return multiLineString.map((lineString) =>\n    transformLineString(lineString, bbox)\n  );\n}\n\nfunction transformPolygon(polygon: Position[][], bbox: Position[]) {\n  return polygon.map((polygonRing) => getPoints(polygonRing, bbox));\n}\n\nfunction transformMultiPolygon(multiPolygon: Position[][][], bbox: Position[]) {\n  return multiPolygon.map((polygon) => transformPolygon(polygon, bbox));\n}\n\nfunction projectFlat(xyz: Position): Position {\n  return lngLatToWorld(xyz);\n}\n\nfunction inverseLerp(a: number, b: number, x: number): number {\n  return (x - a) / (b - a);\n}\n","import {lerp} from '@math.gl/core';\nimport {lngLatToWorld, worldToLngLat} from '@math.gl/web-mercator';\nimport {BBox, GeoJsonGeometryTypes, Geometry, Position} from 'geojson';\n\ntype TransformFn = (coordinates: any[], bbox: Position[]) => any[];\n\nconst TRANSFORM_FN: Record<\n  Exclude<GeoJsonGeometryTypes, 'GeometryCollection'>,\n  TransformFn\n> = {\n  Point: transformPoint,\n  MultiPoint: transformMultiPoint,\n  LineString: transformLineString,\n  MultiLineString: transformMultiLineString,\n  Polygon: transformPolygon,\n  MultiPolygon: transformMultiPolygon,\n};\n\n/**\n * Transform tile coords to WGS84 coordinates.\n *\n * @param geometry - any valid geojson geometry\n * @param bbox - geojson bbox\n */\nexport function transformTileCoordsToWGS84<T extends Geometry>(\n  geometry: T,\n  bbox: BBox\n): T {\n  const [west, south, east, north] = bbox;\n  const nw = lngLatToWorld([west, north]);\n  const se = lngLatToWorld([east, south]);\n  const projectedBbox = [nw, se];\n\n  if (geometry.type === 'GeometryCollection') {\n    throw new Error('Unsupported geometry type GeometryCollection');\n  }\n\n  const transformFn = TRANSFORM_FN[geometry.type];\n  const coordinates = transformFn(geometry.coordinates, projectedBbox);\n  return {...geometry, coordinates};\n}\n\nfunction transformPoint([pointX, pointY]: Position, [nw, se]: Position[]) {\n  const x = lerp(nw[0], se[0], pointX);\n  const y = lerp(nw[1], se[1], pointY);\n\n  return worldToLngLat([x, y]);\n}\n\nfunction getPoints(geometry: Position[], bbox: Position[]) {\n  return geometry.map((g) => transformPoint(g, bbox));\n}\n\nfunction transformMultiPoint(multiPoint: Position[], bbox: Position[]) {\n  return getPoints(multiPoint, bbox);\n}\n\nfunction transformLineString(line: Position[], bbox: Position[]) {\n  return getPoints(line, bbox);\n}\n\nfunction transformMultiLineString(\n  multiLineString: Position[][],\n  bbox: Position[]\n) {\n  return multiLineString.map((lineString) =>\n    transformLineString(lineString, bbox)\n  );\n}\n\nfunction transformPolygon(polygon: Position[][], bbox: Position[]) {\n  return polygon.map((polygonRing) => getPoints(polygonRing, bbox));\n}\n\nfunction transformMultiPolygon(multiPolygon: Position[][][], bbox: Position[]) {\n  return multiPolygon.map((polygon) => transformPolygon(polygon, bbox));\n}\n","import bboxPolygon from '@turf/bbox-polygon';\nimport intersects from '@turf/boolean-intersects';\nimport booleanWithin from '@turf/boolean-within';\nimport intersect from '@turf/intersect';\nimport {transformToTileCoords} from '../utils/transformToTileCoords.js';\nimport {transformTileCoordsToWGS84} from '../utils/transformTileCoordsToWGS84.js';\nimport {TileFormat} from '../constants.js';\nimport {\n  BBox,\n  Feature,\n  Geometry,\n  LineString,\n  MultiPolygon,\n  Point,\n  Polygon,\n  Position,\n} from 'geojson';\nimport {SpatialFilter, Tile} from '../types.js';\nimport {TileFeatureExtractOptions} from './tileFeatures.js';\nimport {featureCollection} from '@turf/helpers';\nimport {FeatureData} from '../types-internal.js';\nimport {\n  BinaryAttribute,\n  BinaryFeature,\n  BinaryGeometryType,\n  BinaryPointFeature,\n  TypedArrayConstructor,\n} from '@loaders.gl/schema';\n\nexport const FEATURE_GEOM_PROPERTY = '__geomValue';\n\ntype TileMap = Map<unknown, unknown>;\n\ntype TileDataInternal = {\n  uniqueId: string | number | undefined;\n  properties: any;\n  numericProps: Record<string, number>;\n};\n\nexport function tileFeaturesGeometries({\n  tiles,\n  tileFormat,\n  spatialFilter,\n  uniqueIdProperty,\n  options,\n}: {\n  tiles: Tile[];\n  tileFormat?: TileFormat;\n  spatialFilter: SpatialFilter;\n  uniqueIdProperty?: string;\n  options?: {storeGeometry?: boolean};\n}): FeatureData[] {\n  const map = new Map();\n\n  for (const tile of tiles) {\n    // Discard if it's not a visible tile (only check false value, not undefined)\n    // or tile has not data\n    if (tile.isVisible === false || !tile.data) {\n      continue;\n    }\n\n    const bbox = [\n      tile.bbox.west,\n      tile.bbox.south,\n      tile.bbox.east,\n      tile.bbox.north,\n    ] as BBox;\n    const bboxToGeom = bboxPolygon(bbox);\n    const tileIsFullyVisible = booleanWithin(bboxToGeom, spatialFilter);\n\n    // Clip the geometry to intersect with the tile\n    const spatialFilterFeature: Feature<Polygon | MultiPolygon> = {\n      type: 'Feature',\n      geometry: spatialFilter,\n      properties: {},\n    };\n    const clippedGeometryToIntersect = intersect(\n      featureCollection([bboxToGeom, spatialFilterFeature])\n    );\n\n    if (!clippedGeometryToIntersect) {\n      continue;\n    }\n\n    // We assume that MVT tileFormat uses local coordinates so we transform the geometry to intersect to tile coordinates [0..1],\n    // while in the case of 'geojson' or binary, the geometries are already in WGS84\n    const transformedGeometryToIntersect =\n      tileFormat === TileFormat.MVT\n        ? transformToTileCoords(clippedGeometryToIntersect.geometry, bbox)\n        : clippedGeometryToIntersect.geometry;\n\n    createIndicesForPoints(tile.data.points!);\n\n    calculateFeatures({\n      map,\n      tileIsFullyVisible,\n      geometryIntersection: transformedGeometryToIntersect,\n      data: tile.data.points!,\n      type: 'Point',\n      bbox,\n      tileFormat,\n      uniqueIdProperty,\n      options,\n    });\n    calculateFeatures({\n      map,\n      tileIsFullyVisible,\n      geometryIntersection: transformedGeometryToIntersect,\n      data: tile.data.lines!,\n      type: 'LineString',\n      bbox,\n      tileFormat,\n      uniqueIdProperty,\n      options,\n    });\n    calculateFeatures({\n      map,\n      tileIsFullyVisible,\n      geometryIntersection: transformedGeometryToIntersect,\n      data: tile.data.polygons!,\n      type: 'Polygon',\n      bbox,\n      tileFormat,\n      uniqueIdProperty,\n      options,\n    });\n  }\n  return Array.from(map.values());\n}\n\nfunction processTileFeatureProperties({\n  map,\n  data,\n  startIndex,\n  endIndex,\n  type,\n  bbox,\n  tileFormat,\n  uniqueIdProperty,\n  storeGeometry,\n  geometryIntersection,\n}: {\n  map: TileMap;\n  data: BinaryFeature;\n  startIndex: number;\n  endIndex: number;\n  type: BinaryGeometryType;\n  bbox: BBox;\n  tileFormat?: TileFormat;\n  uniqueIdProperty?: string;\n  storeGeometry: boolean;\n  geometryIntersection?: Geometry;\n}) {\n  const tileProps = getPropertiesFromTile(data, startIndex);\n  const uniquePropertyValue = getUniquePropertyValue(\n    tileProps,\n    uniqueIdProperty,\n    map\n  );\n\n  if (!uniquePropertyValue || map.has(uniquePropertyValue)) {\n    return;\n  }\n  let geometry: Geometry | null = null;\n\n  // Only calculate geometry if necessary\n  if (storeGeometry || geometryIntersection) {\n    const {positions} = data;\n    const ringCoordinates = getRingCoordinatesFor(\n      startIndex,\n      endIndex,\n      positions\n    );\n    geometry = getFeatureByType(ringCoordinates, type);\n  }\n\n  // If intersection is required, check before proceeding\n  if (\n    geometry &&\n    geometryIntersection &&\n    !intersects(geometry, geometryIntersection)\n  ) {\n    return;\n  }\n\n  const properties = parseProperties(tileProps);\n\n  // Only save geometry if necessary\n  if (storeGeometry && geometry) {\n    properties[FEATURE_GEOM_PROPERTY] =\n      tileFormat === TileFormat.MVT\n        ? transformTileCoordsToWGS84(geometry, bbox)\n        : geometry;\n  }\n  map.set(uniquePropertyValue, properties);\n}\n\nfunction addIntersectedFeaturesInTile({\n  map,\n  data,\n  geometryIntersection,\n  type,\n  bbox,\n  tileFormat,\n  uniqueIdProperty,\n  options,\n}: {\n  map: TileMap;\n  data: BinaryFeature;\n  geometryIntersection: Geometry;\n  type: BinaryGeometryType;\n  bbox: BBox;\n  tileFormat?: TileFormat;\n  uniqueIdProperty?: string;\n  options?: TileFeatureExtractOptions;\n}) {\n  const indices = getIndices(data);\n  const storeGeometry = options?.storeGeometry || false;\n\n  for (let i = 0; i < indices.length - 1; i++) {\n    const startIndex = indices[i];\n    const endIndex = indices[i + 1];\n    processTileFeatureProperties({\n      map,\n      data,\n      startIndex,\n      endIndex,\n      type,\n      bbox,\n      tileFormat,\n      uniqueIdProperty,\n      storeGeometry,\n      geometryIntersection,\n    });\n  }\n}\n\nfunction getIndices(data: BinaryFeature) {\n  let indices: BinaryAttribute;\n  switch (data.type) {\n    case 'Point':\n      // @ts-expect-error Missing or changed types?\n      indices = data.pointIndices;\n      break;\n    case 'LineString':\n      indices = data.pathIndices;\n      break;\n    case 'Polygon':\n      indices = data.primitivePolygonIndices;\n      break;\n    default:\n      throw new Error(`Unexpected type, \"${(data as BinaryFeature).type}\"`);\n  }\n  return indices.value;\n}\n\nfunction getFeatureId(data: BinaryFeature, startIndex: number) {\n  return data.featureIds.value[startIndex];\n}\n\nfunction getPropertiesFromTile(data: BinaryFeature, startIndex: number) {\n  const featureId = getFeatureId(data, startIndex);\n  const {properties, numericProps, fields} = data;\n  const result: TileDataInternal = {\n    uniqueId: (fields?.[featureId] as {id: string | number})?.id,\n    properties: properties[featureId],\n    numericProps: {},\n  };\n\n  for (const key in numericProps) {\n    result.numericProps[key] = numericProps[key].value[startIndex];\n  }\n\n  return result;\n}\n\nfunction parseProperties(tileProps: TileDataInternal) {\n  const {properties, numericProps} = tileProps;\n  return Object.assign({}, properties, numericProps);\n}\n\nfunction getUniquePropertyValue(\n  tileProps: TileDataInternal,\n  uniqueIdProperty: string | undefined,\n  map: TileMap\n) {\n  if (uniqueIdProperty) {\n    return getValueFromTileProps(tileProps, uniqueIdProperty);\n  }\n\n  if (tileProps.uniqueId) {\n    return tileProps.uniqueId;\n  }\n\n  const artificialId = map.size + 1; // a counter, assumed as a valid new id\n  return (\n    getValueFromTileProps(tileProps, 'cartodb_id') ||\n    getValueFromTileProps(tileProps, 'geoid') ||\n    artificialId\n  );\n}\n\nfunction getValueFromTileProps(\n  tileProps: TileDataInternal,\n  propertyName: string\n) {\n  const {properties, numericProps} = tileProps;\n  return numericProps[propertyName] || properties[propertyName];\n}\n\nfunction getFeatureByType(\n  coordinates: Position[],\n  type: BinaryGeometryType\n): Polygon | LineString | Point {\n  switch (type) {\n    case 'Polygon':\n      return {type: 'Polygon', coordinates: [coordinates]};\n    case 'LineString':\n      return {type: 'LineString', coordinates};\n    case 'Point':\n      return {type: 'Point', coordinates: coordinates[0]};\n    default:\n      throw new Error('Invalid geometry type');\n  }\n}\n\nfunction getRingCoordinatesFor(\n  startIndex: number,\n  endIndex: number,\n  positions: BinaryAttribute\n) {\n  const ringCoordinates = [];\n\n  for (let j = startIndex; j < endIndex; j++) {\n    ringCoordinates.push(\n      Array.from(\n        positions.value.subarray(j * positions.size, (j + 1) * positions.size)\n      )\n    );\n  }\n\n  return ringCoordinates;\n}\n\nfunction calculateFeatures({\n  map,\n  tileIsFullyVisible,\n  geometryIntersection,\n  data,\n  type,\n  bbox,\n  tileFormat,\n  uniqueIdProperty,\n  options,\n}: {\n  map: TileMap;\n  tileIsFullyVisible: boolean;\n  geometryIntersection: SpatialFilter;\n  data: BinaryFeature;\n  type: BinaryGeometryType;\n  bbox: BBox;\n  tileFormat?: TileFormat;\n  uniqueIdProperty?: string;\n  options?: TileFeatureExtractOptions;\n}) {\n  if (!data?.properties.length) {\n    return;\n  }\n\n  if (tileIsFullyVisible) {\n    addAllFeaturesInTile({\n      map,\n      data,\n      type,\n      bbox,\n      tileFormat,\n      uniqueIdProperty,\n      options,\n    });\n  } else {\n    addIntersectedFeaturesInTile({\n      map,\n      data,\n      geometryIntersection,\n      type,\n      bbox,\n      tileFormat,\n      uniqueIdProperty,\n      options,\n    });\n  }\n}\n\nfunction addAllFeaturesInTile({\n  map,\n  data,\n  type,\n  bbox,\n  tileFormat,\n  uniqueIdProperty,\n  options,\n}: {\n  map: TileMap;\n  data: BinaryFeature;\n  type: BinaryGeometryType;\n  bbox: BBox;\n  tileFormat?: TileFormat;\n  uniqueIdProperty?: string;\n  options?: TileFeatureExtractOptions;\n}) {\n  const indices = getIndices(data);\n  const storeGeometry = options?.storeGeometry || false;\n  for (let i = 0; i < indices.length - 1; i++) {\n    const startIndex = indices[i];\n    const endIndex = indices[i + 1];\n    processTileFeatureProperties({\n      map,\n      data,\n      startIndex,\n      endIndex,\n      type,\n      bbox,\n      tileFormat,\n      uniqueIdProperty,\n      storeGeometry,\n    });\n  }\n}\n\nfunction createIndicesForPoints(data: BinaryPointFeature) {\n  const featureIds = data.featureIds.value;\n  const lastFeatureId = featureIds[featureIds.length - 1];\n  const PointIndicesArray = featureIds.constructor as TypedArrayConstructor;\n\n  const pointIndices: BinaryAttribute = {\n    value: new PointIndicesArray(featureIds.length + 1),\n    size: 1,\n  };\n  pointIndices.value.set(featureIds);\n  pointIndices.value.set([lastFeatureId + 1], featureIds.length);\n\n  // @ts-expect-error Missing or changed types?\n  data.pointIndices = pointIndices;\n}\n","// a tile is an array [x,y,z]\nvar d2r = Math.PI / 180,\n    r2d = 180 / Math.PI;\n\nfunction tileToBBOX (tile) {\n    var e = tile2lon(tile[0]+1,tile[2]);\n    var w = tile2lon(tile[0],tile[2]);\n    var s = tile2lat(tile[1]+1,tile[2]);\n    var n = tile2lat(tile[1],tile[2]);\n    return [w,s,e,n];\n}\n\nfunction tileToGeoJSON (tile) {\n    var bbox = tileToBBOX(tile);\n    var poly = {\n        type: 'Polygon',\n        coordinates:\n            [\n                [\n                    [bbox[0],bbox[1]],\n                    [bbox[0], bbox[3]],\n                    [bbox[2], bbox[3]],\n                    [bbox[2], bbox[1]],\n                    [bbox[0], bbox[1]]\n                ]\n            ]\n    };\n    return poly;\n}\n\nfunction tile2lon(x, z) {\n    return (x/Math.pow(2,z)*360-180);\n}\n\nfunction tile2lat(y, z) {\n    var n=Math.PI-2*Math.PI*y/Math.pow(2,z);\n    return (r2d*Math.atan(0.5*(Math.exp(n)-Math.exp(-n))));\n}\n\nfunction pointToTile(lon, lat, z) {\n    var tile = pointToTileFraction(lon, lat, z);\n    tile[0] = Math.floor(tile[0]);\n    tile[1] = Math.floor(tile[1]);\n    return tile;\n}\n\nfunction getChildren (tile) {\n    return [\n        [tile[0]*2, tile[1]*2, tile[2]+1],\n        [tile[0]*2+1, tile[1]*2, tile[2 ]+1],\n        [tile[0]*2+1, tile[1]*2+1, tile[2]+1],\n        [tile[0]*2, tile[1]*2+1, tile[2]+1],\n    ];\n}\n\nfunction getParent (tile) {\n    // top left\n    if(tile[0]%2===0 && tile[1]%2===0) {\n        return [tile[0]/2, tile[1]/2, tile[2]-1];\n    }\n    // bottom left\n    else if((tile[0]%2===0) && (!tile[1]%2===0)) {\n        return [tile[0]/2, (tile[1]-1)/2, tile[2]-1];\n    }\n    // top right\n    else if((!tile[0]%2===0) && (tile[1]%2===0)) {\n        return [(tile[0]-1)/2, (tile[1])/2, tile[2]-1];\n    }\n    // bottom right\n    else {\n        return [(tile[0]-1)/2, (tile[1]-1)/2, tile[2]-1];\n    }\n}\n\nfunction getSiblings (tile) {\n    return getChildren(getParent(tile));\n}\n\nfunction hasSiblings(tile, tiles) {\n    var siblings = getSiblings(tile);\n    for (var i = 0; i < siblings.length; i++) {\n        if (!hasTile(tiles, siblings[i])) return false;\n    }\n    return true;\n}\n\nfunction hasTile(tiles, tile) {\n    for (var i = 0; i < tiles.length; i++) {\n        if (tilesEqual(tiles[i], tile)) return true;\n    }\n    return false;\n}\n\nfunction tilesEqual(tile1, tile2) {\n    return (\n        tile1[0] === tile2[0] &&\n        tile1[1] === tile2[1] &&\n        tile1[2] === tile2[2]\n    );\n}\n\nfunction tileToQuadkey(tile) {\n  var index = '';\n  for (var z = tile[2]; z > 0; z--) {\n      var b = 0;\n      var mask = 1 << (z - 1);\n      if ((tile[0] & mask) !== 0) b++;\n      if ((tile[1] & mask) !== 0) b += 2;\n      index += b.toString();\n  }\n  return index;\n}\n\nfunction quadkeyToTile(quadkey) {\n    var x = 0;\n    var y = 0;\n    var z = quadkey.length;\n\n    for (var i = z; i > 0; i--) {\n        var mask = 1 << (i - 1);\n        switch (quadkey[z - i]) {\n            case '0':\n                break;\n\n            case '1':\n                x |= mask;\n                break;\n\n            case '2':\n                y |= mask;\n                break;\n\n            case '3':\n                x |= mask;\n                y |= mask;\n                break;\n        }\n    }\n    return [x,y,z];\n}\n\nfunction bboxToTile(bboxCoords) {\n    var min = pointToTile(bboxCoords[0], bboxCoords[1], 32);\n    var max = pointToTile(bboxCoords[2], bboxCoords[3], 32);\n    var bbox = [min[0], min[1], max[0], max[1]];\n\n    var z = getBboxZoom(bbox);\n    if (z === 0) return [0,0,0];\n    var x = bbox[0] >>> (32 - z);\n    var y = bbox[1] >>> (32 - z);\n    return [x,y,z];\n}\n\nfunction getBboxZoom(bbox) {\n    var MAX_ZOOM = 28;\n    for (var z = 0; z < MAX_ZOOM; z++) {\n        var mask = 1 << (32 - (z + 1));\n        if (((bbox[0] & mask) != (bbox[2] & mask)) ||\n            ((bbox[1] & mask) != (bbox[3] & mask))) {\n            return z;\n        }\n    }\n\n    return MAX_ZOOM;\n}\n\nfunction pointToTileFraction(lon, lat, z) {\n    var sin = Math.sin(lat * d2r),\n        z2 = Math.pow(2, z),\n        x = z2 * (lon / 360 + 0.5),\n        y = z2 * (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n    return [x, y, z];\n}\n\nmodule.exports = {\n    tileToGeoJSON: tileToGeoJSON,\n    tileToBBOX: tileToBBOX,\n    getChildren: getChildren,\n    getParent: getParent,\n    getSiblings: getSiblings,\n    hasTile: hasTile,\n    hasSiblings: hasSiblings,\n    tilesEqual: tilesEqual,\n    tileToQuadkey: tileToQuadkey,\n    quadkeyToTile: quadkeyToTile,\n    pointToTile: pointToTile,\n    bboxToTile: bboxToTile,\n    pointToTileFraction: pointToTileFraction\n};\n","var tilebelt = require('tilebelt');\n\n/**\n * Given a geometry, create cells and return them in a format easily readable\n * by any software that reads GeoJSON.\n *\n * @alias geojson\n * @param {Object} geom GeoJSON geometry\n * @param {Object} limits an object with min_zoom and max_zoom properties\n * specifying the minimum and maximum level to be tiled.\n * @returns {Object} FeatureCollection of cells formatted as GeoJSON Features\n */\nexports.geojson = function (geom, limits) {\n    return {\n        type: 'FeatureCollection',\n        features: getTiles(geom, limits).map(tileToFeature)\n    };\n};\n\nfunction tileToFeature(t) {\n    return {\n        type: 'Feature',\n        geometry: tilebelt.tileToGeoJSON(t),\n        properties: {}\n    };\n}\n\n/**\n * Given a geometry, create cells and return them in their raw form,\n * as an array of cell identifiers.\n *\n * @alias tiles\n * @param {Object} geom GeoJSON geometry\n * @param {Object} limits an object with min_zoom and max_zoom properties\n * specifying the minimum and maximum level to be tiled.\n * @returns {Array<Array<number>>} An array of tiles given as [x, y, z] arrays\n */\nexports.tiles = getTiles;\n\n/**\n * Given a geometry, create cells and return them as\n * [quadkey](http://msdn.microsoft.com/en-us/library/bb259689.aspx) indexes.\n *\n * @alias indexes\n * @param {Object} geom GeoJSON geometry\n * @param {Object} limits an object with min_zoom and max_zoom properties\n * specifying the minimum and maximum level to be tiled.\n * @returns {Array<String>} An array of tiles given as quadkeys.\n */\nexports.indexes = function (geom, limits) {\n    return getTiles(geom, limits).map(tilebelt.tileToQuadkey);\n};\n\nfunction getTiles(geom, limits) {\n    var i, tile,\n        coords = geom.coordinates,\n        maxZoom = limits.max_zoom,\n        tileHash = {},\n        tiles = [];\n\n    if (geom.type === 'Point') {\n        return [tilebelt.pointToTile(coords[0], coords[1], maxZoom)];\n\n    } else if (geom.type === 'MultiPoint') {\n        for (i = 0; i < coords.length; i++) {\n            tile = tilebelt.pointToTile(coords[i][0], coords[i][1], maxZoom);\n            tileHash[toID(tile[0], tile[1], tile[2])] = true;\n        }\n    } else if (geom.type === 'LineString') {\n        lineCover(tileHash, coords, maxZoom);\n\n    } else if (geom.type === 'MultiLineString') {\n        for (i = 0; i < coords.length; i++) {\n            lineCover(tileHash, coords[i], maxZoom);\n        }\n    } else if (geom.type === 'Polygon') {\n        polygonCover(tileHash, tiles, coords, maxZoom);\n\n    } else if (geom.type === 'MultiPolygon') {\n        for (i = 0; i < coords.length; i++) {\n            polygonCover(tileHash, tiles, coords[i], maxZoom);\n        }\n    } else {\n        throw new Error('Geometry type not implemented');\n    }\n\n    if (limits.min_zoom !== maxZoom) {\n        // sync tile hash and tile array so that both contain the same tiles\n        var len = tiles.length;\n        appendHashTiles(tileHash, tiles);\n        for (i = 0; i < len; i++) {\n            var t = tiles[i];\n            tileHash[toID(t[0], t[1], t[2])] = true;\n        }\n        return mergeTiles(tileHash, tiles, limits);\n    }\n\n    appendHashTiles(tileHash, tiles);\n    return tiles;\n}\n\nfunction mergeTiles(tileHash, tiles, limits) {\n    var mergedTiles = [];\n\n    for (var z = limits.max_zoom; z > limits.min_zoom; z--) {\n\n        var parentTileHash = {};\n        var parentTiles = [];\n\n        for (var i = 0; i < tiles.length; i++) {\n            var t = tiles[i];\n\n            if (t[0] % 2 === 0 && t[1] % 2 === 0) {\n                var id2 = toID(t[0] + 1, t[1], z),\n                    id3 = toID(t[0], t[1] + 1, z),\n                    id4 = toID(t[0] + 1, t[1] + 1, z);\n\n                if (tileHash[id2] && tileHash[id3] && tileHash[id4]) {\n                    tileHash[toID(t[0], t[1], t[2])] = false;\n                    tileHash[id2] = false;\n                    tileHash[id3] = false;\n                    tileHash[id4] = false;\n\n                    var parentTile = [t[0] / 2, t[1] / 2, z - 1];\n\n                    if (z - 1 === limits.min_zoom) mergedTiles.push(parentTile);\n                    else {\n                        parentTileHash[toID(t[0] / 2, t[1] / 2, z - 1)] = true;\n                        parentTiles.push(parentTile);\n                    }\n                }\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            t = tiles[i];\n            if (tileHash[toID(t[0], t[1], t[2])]) mergedTiles.push(t);\n        }\n\n        tileHash = parentTileHash;\n        tiles = parentTiles;\n    }\n\n    return mergedTiles;\n}\n\nfunction polygonCover(tileHash, tileArray, geom, zoom) {\n    var intersections = [];\n\n    for (var i = 0; i < geom.length; i++) {\n        var ring = [];\n        lineCover(tileHash, geom[i], zoom, ring);\n\n        for (var j = 0, len = ring.length, k = len - 1; j < len; k = j++) {\n            var m = (j + 1) % len;\n            var y = ring[j][1];\n\n            // add interesction if it's not local extremum or duplicate\n            if ((y > ring[k][1] || y > ring[m][1]) && // not local minimum\n                (y < ring[k][1] || y < ring[m][1]) && // not local maximum\n                y !== ring[m][1]) intersections.push(ring[j]);\n        }\n    }\n\n    intersections.sort(compareTiles); // sort by y, then x\n\n    for (i = 0; i < intersections.length; i += 2) {\n        // fill tiles between pairs of intersections\n        y = intersections[i][1];\n        for (var x = intersections[i][0] + 1; x < intersections[i + 1][0]; x++) {\n            var id = toID(x, y, zoom);\n            if (!tileHash[id]) {\n                tileArray.push([x, y, zoom]);\n            }\n        }\n    }\n}\n\nfunction compareTiles(a, b) {\n    return (a[1] - b[1]) || (a[0] - b[0]);\n}\n\nfunction lineCover(tileHash, coords, maxZoom, ring) {\n    var prevX, prevY;\n\n    for (var i = 0; i < coords.length - 1; i++) {\n        var start = tilebelt.pointToTileFraction(coords[i][0], coords[i][1], maxZoom),\n            stop = tilebelt.pointToTileFraction(coords[i + 1][0], coords[i + 1][1], maxZoom),\n            x0 = start[0],\n            y0 = start[1],\n            x1 = stop[0],\n            y1 = stop[1],\n            dx = x1 - x0,\n            dy = y1 - y0;\n\n        if (dy === 0 && dx === 0) continue;\n\n        var sx = dx > 0 ? 1 : -1,\n            sy = dy > 0 ? 1 : -1,\n            x = Math.floor(x0),\n            y = Math.floor(y0),\n            tMaxX = dx === 0 ? Infinity : Math.abs(((dx > 0 ? 1 : 0) + x - x0) / dx),\n            tMaxY = dy === 0 ? Infinity : Math.abs(((dy > 0 ? 1 : 0) + y - y0) / dy),\n            tdx = Math.abs(sx / dx),\n            tdy = Math.abs(sy / dy);\n\n        if (x !== prevX || y !== prevY) {\n            tileHash[toID(x, y, maxZoom)] = true;\n            if (ring && y !== prevY) ring.push([x, y]);\n            prevX = x;\n            prevY = y;\n        }\n\n        while (tMaxX < 1 || tMaxY < 1) {\n            if (tMaxX < tMaxY) {\n                tMaxX += tdx;\n                x += sx;\n            } else {\n                tMaxY += tdy;\n                y += sy;\n            }\n            tileHash[toID(x, y, maxZoom)] = true;\n            if (ring && y !== prevY) ring.push([x, y]);\n            prevX = x;\n            prevY = y;\n        }\n    }\n\n    if (ring && y === ring[0][1]) ring.pop();\n}\n\nfunction appendHashTiles(hash, tiles) {\n    var keys = Object.keys(hash);\n    for (var i = 0; i < keys.length; i++) {\n        tiles.push(fromID(+keys[i]));\n    }\n}\n\nfunction toID(x, y, z) {\n    var dim = 2 * (1 << z);\n    return ((dim * y + x) * 32) + z;\n}\n\nfunction fromID(id) {\n    var z = id % 32,\n        dim = 2 * (1 << z),\n        xy = ((id - z) / 32),\n        x = xy % dim,\n        y = ((xy - x) / dim) % dim;\n    return [x, y, z];\n}\n","import { tiles } from '@mapbox/tile-cover';\nconst B = [\n    0x5555555555555555n,\n    0x3333333333333333n,\n    0x0f0f0f0f0f0f0f0fn,\n    0x00ff00ff00ff00ffn,\n    0x0000ffff0000ffffn,\n    0x00000000ffffffffn\n];\nconst S = [0n, 1n, 2n, 4n, 8n, 16n];\nexport function hexToBigInt(hex) {\n    return BigInt(`0x${hex}`);\n}\nexport function bigIntToHex(index) {\n    return index.toString(16);\n}\nexport function tileToCell(tile) {\n    if (tile.z < 0 || tile.z > 26) {\n        throw new Error('Wrong zoom');\n    }\n    const z = BigInt(tile.z);\n    let x = BigInt(tile.x) << (32n - z);\n    let y = BigInt(tile.y) << (32n - z);\n    for (let i = 0; i < 5; i++) {\n        const s = S[5 - i];\n        const b = B[4 - i];\n        x = (x | (x << s)) & b;\n        y = (y | (y << s)) & b;\n    }\n    const quadbin = 0x4000000000000000n |\n        (1n << 59n) | // | (mode << 59) | (mode_dep << 57)\n        (z << 52n) |\n        ((x | (y << 1n)) >> 12n) |\n        (0xfffffffffffffn >> (z * 2n));\n    return quadbin;\n}\nexport function cellToTile(quadbin) {\n    const mode = (quadbin >> 59n) & 7n;\n    const modeDep = (quadbin >> 57n) & 3n;\n    const z = (quadbin >> 52n) & 0x1fn;\n    const q = (quadbin & 0xfffffffffffffn) << 12n;\n    if (mode !== 1n && modeDep !== 0n) {\n        throw new Error('Wrong mode');\n    }\n    let x = q;\n    let y = q >> 1n;\n    for (let i = 0; i < 6; i++) {\n        const s = S[i];\n        const b = B[i];\n        x = (x | (x >> s)) & b;\n        y = (y | (y >> s)) & b;\n    }\n    x = x >> (32n - z);\n    y = y >> (32n - z);\n    return { z: Number(z), x: Number(x), y: Number(y) };\n}\nexport function getResolution(quadbin) {\n    return (quadbin >> 52n) & 0x1fn;\n}\nexport function cellToParent(quadbin) {\n    const zparent = getResolution(quadbin) - 1n;\n    const parent = (quadbin & ~(0x1fn << 52n)) | (zparent << 52n) | (0xfffffffffffffn >> (zparent * 2n));\n    return parent;\n}\nexport function geometryToCells(geometry, resolution) {\n    const zoom = Number(resolution);\n    return tiles(geometry, {\n        min_zoom: zoom,\n        max_zoom: zoom\n    }).map(([x, y, z]) => tileToCell({ x, y, z }));\n}\n","import {SpatialIndex} from '../constants.js';\nimport {getResolution as quadbinGetResolution, geometryToCells} from 'quadbin';\nimport bboxClip from '@turf/bbox-clip';\nimport {SpatialFilter, SpatialIndexTile} from '../types.js';\nimport {BBox, Feature} from 'geojson';\nimport {getResolution as h3GetResolution, polygonToCells} from 'h3-js';\nimport {FeatureData} from '../types-internal.js';\nimport {SpatialDataType} from '../sources/types.js';\n\nexport type TileFeaturesSpatialIndexOptions = {\n  tiles: SpatialIndexTile[];\n  spatialFilter: SpatialFilter;\n  spatialDataColumn: string;\n  spatialDataType: SpatialDataType;\n};\n\nexport function tileFeaturesSpatialIndex({\n  tiles,\n  spatialFilter,\n  spatialDataColumn,\n  spatialDataType,\n}: TileFeaturesSpatialIndexOptions): FeatureData[] {\n  const map = new Map();\n  const spatialIndex = getSpatialIndex(spatialDataType);\n  const resolution = getResolution(tiles, spatialIndex);\n  const spatialIndexIDName = spatialDataColumn\n    ? spatialDataColumn\n    : spatialIndex;\n\n  if (!resolution) {\n    return [];\n  }\n  const cells = getCellsCoverGeometry(spatialFilter, spatialIndex, resolution);\n\n  if (!cells?.length) {\n    return [];\n  }\n\n  // We transform cells to Set to improve the performace\n  const cellsSet = new Set<bigint | string>(cells);\n\n  for (const tile of tiles) {\n    if (tile.isVisible === false || !tile.data) {\n      continue;\n    }\n\n    tile.data.forEach((d: Feature) => {\n      if (cellsSet.has(d.id as bigint | string)) {\n        map.set(d.id, {...d.properties, [spatialIndexIDName]: d.id});\n      }\n    });\n  }\n  return Array.from(map.values());\n}\n\nfunction getResolution(\n  tiles: SpatialIndexTile[],\n  spatialIndex: SpatialIndex\n): number | undefined {\n  const data = tiles.find((tile) => tile.data?.length)?.data;\n\n  if (!data) {\n    return;\n  }\n\n  if (spatialIndex === SpatialIndex.QUADBIN) {\n    return Number(quadbinGetResolution(data[0].id));\n  }\n\n  if (spatialIndex === SpatialIndex.H3) {\n    return h3GetResolution(data[0].id);\n  }\n}\n\nconst bboxWest: BBox = [-180, -90, 0, 90];\nconst bboxEast: BBox = [0, -90, 180, 90];\n\nfunction getCellsCoverGeometry(\n  geometry: SpatialFilter,\n  spatialIndex: SpatialIndex,\n  resolution: number\n) {\n  if (spatialIndex === SpatialIndex.QUADBIN) {\n    // @ts-expect-error TODO: Probably ought to be stricter about number vs. bigint types in this file.\n    return geometryToCells(geometry, resolution);\n  }\n\n  if (spatialIndex === SpatialIndex.H3) {\n    // The current H3 polyfill algorithm can't deal with polygon segments of greater than 180 degrees longitude\n    // so we clip the geometry to be sure that none of them is greater than 180 degrees\n    // https://github.com/uber/h3-js/issues/24#issuecomment-431893796\n    return polygonToCells(\n      bboxClip(geometry, bboxWest).geometry.coordinates as\n        | number[][]\n        | number[][][],\n      resolution,\n      true\n    ).concat(\n      polygonToCells(\n        bboxClip(geometry, bboxEast).geometry.coordinates as\n          | number[][]\n          | number[][][],\n        resolution,\n        true\n      )\n    );\n  }\n}\n\nfunction getSpatialIndex(spatialDataType: SpatialDataType): SpatialIndex {\n  switch (spatialDataType) {\n    case 'h3':\n      return SpatialIndex.H3;\n    case 'quadbin':\n      return SpatialIndex.QUADBIN;\n    default:\n      throw new Error('Unexpected spatial data type');\n  }\n}\n","/**\n * Current version of @carto/api-client.\n * @internal\n */\nexport const API_CLIENT_VERSION = __CARTO_API_CLIENT_VERSION;\n\n/** @internal */\nexport const V3_MINOR_VERSION = '3.4';\n\n/** @privateRemarks Source: @carto/constants, @deck.gl/carto */\nexport const DEFAULT_GEO_COLUMN = 'geom';\n\n/**\n * Fastly default limit is 8192; leave some padding.\n * @privateRemarks Source: @deck.gl/carto\n */\nexport const DEFAULT_MAX_LENGTH_URL = 7000;\n\n/** @privateRemarks Source: @deck.gl/carto */\nexport const DEFAULT_TILE_RESOLUTION = 0.5;\n\n/**\n * @privateRemarks Source: @deck.gl/carto\n * @internal\n */\nexport const DEFAULT_AGGREGATION_RES_LEVEL_H3 = 4;\n\n/**\n * @privateRemarks Source: @deck.gl/carto\n * @internal\n */\nexport const DEFAULT_AGGREGATION_RES_LEVEL_QUADBIN = 6;\n","import {SpatialFilter, SpatialIndexTile, Tile} from '../types.js';\nimport {tileFeaturesGeometries} from './tileFeaturesGeometries.js';\nimport {tileFeaturesSpatialIndex} from './tileFeaturesSpatialIndex.js';\nimport {TileFormat} from '../constants.js';\nimport {DEFAULT_GEO_COLUMN} from '../constants-internal.js';\nimport {FeatureData} from '../types-internal.js';\nimport {SpatialDataType} from '../sources/types.js';\n\n/** @privateRemarks Source: @carto/react-core */\nexport type TileFeatures = {\n  tiles: Tile[];\n  tileFormat: TileFormat;\n  spatialDataType: SpatialDataType;\n  spatialDataColumn?: string;\n  spatialFilter: SpatialFilter;\n  uniqueIdProperty?: string;\n  options?: TileFeatureExtractOptions;\n};\n\n/** @privateRemarks Source: @carto/react-core */\nexport type TileFeatureExtractOptions = {\n  storeGeometry?: boolean;\n};\n\n/** @privateRemarks Source: @carto/react-core */\nexport function tileFeatures({\n  tiles,\n  spatialFilter,\n  uniqueIdProperty,\n  tileFormat,\n  spatialDataColumn = DEFAULT_GEO_COLUMN,\n  spatialDataType,\n  options = {},\n}: TileFeatures): FeatureData[] {\n  if (spatialDataType !== 'geo') {\n    return tileFeaturesSpatialIndex({\n      tiles: tiles as SpatialIndexTile[],\n      spatialFilter,\n      spatialDataColumn,\n      spatialDataType,\n    });\n  }\n  return tileFeaturesGeometries({\n    tiles,\n    tileFormat,\n    spatialFilter,\n    uniqueIdProperty,\n    options,\n  });\n}\n","import {Feature} from 'geojson';\nimport {FilterLogicalOperator, Filters} from '../types.js';\nimport {FilterType} from '../constants.js';\nimport {_buildFeatureFilter} from '../filters/index.js';\nimport {FeatureData} from '../types-internal.js';\n\ntype TimeFilter = Filters['string'][FilterType.TIME] & {\n  params?: {offsetBy?: number};\n};\n\n/**\n * deck.gl's DataFilterExtension supports GPU filtering with 1–4 values. We\n * allocate filters[0] to generic filters and filters[1] to time filters.\n *\n * getFilterValue() _must_ return an array of the same size as the filterSize\n * used to initialize the DataFilterExtension. We document that users must use\n * filterSize=4 for compatibility with @link {getDataFilterExtensionProps}.\n */\nconst DEFAULT_FILTER_SIZE = 4;\n\n/** @experimental Prefer type definition from deck.gl. */\nexport type _DataFilterExtensionProps = {\n  filterRange: number[][];\n  updateTriggers: Record<string, string>;\n  getFilterValue: (feature: Feature | FeatureData) => number[];\n};\n\n/**\n * Creates props for DataFilterExtension, from `@deck.gl/extensions`, given\n * a set of filters. Requires that DataFilterExtension is initialized with\n * filterSize=4, where the CARTO filters will occupy the first two slots.\n *\n * @example To create a deck.gl layer with GPU data filtering:\n * ```typescript\n * import {DataFilterExtension} from '@deck.gl/extensions';\n * import {VectorTileLayer} from '@deck.gl/layers';\n * import {getDataFilterExtensionProps} from '@carto/api-client';\n *\n * const layer = new VectorTileLayer({\n *  data: data,\n *  extensions: [new DataFilterExtension({filterSize: 4})],\n *  ...getDataFilterExtensionProps(filters),\n * });\n * ```\n */\nexport function getDataFilterExtensionProps(\n  filters: Filters,\n  filtersLogicalOperator?: FilterLogicalOperator\n): _DataFilterExtensionProps {\n  const {filtersWithoutTimeType, timeColumn, timeFilter} =\n    getFiltersByType(filters);\n  return {\n    filterRange: getFilterRange(timeFilter, DEFAULT_FILTER_SIZE),\n    updateTriggers: getUpdateTriggers(\n      filtersWithoutTimeType,\n      timeColumn,\n      timeFilter\n    ),\n    getFilterValue: getFilterValue(\n      filtersWithoutTimeType,\n      timeColumn,\n      timeFilter,\n      DEFAULT_FILTER_SIZE,\n      filtersLogicalOperator\n    ),\n  };\n}\n\n/** @internal */\nfunction getFiltersByType(filters: Filters) {\n  const filtersWithoutTimeType: Filters = {};\n\n  let timeColumn: string | null = null;\n  let timeFilter: TimeFilter | null = null;\n\n  for (const [column, columnData] of Object.entries(filters)) {\n    for (const [type, typeData] of Object.entries(columnData) as [\n      FilterType,\n      unknown,\n    ][]) {\n      if (type === FilterType.TIME) {\n        timeColumn = column;\n        timeFilter = typeData as TimeFilter;\n      } else {\n        filtersWithoutTimeType[column] = {[type]: typeData};\n      }\n    }\n  }\n\n  return {\n    filtersWithoutTimeType,\n    timeColumn,\n    timeFilter,\n  };\n}\n\n/** @internal */\nfunction getFilterRange(\n  timeFilter: TimeFilter | null,\n  filterSize: number\n): number[][] {\n  const result = Array(filterSize).fill([0, 0]);\n  // According to getFilterValue all filters are resolved as 0 or 1 in the first position of the array\n  // except the time filter value that is resolved with the real value of the feature in the second position of the array\n  result[0] = [1, 1];\n  if (timeFilter) {\n    const offsetBy = timeFilter.params?.offsetBy || 0;\n    result[1] = timeFilter.values[0].map((v) => v - offsetBy);\n  }\n  return result;\n}\n\n/** @internal */\nfunction getUpdateTriggers(\n  filtersWithoutTimeType: Filters,\n  timeColumn: string | null,\n  timeFilter: TimeFilter | null\n) {\n  const result: Record<string, object> = {...filtersWithoutTimeType};\n\n  // We don't want to change the layer UpdateTriggers every time that the time filter changes\n  // because this filter is changed by the time series widget during its animation\n  // so we remove the time filter value from the `updateTriggers`\n  if (timeColumn && timeFilter) {\n    result[timeColumn] = {\n      ...result[timeColumn],\n      offsetBy: timeFilter.params?.offsetBy,\n      [FilterType.TIME]: {}, // Allows working with other filters, without an impact on performance.\n    };\n  }\n  return {\n    getFilterValue: JSON.stringify(result),\n  };\n}\n\n/** @internal */\nfunction getFilterValue(\n  filtersWithoutTimeType: Filters,\n  timeColumn: string | null,\n  timeFilter: TimeFilter | null,\n  filterSize: number,\n  filtersLogicalOperator?: FilterLogicalOperator\n) {\n  const result = Array(filterSize).fill(0);\n  const featureFilter = _buildFeatureFilter({\n    filters: filtersWithoutTimeType,\n    type: 'number',\n    filtersLogicalOperator,\n  });\n\n  // We evaluate all filters except the time filter using _buildFeatureFilter function.\n  // For the time filter, we return the value of the feature and we will change the getFilterRange result\n  // every time this filter changes\n  return (feature: Feature | FeatureData) => {\n    result[0] = featureFilter(feature);\n\n    if (timeColumn && timeFilter) {\n      const offsetBy = timeFilter.params?.offsetBy || 0;\n      const f = (feature.properties || feature) as Record<string, unknown>;\n      result[1] = (f[timeColumn] as number) - offsetBy;\n    }\n    return result;\n  };\n}\n","import {Filter} from './types.js';\nimport {FilterType} from './constants.js';\n\nconst FILTER_TYPES = new Set(Object.values(FilterType));\nconst isFilterType = (type: string): type is FilterType =>\n  FILTER_TYPES.has(type as FilterType);\n\n/**\n * @privateRemarks Source: @carto/react-widgets\n * @internal\n */\nexport function getApplicableFilters(\n  owner?: string,\n  filters?: Record<string, Filter>\n): Record<string, Filter> {\n  if (!filters) return {};\n\n  const applicableFilters: Record<string, Filter> = {};\n\n  for (const column in filters) {\n    for (const type in filters[column]) {\n      if (!isFilterType(type)) continue;\n\n      const filter = filters[column][type];\n      const isApplicable = !owner || !filter?.owner || filter?.owner !== owner;\n      if (filter && isApplicable) {\n        applicableFilters[column] ||= {};\n        (applicableFilters[column][type] as typeof filter) = filter;\n      }\n    }\n  }\n\n  return applicableFilters;\n}\n\ntype Row<T> = Record<string, T> | Record<string, T>[] | T[] | T;\n\n/**\n * Due to each data warehouse having its own behavior with columns,\n * we need to normalize them and transform every key to lowercase.\n *\n * @privateRemarks Source: @carto/react-widgets\n * @internal\n */\nexport function normalizeObjectKeys<T, R extends Row<T>>(el: R): R {\n  if (Array.isArray(el)) {\n    return el.map((value) => normalizeObjectKeys(value)) as R;\n  } else if (typeof el !== 'object') {\n    return el;\n  }\n\n  return Object.entries(el as Record<string, T>).reduce(\n    (acc, [key, value]) => {\n      acc[key.toLowerCase()] =\n        typeof value === 'object' && value ? normalizeObjectKeys(value) : value;\n      return acc;\n    },\n    {} as Record<string, T>\n  ) as R;\n}\n\n/** @privateRemarks Source: @carto/react-core */\nexport function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\n/**\n * @privateRemarks Source: @carto/react-core\n * @internal\n */\nexport class InvalidColumnError extends Error {\n  protected static readonly NAME = 'InvalidColumnError';\n\n  constructor(message: string) {\n    super(`${InvalidColumnError.NAME}: ${message}`);\n    this.name = InvalidColumnError.NAME;\n  }\n\n  static is(error: unknown) {\n    return (\n      error instanceof InvalidColumnError ||\n      (error as Error).message?.includes(InvalidColumnError.NAME)\n    );\n  }\n}\n\nexport function isEmptyObject(object: object): boolean {\n  for (const _ in object) {\n    return false;\n  }\n  return true;\n}\n\n/** @internal */\nexport const isObject: (x: unknown) => boolean = (x) =>\n  x !== null && typeof x === 'object';\n\n/** @internal */\nexport const isPureObject: (x: any) => boolean = (x) =>\n  isObject(x) && x.constructor === {}.constructor;\n","import {FilterType} from './constants.js';\nimport {Filter} from './types.js';\nimport {isEmptyObject} from './utils.js';\n\ntype FilterTypeOptions<T extends FilterType> = {\n  type: T;\n  column: string;\n} & Filter[T];\n\nexport type AddFilterOptions =\n  | FilterTypeOptions<FilterType.IN>\n  | FilterTypeOptions<FilterType.BETWEEN>\n  | FilterTypeOptions<FilterType.CLOSED_OPEN>\n  | FilterTypeOptions<FilterType.TIME>\n  | FilterTypeOptions<FilterType.STRING_SEARCH>;\n\n/**\n * Adds a {@link Filter} to the filter set. Any previous filters with the same\n * `column` and `type` will be replaced.\n */\nexport function addFilter(\n  filters: Record<string, Filter>,\n  {column, type, values, owner}: AddFilterOptions\n): Record<string, Filter> {\n  if (!filters[column]) {\n    filters[column] = {};\n  }\n\n  const filter = {values, owner} as FilterTypeOptions<typeof type>;\n  (filters[column][type] as FilterTypeOptions<typeof type>) = filter;\n\n  return filters;\n}\n\nexport type RemoveFilterOptions = {\n  column: string;\n  owner?: string;\n};\n\n/**\n * Removes one or more {@link Filter filters} from the filter set. If only\n * `column` is specified, then all filters on that column are removed. If both\n * `column` and `owner` are specified, then only filters for that column\n * associated with the owner are removed.\n */\nexport function removeFilter(\n  filters: Record<string, Filter>,\n  {column, owner}: RemoveFilterOptions\n): Record<string, Filter> {\n  const filter = filters[column];\n  if (!filter) {\n    return filters;\n  }\n\n  if (owner) {\n    for (const type of Object.values(FilterType)) {\n      if (owner === filter[type as FilterType]?.owner) {\n        delete filter[type as FilterType];\n      }\n    }\n  }\n\n  if (!owner || isEmptyObject(filter)) {\n    delete filters[column];\n  }\n\n  return filters;\n}\n\n/**\n * Clears all {@link Filter filters} from the filter set.\n */\nexport function clearFilters(\n  filters: Record<string, Filter>\n): Record<string, Filter> {\n  for (const column of Object.keys(filters)) {\n    delete filters[column];\n  }\n  return filters;\n}\n\nexport type HasFilterOptions = {\n  column: string;\n  owner?: string;\n};\n\nexport function hasFilter(\n  filters: Record<string, Filter>,\n  {column, owner}: HasFilterOptions\n): boolean {\n  const filter = filters[column];\n  if (!filter) {\n    return false;\n  }\n\n  if (!owner) {\n    return true;\n  }\n\n  for (const type of Object.values(FilterType)) {\n    if (owner === filter[type as FilterType]?.owner) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport type GetFilterOptions<T extends FilterType> = {\n  column: string;\n  type: T;\n  owner?: string;\n};\n\nexport function getFilter<T extends FilterType>(\n  filters: Record<string, Filter>,\n  {column, type, owner}: GetFilterOptions<T>\n): Filter[T] | null {\n  const filter = filters[column];\n  if (!filter) {\n    return null;\n  }\n\n  if (!owner || owner === filter[type]?.owner) {\n    return filter[type] || null;\n  }\n\n  return null;\n}\n","import bboxClip from '@turf/bbox-clip';\nimport bboxPolygon from '@turf/bbox-polygon';\nimport union from '@turf/union';\nimport {getType} from '@turf/invariant';\nimport {polygon, multiPolygon, feature, featureCollection} from '@turf/helpers';\nimport type {BBox, Geometry, MultiPolygon, Polygon, Position} from 'geojson';\nimport {SpatialFilter} from './types.js';\n\n/**\n * Returns a {@link SpatialFilter} for a given viewport, typically obtained\n * from deck.gl's `viewport.getBounds()` method ([west, south, east, north]).\n * If the viewport covers the entire world (to some margin of error in Web\n * Mercator space), `undefined` is returned instead.\n *\n * If the viewport extends beyond longitude range [-180, +180], the polygon\n * may be reformatted for compatibility with CARTO APIs.\n */\nexport function createViewportSpatialFilter(\n  viewport: BBox\n): SpatialFilter | undefined {\n  if (_isGlobalViewport(viewport)) {\n    return;\n  }\n  return createPolygonSpatialFilter(bboxPolygon(viewport).geometry);\n}\n\n/**\n * Returns a {@link SpatialFilter} for a given {@link Polygon} or\n * {@link MultiPolygon}. If the polygon(s) extend outside longitude\n * range [-180, +180], the result may be reformatted for compatibility\n * with CARTO APIs.\n */\nexport function createPolygonSpatialFilter(\n  spatialFilter: Polygon | MultiPolygon\n): SpatialFilter | undefined {\n  return (spatialFilter && _normalizeGeometry(spatialFilter)) || undefined;\n}\n\n/**\n * Check if a viewport is large enough to represent a global coverage.\n * In this case the spatial filter parameter for widget calculation is removed.\n *\n * @privateRemarks Source: @carto/react-core\n */\nfunction _isGlobalViewport(viewport: BBox) {\n  const [minx, miny, maxx, maxy] = viewport;\n  return maxx - minx > 179.5 * 2 && maxy - miny > 85.05 * 2;\n}\n\n/**\n * Normalized a geometry, coming from a mask or a viewport. The parts\n * spanning outside longitude range [-180, +180] are clipped and \"folded\"\n * back to the valid range and unioned to the polygons inide that range.\n *\n * It results in a Polygon or MultiPolygon strictly inside the validity range.\n *\n * @privateRemarks Source: @carto/react-core\n */\nfunction _normalizeGeometry(\n  geometry: Polygon | MultiPolygon\n): Polygon | MultiPolygon | null {\n  const WORLD = [-180, -90, +180, +90] as BBox;\n  const worldClip = _clean(\n    bboxClip(geometry, WORLD).geometry as Polygon | MultiPolygon\n  );\n\n  const geometryTxWest = _tx(geometry, 360);\n  const geometryTxEast = _tx(geometry, -360);\n\n  let result: Polygon | MultiPolygon | null = worldClip;\n\n  if (result && geometryTxWest) {\n    const worldWestClip = _clean(\n      bboxClip(geometryTxWest, WORLD).geometry as Polygon | MultiPolygon\n    );\n    if (worldWestClip) {\n      const collection = featureCollection([\n        feature(result),\n        feature(worldWestClip),\n      ]);\n      const merged = union(collection);\n      result = merged ? _clean(merged.geometry) : result;\n    }\n  }\n\n  if (result && geometryTxEast) {\n    const worldEastClip = _clean(\n      bboxClip(geometryTxEast, WORLD).geometry as Polygon | MultiPolygon\n    );\n    if (worldEastClip) {\n      const collection = featureCollection([\n        feature(result),\n        feature(worldEastClip),\n      ]);\n      const merged = union(collection);\n      result = merged ? _clean(merged.geometry) : result;\n    }\n  }\n\n  return result;\n}\n\n/** @privateRemarks Source: @carto/react-core */\nfunction _cleanPolygonCoords(cc: Position[][]) {\n  const coords = cc.filter((c) => c.length > 0);\n  return coords.length > 0 ? coords : null;\n}\n\n/** @privateRemarks Source: @carto/react-core */\nfunction _cleanMultiPolygonCoords(ccc: Position[][][]) {\n  const coords = ccc.map(_cleanPolygonCoords).filter((cc) => cc);\n  return coords.length > 0 ? coords : null;\n}\n\n/** @privateRemarks Source: @carto/react-core */\nfunction _clean(\n  geometry: Polygon | MultiPolygon | null\n): Polygon | MultiPolygon | null {\n  if (!geometry) {\n    return null;\n  }\n\n  if (_isPolygon(geometry)) {\n    const coords = _cleanPolygonCoords(geometry.coordinates);\n    return coords ? polygon(coords).geometry : null;\n  }\n\n  if (_isMultiPolygon(geometry)) {\n    const coords = _cleanMultiPolygonCoords(geometry.coordinates);\n    return coords ? multiPolygon(coords as Position[][][]).geometry : null;\n  }\n\n  return null;\n}\n\n/** @privateRemarks Source: @carto/react-core */\nfunction _txContourCoords(cc: Position[], distance: number) {\n  return cc.map((c) => [c[0] + distance, c[1]]);\n}\n\n/** @privateRemarks Source: @carto/react-core */\nfunction _txPolygonCoords(ccc: Position[][], distance: number) {\n  return ccc.map((cc) => _txContourCoords(cc, distance));\n}\n\n/** @privateRemarks Source: @carto/react-core */\nfunction _txMultiPolygonCoords(cccc: Position[][][], distance: number) {\n  return cccc.map((ccc) => _txPolygonCoords(ccc, distance));\n}\n\n/** @privateRemarks Source: @carto/react-core */\nfunction _tx(geometry: Polygon | MultiPolygon, distance: number) {\n  if (geometry && getType(geometry) === 'Polygon') {\n    const coords = _txPolygonCoords(\n      (geometry as Polygon).coordinates,\n      distance\n    );\n    return polygon(coords).geometry;\n  } else if (geometry && getType(geometry) === 'MultiPolygon') {\n    const coords = _txMultiPolygonCoords(\n      (geometry as MultiPolygon).coordinates,\n      distance\n    );\n    return multiPolygon(coords).geometry;\n  } else {\n    return null;\n  }\n}\n\nfunction _isPolygon(geometry: Geometry): geometry is Polygon {\n  return getType(geometry) === 'Polygon';\n}\n\nfunction _isMultiPolygon(geometry: Geometry): geometry is MultiPolygon {\n  return getType(geometry) === 'MultiPolygon';\n}\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {MapType} from '../types.js';\n\nexport type V3Endpoint = 'maps' | 'stats' | 'sql';\n\nfunction joinPath(...args: string[]): string {\n  return args\n    .map((part) => (part.endsWith('/') ? part.slice(0, -1) : part))\n    .join('/');\n}\n\nfunction buildV3Path(\n  apiBaseUrl: string,\n  version: 'v3',\n  endpoint: V3Endpoint,\n  ...rest: string[]\n): string {\n  return joinPath(apiBaseUrl, version, endpoint, ...rest);\n}\n\n/** @internal Required by fetchMap(). */\nexport function buildPublicMapUrl({\n  apiBaseUrl,\n  cartoMapId,\n}: {\n  apiBaseUrl: string;\n  cartoMapId: string;\n}): string {\n  return buildV3Path(apiBaseUrl, 'v3', 'maps', 'public', cartoMapId);\n}\n\n/** @internal Required by fetchMap(). */\nexport function buildStatsUrl({\n  attribute,\n  apiBaseUrl,\n  connectionName,\n  source,\n  type,\n}: {\n  attribute: string;\n  apiBaseUrl: string;\n  connectionName: string;\n  source: string;\n  type: MapType;\n}): string {\n  if (type === 'query') {\n    return buildV3Path(apiBaseUrl, 'v3', 'stats', connectionName, attribute);\n  }\n\n  // type === 'table'\n  return buildV3Path(\n    apiBaseUrl,\n    'v3',\n    'stats',\n    connectionName,\n    source,\n    attribute\n  );\n}\n\nexport function buildSourceUrl({\n  apiBaseUrl,\n  connectionName,\n  endpoint,\n}: {\n  apiBaseUrl: string;\n  connectionName: string;\n  endpoint: MapType;\n}): string {\n  return buildV3Path(apiBaseUrl, 'v3', 'maps', connectionName, endpoint);\n}\n\nexport function buildQueryUrl({\n  apiBaseUrl,\n  connectionName,\n}: {\n  apiBaseUrl: string;\n  connectionName: string;\n}): string {\n  return buildV3Path(apiBaseUrl, 'v3', 'sql', connectionName, 'query');\n}\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {MapType} from '../types.js';\n\nexport type APIRequestType =\n  | 'Map data'\n  | 'Map instantiation'\n  | 'Public map'\n  | 'Tile stats'\n  | 'SQL'\n  | 'Basemap style';\n\nexport type APIErrorContext = {\n  requestType: APIRequestType;\n  mapId?: string;\n  connection?: string;\n  source?: string;\n  type?: MapType;\n};\n\n/**\n *\n * Custom error for reported errors in CARTO Maps API.\n * Provides useful debugging information in console and context for applications.\n *\n */\nexport class CartoAPIError extends Error {\n  /** Source error from server */\n  error: Error;\n\n  /** Context (API call & parameters) in which error occured */\n  errorContext: APIErrorContext;\n\n  /** Response from server */\n  response?: Response;\n\n  /** JSON Response from server */\n  responseJson?: any;\n\n  constructor(\n    error: Error,\n    errorContext: APIErrorContext,\n    response?: Response,\n    responseJson?: any\n  ) {\n    let responseString = 'Failed to connect';\n    if (response) {\n      responseString = 'Server returned: ';\n      if (response.status === 400) {\n        responseString += 'Bad request';\n      } else if (response.status === 401 || response.status === 403) {\n        responseString += 'Unauthorized access';\n      } else if (response.status === 404) {\n        responseString += 'Not found';\n      } else {\n        responseString += 'Error';\n      }\n\n      responseString += ` (${response.status}):`;\n    }\n    responseString += ` ${error.message || error}`;\n\n    let message = `${errorContext.requestType} API request failed`;\n    message += `\\n${responseString}`;\n    for (const key of Object.keys(errorContext)) {\n      if (key === 'requestType') continue;\n      message += `\\n${formatErrorKey(key)}: ${(errorContext as any)[key]}`;\n    }\n    message += '\\n';\n\n    super(message);\n\n    this.name = 'CartoAPIError';\n    this.response = response;\n    this.responseJson = responseJson;\n    this.error = error;\n    this.errorContext = errorContext;\n  }\n}\n\n/**\n * Converts camelCase to Camel Case\n */\nfunction formatErrorKey(key: string) {\n  return key.replace(/([A-Z])/g, ' $1').replace(/^./, (s) => s.toUpperCase());\n}\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {isPureObject} from '../utils.js';\nimport {CartoAPIError, APIErrorContext} from './carto-api-error.js';\nimport {V3_MINOR_VERSION} from '../constants-internal.js';\nimport {DEFAULT_MAX_LENGTH_URL} from '../constants-internal.js';\nimport {getClient} from '../client.js';\nimport {LocalCacheOptions} from '../sources/types.js';\n\nconst DEFAULT_HEADERS = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json',\n};\n\nconst DEFAULT_REQUEST_CACHE = new Map<string, Promise<unknown>>();\n\nexport async function requestWithParameters<T = any>({\n  baseUrl,\n  parameters = {},\n  headers: customHeaders = {},\n  errorContext,\n  maxLengthURL = DEFAULT_MAX_LENGTH_URL,\n  localCache,\n}: {\n  baseUrl: string;\n  parameters?: Record<string, unknown>;\n  headers?: Record<string, string>;\n  errorContext: APIErrorContext;\n  maxLengthURL?: number;\n  localCache?: LocalCacheOptions;\n}): Promise<T> {\n  // Parameters added to all requests issued with `requestWithParameters()`.\n  // These parameters override parameters already in the base URL, but not\n  // user-provided parameters.\n  parameters = {\n    v: V3_MINOR_VERSION,\n    client: getClient(),\n    ...(typeof deck !== 'undefined' &&\n      deck.VERSION && {deckglVersion: deck.VERSION}),\n    ...parameters,\n  };\n\n  baseUrl = excludeURLParameters(baseUrl, Object.keys(parameters));\n  const key = createCacheKey(baseUrl, parameters, customHeaders);\n\n  const {\n    cache: REQUEST_CACHE,\n    canReadCache,\n    canStoreInCache,\n  } = getCacheSettings(localCache);\n\n  if (canReadCache && REQUEST_CACHE.has(key)) {\n    return REQUEST_CACHE.get(key) as Promise<T>;\n  }\n\n  const url = createURLWithParameters(baseUrl, parameters);\n  const headers = {...DEFAULT_HEADERS, ...customHeaders};\n\n  /* global fetch */\n  const fetchPromise =\n    url.length > maxLengthURL\n      ? fetch(baseUrl, {\n          method: 'POST',\n          body: JSON.stringify(parameters),\n          headers,\n        })\n      : fetch(url, {headers});\n\n  let response: Response | undefined;\n  let responseJson: unknown;\n  const jsonPromise: Promise<T> = fetchPromise\n    .then((_response: Response) => {\n      response = _response;\n      return response.json();\n    })\n    .then((json: any) => {\n      responseJson = json;\n      if (!response || !response.ok) {\n        throw new Error(json.error);\n      }\n      return json;\n    })\n    .catch((error: Error) => {\n      if (canStoreInCache) {\n        REQUEST_CACHE.delete(key);\n      }\n      throw new CartoAPIError(error, errorContext, response, responseJson);\n    });\n\n  if (canStoreInCache) {\n    REQUEST_CACHE.set(key, jsonPromise);\n  }\n  return jsonPromise;\n}\n\nfunction getCacheSettings(localCache: LocalCacheOptions | undefined) {\n  const canReadCache = localCache?.cacheControl?.includes('no-cache')\n    ? false\n    : true;\n  const canStoreInCache = localCache?.cacheControl?.includes('no-store')\n    ? false\n    : true;\n  const cache = localCache?.cache || DEFAULT_REQUEST_CACHE;\n\n  return {\n    cache,\n    canReadCache,\n    canStoreInCache,\n  };\n}\n\nfunction createCacheKey(\n  baseUrl: string,\n  parameters: Record<string, unknown>,\n  headers: Record<string, string>\n): string {\n  const parameterEntries = Object.entries(parameters).sort(([a], [b]) =>\n    a > b ? 1 : -1\n  );\n  const headerEntries = Object.entries(headers).sort(([a], [b]) =>\n    a > b ? 1 : -1\n  );\n  return JSON.stringify({\n    baseUrl,\n    parameters: parameterEntries,\n    headers: headerEntries,\n  });\n}\n\n/**\n * Appends query string parameters to a URL. Existing URL parameters are kept,\n * unless there is a conflict, in which case the new parameters override\n * those already in the URL.\n */\nfunction createURLWithParameters(\n  baseUrlString: string,\n  parameters: Record<string, unknown>\n): string {\n  const baseUrl = new URL(baseUrlString);\n  for (const [key, value] of Object.entries(parameters)) {\n    if (isPureObject(value) || Array.isArray(value)) {\n      baseUrl.searchParams.set(key, JSON.stringify(value));\n    } else {\n      baseUrl.searchParams.set(\n        key,\n        (value as string | boolean | number).toString()\n      );\n    }\n  }\n  return baseUrl.toString();\n}\n\n/**\n * Deletes query string parameters from a URL.\n */\nfunction excludeURLParameters(baseUrlString: string, parameters: string[]) {\n  const baseUrl = new URL(baseUrlString);\n  for (const param of parameters) {\n    if (baseUrl.searchParams.has(param)) {\n      baseUrl.searchParams.delete(param);\n    }\n  }\n  return baseUrl.toString();\n}\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {DEFAULT_API_BASE_URL} from '../constants.js';\nimport {DEFAULT_MAX_LENGTH_URL} from '../constants-internal.js';\nimport {buildSourceUrl} from '../api/endpoints.js';\nimport {requestWithParameters} from '../api/request-with-parameters.js';\nimport type {\n  GeojsonResult,\n  JsonResult,\n  SourceOptionalOptions,\n  SourceRequiredOptions,\n  TilejsonMapInstantiation,\n  TilejsonResult,\n} from './types.js';\nimport {MapType} from '../types.js';\nimport {APIErrorContext} from '../api/index.js';\nimport {getClient} from '../client.js';\n\nexport const SOURCE_DEFAULTS: Omit<SourceOptionalOptions, 'clientId'> = {\n  apiBaseUrl: DEFAULT_API_BASE_URL,\n  format: 'tilejson',\n  headers: {},\n  maxLengthURL: DEFAULT_MAX_LENGTH_URL,\n};\n\nexport async function baseSource<UrlParameters extends Record<string, unknown>>(\n  endpoint: MapType,\n  options: Partial<SourceOptionalOptions> & SourceRequiredOptions,\n  urlParameters: UrlParameters\n): Promise<TilejsonResult | GeojsonResult | JsonResult> {\n  const {accessToken, connectionName, cache, ...optionalOptions} = options;\n  const mergedOptions = {\n    ...SOURCE_DEFAULTS,\n    clientId: getClient(),\n    accessToken,\n    connectionName,\n    endpoint,\n  };\n  for (const key in optionalOptions) {\n    if (optionalOptions[key as keyof typeof optionalOptions]) {\n      (mergedOptions as any)[key] =\n        optionalOptions[key as keyof typeof optionalOptions];\n    }\n  }\n  const baseUrl = buildSourceUrl(mergedOptions);\n  const {clientId, maxLengthURL, format, localCache} = mergedOptions;\n  const headers = {\n    Authorization: `Bearer ${options.accessToken}`,\n    ...options.headers,\n  };\n  const parameters = {client: clientId, ...urlParameters};\n\n  const errorContext: APIErrorContext = {\n    requestType: 'Map instantiation',\n    connection: options.connectionName,\n    type: endpoint,\n    source: JSON.stringify(parameters, undefined, 2),\n  };\n  const mapInstantiation =\n    await requestWithParameters<TilejsonMapInstantiation>({\n      baseUrl,\n      parameters,\n      headers,\n      errorContext,\n      maxLengthURL,\n      localCache,\n    });\n\n  const dataUrl = mapInstantiation[format].url[0];\n  if (cache) {\n    cache.value = parseInt(\n      new URL(dataUrl).searchParams.get('cache') || '',\n      10\n    );\n  }\n  errorContext.requestType = 'Map data';\n\n  if (format === 'tilejson') {\n    const json = await requestWithParameters<TilejsonResult>({\n      baseUrl: dataUrl,\n      parameters: {client: clientId},\n      headers,\n      errorContext,\n      maxLengthURL,\n      localCache,\n    });\n    if (accessToken) {\n      json.accessToken = accessToken;\n    }\n    return json;\n  }\n\n  return await requestWithParameters<GeojsonResult | JsonResult>({\n    baseUrl: dataUrl,\n    parameters: {client: clientId},\n    headers,\n    errorContext,\n    maxLengthURL,\n    localCache,\n  });\n}\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {QueryParameters} from '../types.js';\nimport {baseSource} from './base-source.js';\nimport type {FilterOptions, SourceOptions, TilejsonResult} from './types.js';\n\nexport type BoundaryQuerySourceOptions = SourceOptions &\n  FilterOptions & {\n    columns?: string[];\n    tilesetTableName: string;\n    propertiesSqlQuery: string;\n    queryParameters?: QueryParameters;\n  };\ntype UrlParameters = {\n  columns?: string;\n  filters?: Record<string, unknown>;\n  tilesetTableName: string;\n  propertiesSqlQuery: string;\n  queryParameters?: Record<string, unknown> | unknown[];\n};\n\nexport type BoundaryQuerySourceResponse = TilejsonResult;\n\nexport const boundaryQuerySource = async function (\n  options: BoundaryQuerySourceOptions\n): Promise<BoundaryQuerySourceResponse> {\n  const {\n    columns,\n    filters,\n    tilesetTableName,\n    propertiesSqlQuery,\n    queryParameters,\n  } = options;\n  const urlParameters: UrlParameters = {\n    tilesetTableName,\n    propertiesSqlQuery,\n  };\n\n  if (columns) {\n    urlParameters.columns = columns.join(',');\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n  if (queryParameters) {\n    urlParameters.queryParameters = queryParameters;\n  }\n\n  return baseSource<UrlParameters>(\n    'boundary',\n    options,\n    urlParameters\n  ) as Promise<BoundaryQuerySourceResponse>;\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {baseSource} from './base-source.js';\nimport type {FilterOptions, SourceOptions, TilejsonResult} from './types.js';\n\nexport type BoundaryTableSourceOptions = SourceOptions &\n  FilterOptions & {\n    tilesetTableName: string;\n    columns?: string[];\n    propertiesTableName: string;\n  };\ntype UrlParameters = {\n  filters?: Record<string, unknown>;\n  tilesetTableName: string;\n  columns?: string;\n  propertiesTableName: string;\n};\n\nexport type BoundaryTableSourceResponse = TilejsonResult;\n\nexport const boundaryTableSource = async function (\n  options: BoundaryTableSourceOptions\n): Promise<BoundaryTableSourceResponse> {\n  const {filters, tilesetTableName, columns, propertiesTableName} = options;\n  const urlParameters: UrlParameters = {\n    tilesetTableName,\n    propertiesTableName,\n  };\n\n  if (columns) {\n    urlParameters.columns = columns.join(',');\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n\n  return baseSource<UrlParameters>(\n    'boundary',\n    options,\n    urlParameters\n  ) as Promise<BoundaryTableSourceResponse>;\n};\n","import {\n  CategoryRequestOptions,\n  CategoryResponse,\n  FeaturesRequestOptions,\n  FeaturesResponse,\n  FormulaRequestOptions,\n  FormulaResponse,\n  HistogramRequestOptions,\n  HistogramResponse,\n  RangeRequestOptions,\n  RangeResponse,\n  ScatterRequestOptions,\n  ScatterResponse,\n  TableRequestOptions,\n  TableResponse,\n  TimeSeriesRequestOptions,\n  TimeSeriesResponse,\n} from './types.js';\nimport {FilterLogicalOperator, Filter, Filters} from '../types.js';\nimport {getApplicableFilters} from '../utils.js';\nimport {getClient} from '../client.js';\nimport {ModelSource} from '../models/model.js';\nimport {SourceOptions} from '../sources/index.js';\nimport {ApiVersion, DEFAULT_API_BASE_URL} from '../constants.js';\nimport {AggregationOptions} from '../sources/types.js';\n\nexport interface WidgetSourceProps extends Omit<SourceOptions, 'filters'> {\n  apiVersion?: ApiVersion;\n  filters?: Record<string, Filter>;\n  filtersLogicalOperator?: FilterLogicalOperator;\n}\n\n/**\n * Source for Widget API requests on a data source defined by a SQL query.\n *\n * Abstract class. Use {@link WidgetQuerySource} or {@link WidgetTableSource}.\n */\nexport abstract class WidgetSource<Props extends WidgetSourceProps> {\n  readonly props: Props;\n\n  static defaultProps: Partial<WidgetSourceProps> = {\n    apiVersion: ApiVersion.V3,\n    apiBaseUrl: DEFAULT_API_BASE_URL,\n    clientId: getClient(),\n    filters: {},\n    filtersLogicalOperator: 'and',\n  };\n\n  constructor(props: Props) {\n    this.props = {\n      ...WidgetSource.defaultProps,\n      clientId: getClient(), // Refresh clientId, default may have changed.\n      ...props,\n    };\n  }\n\n  /**\n   * Subclasses of {@link WidgetRemoteSource} must implement this method, calling\n   * {@link WidgetRemoteSource.prototype._getModelSource} for common source\n   * properties, and adding additional required properties including 'type' and\n   * 'data'.\n   */\n  protected abstract getModelSource(\n    filters: Filters | undefined,\n    filterOwner?: string\n  ): ModelSource;\n\n  protected _getModelSource(\n    filters: Filters | undefined,\n    filterOwner?: string\n  ): Omit<ModelSource, 'type' | 'data'> {\n    const props = this.props;\n    return {\n      apiVersion: props.apiVersion as ApiVersion,\n      apiBaseUrl: props.apiBaseUrl as string,\n      clientId: props.clientId as string,\n      accessToken: props.accessToken,\n      connectionName: props.connectionName,\n      filters: getApplicableFilters(filterOwner, filters || props.filters),\n      filtersLogicalOperator: props.filtersLogicalOperator,\n      spatialDataType: props.spatialDataType,\n      spatialDataColumn: props.spatialDataColumn,\n      dataResolution: (props as Partial<AggregationOptions>).dataResolution,\n    };\n  }\n\n  /**\n   * Returns a list of labeled datapoints for categorical data. Suitable for\n   * charts including grouped bar charts, pie charts, and tree charts.\n   */\n  abstract getCategories(\n    options: CategoryRequestOptions\n  ): Promise<CategoryResponse>;\n\n  /**\n   * Given a list of feature IDs (as found in `_carto_feature_id`) returns all\n   * matching features. In datasets containing features with duplicate geometries,\n   * feature IDs may be duplicated (IDs are a hash of geometry) and so more\n   * results may be returned than IDs in the request.\n   * @internal\n   * @experimental\n   */\n  abstract getFeatures(\n    options: FeaturesRequestOptions\n  ): Promise<FeaturesResponse>;\n\n  /**\n   * Returns a scalar numerical statistic over all matching data. Suitable\n   * for 'headline' or 'scorecard' figures such as counts and sums.\n   */\n  abstract getFormula(options: FormulaRequestOptions): Promise<FormulaResponse>;\n\n  /**\n   * Returns a list of labeled datapoints for 'bins' of data defined as ticks\n   * over a numerical range. Suitable for histogram charts.\n   */\n  abstract getHistogram(\n    options: HistogramRequestOptions\n  ): Promise<HistogramResponse>;\n\n  /**\n   * Returns a range (min and max) for a numerical column of matching rows.\n   * Suitable for displaying certain 'headline' or 'scorecard' statistics,\n   * or rendering a range slider UI for filtering.\n   */\n  abstract getRange(options: RangeRequestOptions): Promise<RangeResponse>;\n\n  /**\n   * Returns a list of bivariate datapoints defined as numerical 'x' and 'y'\n   * values. Suitable for rendering scatter plots.\n   */\n  abstract getScatter(options: ScatterRequestOptions): Promise<ScatterResponse>;\n\n  /**\n   * Returns a list of arbitrary data rows, with support for pagination and\n   * sorting. Suitable for displaying tables and lists.\n   */\n  abstract getTable(options: TableRequestOptions): Promise<TableResponse>;\n\n  /**\n   * Returns a series of labeled numerical values, grouped into equally-sized\n   * time intervals. Suitable for rendering time series charts.\n   */\n  abstract getTimeSeries(\n    options: TimeSeriesRequestOptions\n  ): Promise<TimeSeriesResponse>;\n}\n\n/**\n * @todo TODO(v0.5): Remove WidgetBaseSourceProps alias\n * @deprecated Use WidgetSourceProps.\n */\nexport type WidgetBaseSourceProps = WidgetSourceProps;\n\n/**\n * @todo TODO(v0.5): Remove WidgetBaseSource alias.\n * @deprecated Use WidgetSourceP.\n */\nexport const WidgetBaseSource = WidgetSource;\n","import {InvalidColumnError} from '../utils.js';\n\n/** @privateRemarks Source: @carto/react-api */\nexport interface ModelRequestOptions {\n  method: 'GET' | 'POST';\n  headers?: Record<string, string>;\n  signal?: AbortSignal;\n  otherOptions?: Record<string, unknown>;\n  body?: string;\n}\n\ninterface ModelErrorResponse {\n  error?: string | string[];\n  hint?: string;\n  column_name?: string;\n}\n\n/**\n * Return more descriptive error from API\n * @privateRemarks Source: @carto/react-api\n */\nexport function dealWithApiError({\n  response,\n  data,\n}: {\n  response: Response;\n  data: ModelErrorResponse;\n}) {\n  if (data.error === 'Column not found') {\n    throw new InvalidColumnError(`${data.error} ${data.column_name}`);\n  }\n\n  if (\n    typeof data.error === 'string' &&\n    data.error?.includes('Missing columns')\n  ) {\n    throw new InvalidColumnError(data.error);\n  }\n\n  switch (response.status) {\n    case 401:\n      throw new Error('Unauthorized access. Invalid credentials');\n    case 403:\n      throw new Error('Forbidden access to the requested data');\n    default:\n      throw new Error(\n        data && data.error && typeof data.error === 'string'\n          ? data.error\n          : JSON.stringify(data?.hint || data.error?.[0])\n      );\n  }\n}\n\n/** @privateRemarks Source: @carto/react-api */\nexport async function makeCall({\n  url,\n  accessToken,\n  opts,\n}: {\n  url: string;\n  accessToken: string;\n  opts: ModelRequestOptions;\n}) {\n  let response;\n  let data;\n  const isPost = opts?.method === 'POST';\n  try {\n    response = await fetch(url.toString(), {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        ...(isPost && {'Content-Type': 'application/json'}),\n        ...opts.headers,\n      },\n      ...(isPost && {\n        method: opts?.method,\n        body: opts?.body,\n      }),\n      signal: opts?.signal,\n      ...opts?.otherOptions,\n    });\n    data = await response.json();\n  } catch (error) {\n    if ((error as Error).name === 'AbortError') throw error;\n\n    throw new Error(`Failed request: ${error as Error}`);\n  }\n\n  if (!response.ok) {\n    dealWithApiError({response, data});\n  }\n\n  return data;\n}\n","import {DEFAULT_GEO_COLUMN} from '../constants-internal.js';\nimport {\n  Filter,\n  FilterLogicalOperator,\n  MapType,\n  QueryParameters,\n  SpatialFilter,\n} from '../types.js';\nimport {assert, isPureObject} from '../utils.js';\nimport {ModelRequestOptions, makeCall} from './common.js';\nimport {ApiVersion} from '../constants.js';\nimport {SpatialDataType, SpatialFilterPolyfillMode} from '../sources/types.js';\n\n/** @privateRemarks Source: @carto/react-api */\nconst AVAILABLE_MODELS = [\n  'category',\n  'histogram',\n  'formula',\n  'pick',\n  'timeseries',\n  'range',\n  'scatterplot',\n  'table',\n] as const;\n\nexport type Model = (typeof AVAILABLE_MODELS)[number];\n\nexport interface ModelSource {\n  type: MapType;\n  apiVersion: ApiVersion;\n  apiBaseUrl: string;\n  accessToken: string;\n  clientId: string;\n  connectionName: string;\n  data: string;\n  filters?: Record<string, Filter>;\n  filtersLogicalOperator?: FilterLogicalOperator;\n  spatialFilter?: SpatialFilter;\n  queryParameters?: QueryParameters;\n  spatialDataColumn?: string;\n  spatialDataType?: SpatialDataType;\n  spatialFiltersMode?: SpatialFilterPolyfillMode;\n  /** original resolution of the spatial index data as stored in the DW */\n  dataResolution?: number;\n}\n\nconst {V3} = ApiVersion;\nconst REQUEST_GET_MAX_URL_LENGTH = 2048;\n\n/**\n * Execute a SQL model request.\n * @privateRemarks Source: @carto/react-api\n */\nexport function executeModel(props: {\n  model: Model;\n  source: ModelSource;\n  params: Record<string, unknown>;\n  opts?: Partial<ModelRequestOptions>;\n}) {\n  assert(props.source, 'executeModel: missing source');\n  assert(props.model, 'executeModel: missing model');\n  assert(props.params, 'executeModel: missing params');\n\n  assert(\n    AVAILABLE_MODELS.includes(props.model),\n    `executeModel: model provided isn't valid. Available models: ${AVAILABLE_MODELS.join(\n      ', '\n    )}`\n  );\n\n  const {model, source, params, opts} = props;\n  const {type, apiVersion, apiBaseUrl, accessToken, connectionName, clientId} =\n    source;\n\n  assert(apiBaseUrl, 'executeModel: missing apiBaseUrl');\n  assert(accessToken, 'executeModel: missing accessToken');\n  assert(apiVersion === V3, 'executeModel: SQL Model API requires CARTO 3+');\n  assert(type !== 'tileset', 'executeModel: Tilesets not supported');\n\n  let url = `${apiBaseUrl}/v3/sql/${connectionName}/model/${model}`;\n\n  const {\n    data,\n    filters,\n    filtersLogicalOperator = 'and',\n    spatialDataType = 'geo',\n    spatialFiltersMode = 'intersects',\n  } = source;\n\n  const queryParams: Record<string, unknown> = {\n    type,\n    client: clientId,\n    source: data,\n    params,\n    queryParameters: source.queryParameters || '',\n    filters,\n    filtersLogicalOperator,\n  };\n\n  const spatialDataColumn = source.spatialDataColumn || DEFAULT_GEO_COLUMN;\n\n  // Picking Model API requires 'spatialDataColumn'.\n  if (model === 'pick') {\n    queryParams.spatialDataColumn = spatialDataColumn;\n  }\n\n  // API supports multiple filters, we apply it only to spatialDataColumn\n  const spatialFilters = source.spatialFilter\n    ? {[spatialDataColumn]: source.spatialFilter}\n    : undefined;\n\n  if (spatialFilters) {\n    queryParams.spatialFilters = spatialFilters;\n    queryParams.spatialDataColumn = spatialDataColumn;\n    queryParams.spatialDataType = spatialDataType;\n  }\n\n  if (spatialDataType !== 'geo') {\n    queryParams.spatialFiltersMode = spatialFiltersMode;\n  }\n\n  const urlWithSearchParams =\n    url + '?' + objectToURLSearchParams(queryParams).toString();\n  const isGet = urlWithSearchParams.length <= REQUEST_GET_MAX_URL_LENGTH;\n  if (isGet) {\n    url = urlWithSearchParams;\n  }\n  return makeCall({\n    url,\n    accessToken: source.accessToken,\n    opts: {\n      ...opts,\n      method: isGet ? 'GET' : 'POST',\n      ...(!isGet && {body: JSON.stringify(queryParams)}),\n    },\n  });\n}\n\nfunction objectToURLSearchParams(object: Record<string, unknown>) {\n  const params = new URLSearchParams();\n  for (const key in object) {\n    if (isPureObject(object[key])) {\n      params.append(key, JSON.stringify(object[key]));\n    } else if (Array.isArray(object[key])) {\n      params.append(key, JSON.stringify(object[key]));\n    } else if (object[key] === null) {\n      params.append(key, 'null');\n    } else if (object[key] !== undefined) {\n      params.append(key, String(object[key] as unknown));\n    }\n  }\n  return params;\n}\n","import {executeModel} from '../models/index.js';\nimport {\n  CategoryRequestOptions,\n  CategoryResponse,\n  FeaturesRequestOptions,\n  FeaturesResponse,\n  FormulaRequestOptions,\n  FormulaResponse,\n  HistogramRequestOptions,\n  HistogramResponse,\n  RangeRequestOptions,\n  RangeResponse,\n  ScatterRequestOptions,\n  ScatterResponse,\n  TableRequestOptions,\n  TableResponse,\n  TimeSeriesRequestOptions,\n  TimeSeriesResponse,\n} from './types.js';\nimport {normalizeObjectKeys} from '../utils.js';\nimport {DEFAULT_TILE_RESOLUTION} from '../constants-internal.js';\nimport {WidgetSource, WidgetSourceProps} from './widget-source.js';\n\nexport type WidgetRemoteSourceProps = WidgetSourceProps;\n\n/**\n * Source for Widget API requests.\n *\n * Abstract class. Use {@link WidgetQuerySource} or {@link WidgetTableSource}.\n */\nexport abstract class WidgetRemoteSource<\n  Props extends WidgetRemoteSourceProps,\n> extends WidgetSource<Props> {\n  async getCategories(\n    options: CategoryRequestOptions\n  ): Promise<CategoryResponse> {\n    const {\n      signal,\n      filters = this.props.filters,\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      ...params\n    } = options;\n    const {column, operation, operationColumn} = params;\n\n    type CategoriesModelResponse = {rows: {name: string; value: number}[]};\n\n    return executeModel({\n      model: 'category',\n      source: {\n        ...this.getModelSource(filters, filterOwner),\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {\n        column,\n        operation,\n        operationColumn: operationColumn || column,\n      },\n      opts: {signal, headers: this.props.headers},\n    }).then((res: CategoriesModelResponse) => normalizeObjectKeys(res.rows));\n  }\n\n  async getFeatures(\n    options: FeaturesRequestOptions\n  ): Promise<FeaturesResponse> {\n    const {\n      abortController,\n      signal = abortController?.signal,\n      filters = this.props.filters,\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      ...params\n    } = options;\n    const {columns, dataType, featureIds, z, limit, tileResolution} = params;\n\n    type FeaturesModelResponse = {rows: Record<string, unknown>[]};\n\n    return executeModel({\n      model: 'pick',\n      source: {\n        ...this.getModelSource(filters, filterOwner),\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {\n        columns,\n        dataType,\n        featureIds,\n        z,\n        limit: limit || 1000,\n        tileResolution: tileResolution || DEFAULT_TILE_RESOLUTION,\n      },\n      opts: {signal, headers: this.props.headers},\n      // Avoid `normalizeObjectKeys()`, which changes column names.\n    }).then(({rows}: FeaturesModelResponse) => ({rows}));\n  }\n\n  async getFormula(options: FormulaRequestOptions): Promise<FormulaResponse> {\n    const {\n      abortController,\n      signal = abortController?.signal,\n      filters = this.props.filters,\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      operationExp,\n      ...params\n    } = options;\n    const {column, operation} = params;\n\n    type FormulaModelResponse = {rows: {value: number}[]};\n\n    return executeModel({\n      model: 'formula',\n      source: {\n        ...this.getModelSource(filters, filterOwner),\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {\n        column: column ?? '*',\n        operation: operation ?? 'count',\n        operationExp,\n      },\n      opts: {signal, headers: this.props.headers},\n    }).then((res: FormulaModelResponse) => normalizeObjectKeys(res.rows[0]));\n  }\n\n  async getHistogram(\n    options: HistogramRequestOptions\n  ): Promise<HistogramResponse> {\n    const {\n      abortController,\n      signal = abortController?.signal,\n      filters = this.props.filters,\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      ...params\n    } = options;\n    const {column, operation, ticks} = params;\n\n    type HistogramModelResponse = {rows: {tick: number; value: number}[]};\n\n    const data = await executeModel({\n      model: 'histogram',\n      source: {\n        ...this.getModelSource(filters, filterOwner),\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {column, operation, ticks},\n      opts: {signal, headers: this.props.headers},\n    }).then((res: HistogramModelResponse) => normalizeObjectKeys(res.rows));\n\n    if (data.length) {\n      // Given N ticks the API returns up to N+1 bins, omitting any empty bins. Bins\n      // include 1 bin below the lowest tick, N-1 between ticks, and 1 bin above the highest tick.\n      const result = Array(ticks.length + 1).fill(0);\n      data.forEach(\n        ({tick, value}: {tick: number; value: number}) => (result[tick] = value)\n      );\n      return result;\n    }\n\n    return [];\n  }\n\n  async getRange(options: RangeRequestOptions): Promise<RangeResponse> {\n    const {\n      abortController,\n      signal = abortController?.signal,\n      filters = this.props.filters,\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      ...params\n    } = options;\n    const {column} = params;\n\n    type RangeModelResponse = {rows: {min: number; max: number}[]};\n\n    return executeModel({\n      model: 'range',\n      source: {\n        ...this.getModelSource(filters, filterOwner),\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {column},\n      opts: {signal, headers: this.props.headers},\n    }).then((res: RangeModelResponse) => normalizeObjectKeys(res.rows[0]));\n  }\n\n  async getScatter(options: ScatterRequestOptions): Promise<ScatterResponse> {\n    const {\n      abortController,\n      signal = abortController?.signal,\n      filters = this.props.filters,\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      ...params\n    } = options;\n    const {xAxisColumn, xAxisJoinOperation, yAxisColumn, yAxisJoinOperation} =\n      params;\n\n    // Make sure this is sync with the same constant in cloud-native/maps-api\n    const HARD_LIMIT = 500;\n\n    type ScatterModelResponse = {rows: {x: number; y: number}[]};\n\n    return executeModel({\n      model: 'scatterplot',\n      source: {\n        ...this.getModelSource(filters, filterOwner),\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {\n        xAxisColumn,\n        xAxisJoinOperation,\n        yAxisColumn,\n        yAxisJoinOperation,\n        limit: HARD_LIMIT,\n      },\n      opts: {signal, headers: this.props.headers},\n    })\n      .then((res: ScatterModelResponse) => normalizeObjectKeys(res.rows))\n      .then((res) => res.map(({x, y}: {x: number; y: number}) => [x, y]));\n  }\n\n  async getTable(options: TableRequestOptions): Promise<TableResponse> {\n    const {\n      abortController,\n      signal = abortController?.signal,\n      filters = this.props.filters,\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      ...params\n    } = options;\n    const {columns, sortBy, sortDirection, offset = 0, limit = 10} = params;\n\n    type TableModelResponse = {\n      rows: Record<string, number | string>[];\n      metadata: {total: number};\n    };\n\n    return executeModel({\n      model: 'table',\n      source: {\n        ...this.getModelSource(filters, filterOwner),\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {\n        column: columns,\n        sortBy,\n        sortDirection,\n        limit,\n        offset,\n      },\n      opts: {signal, headers: this.props.headers},\n    }).then((res: TableModelResponse) => ({\n      // Avoid `normalizeObjectKeys()`, which changes column names.\n      rows: res.rows ?? (res as any).ROWS,\n      totalCount: res.metadata?.total ?? (res as any).METADATA?.TOTAL,\n    }));\n  }\n\n  async getTimeSeries(\n    options: TimeSeriesRequestOptions\n  ): Promise<TimeSeriesResponse> {\n    const {\n      abortController,\n      signal = abortController?.signal,\n      filters = this.props.filters,\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      ...params\n    } = options;\n    const {\n      column,\n      operationColumn,\n      joinOperation,\n      operation,\n      stepSize,\n      stepMultiplier,\n      splitByCategory,\n      splitByCategoryLimit,\n      splitByCategoryValues,\n    } = params;\n\n    type TimeSeriesModelResponse = {\n      rows: {name: string; value: number}[];\n      metadata: {categories: string[]};\n    };\n\n    return executeModel({\n      model: 'timeseries',\n      source: {\n        ...this.getModelSource(filters, filterOwner),\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {\n        column,\n        stepSize,\n        stepMultiplier,\n        operationColumn: operationColumn || column,\n        joinOperation,\n        operation,\n        splitByCategory,\n        splitByCategoryLimit,\n        splitByCategoryValues,\n      },\n      opts: {signal, headers: this.props.headers},\n    }).then((res: TimeSeriesModelResponse) => ({\n      rows: normalizeObjectKeys(res.rows),\n      categories: res.metadata?.categories,\n    }));\n  }\n}\n","import {\n  H3QuerySourceOptions,\n  QuadbinQuerySourceOptions,\n  VectorQuerySourceOptions,\n} from '../sources/index.js';\nimport {\n  WidgetRemoteSource,\n  WidgetRemoteSourceProps,\n} from './widget-remote-source.js';\nimport {ModelSource} from '../models/model.js';\nimport {Filters} from '../types.js';\n\ntype LayerQuerySourceOptions =\n  | Omit<VectorQuerySourceOptions, 'filters'>\n  | Omit<H3QuerySourceOptions, 'filters'>\n  | Omit<QuadbinQuerySourceOptions, 'filters'>;\n\nexport type WidgetQuerySourceResult = {widgetSource: WidgetQuerySource};\n\n/**\n * Source for Widget API requests on a data source defined by a SQL query.\n *\n * Generally not intended to be constructed directly. Instead, call\n * {@link vectorQuerySource}, {@link h3QuerySource}, or {@link quadbinQuerySource},\n * which can be shared with map layers. Sources contain a `widgetSource` property,\n * for use by widget implementations.\n *\n * Example:\n *\n * ```javascript\n * import { vectorQuerySource } from '@carto/api-client';\n *\n * const data = vectorQuerySource({\n *   accessToken: '••••',\n *   connectionName: 'carto_dw',\n *   sqlQuery: 'SELECT * FROM carto-demo-data.demo_tables.retail_stores'\n * });\n *\n * const { widgetSource } = await data;\n * ```\n */\nexport class WidgetQuerySource extends WidgetRemoteSource<\n  LayerQuerySourceOptions & WidgetRemoteSourceProps\n> {\n  protected override getModelSource(\n    filters: Filters | undefined,\n    filterOwner?: string\n  ): ModelSource {\n    return {\n      ...super._getModelSource(filters, filterOwner),\n      type: 'query',\n      data: this.props.sqlQuery,\n      queryParameters: this.props.queryParameters,\n    };\n  }\n}\n","import {\n  H3TableSourceOptions,\n  QuadbinTableSourceOptions,\n  VectorTableSourceOptions,\n} from '../sources/index.js';\nimport {\n  WidgetRemoteSource,\n  WidgetRemoteSourceProps,\n} from './widget-remote-source.js';\nimport {ModelSource} from '../models/model.js';\nimport {Filters} from '../types.js';\n\ntype LayerTableSourceOptions =\n  | Omit<VectorTableSourceOptions, 'filters'>\n  | Omit<H3TableSourceOptions, 'filters'>\n  | Omit<QuadbinTableSourceOptions, 'filters'>;\n\nexport type WidgetTableSourceResult = {widgetSource: WidgetTableSource};\n\n/**\n * Source for Widget API requests on a data source defined as a table.\n *\n * Generally not intended to be constructed directly. Instead, call\n * {@link vectorTableSource}, {@link h3TableSource}, or {@link quadbinTableSource},\n * which can be shared with map layers. Sources contain a `widgetSource` property,\n * for use by widget implementations.\n *\n * Example:\n *\n * ```javascript\n * import { vectorTableSource } from '@carto/api-client';\n *\n * const data = vectorTableSource({\n *   accessToken: '••••',\n *   connectionName: 'carto_dw',\n *   tableName: 'carto-demo-data.demo_tables.retail_stores'\n * });\n *\n * const { widgetSource } = await data;\n * ```\n */\nexport class WidgetTableSource extends WidgetRemoteSource<\n  LayerTableSourceOptions & WidgetRemoteSourceProps\n> {\n  protected override getModelSource(\n    filters: Filters | undefined,\n    filterOwner?: string\n  ): ModelSource {\n    return {\n      ...super._getModelSource(filters, filterOwner),\n      type: 'table',\n      data: this.props.tableName,\n    };\n  }\n}\n","import {AggregationType} from '../types.js';\nimport {FeatureData} from '../types-internal.js';\n\n/** @privateRemarks Source: @carto/react-core */\nexport type AggregationFunction = (\n  values: unknown[] | FeatureData[],\n  keys?: string[] | string,\n  joinOperation?: AggregationType\n) => number;\n\n/** @privateRemarks Source: @carto/react-core */\nexport const aggregationFunctions: Record<\n  Exclude<AggregationType, 'custom'>,\n  AggregationFunction\n> = {\n  count: (values) => values.length,\n  min: (...args) => applyAggregationFunction(min, ...args),\n  max: (...args) => applyAggregationFunction(max, ...args),\n  sum: (...args) => applyAggregationFunction(sum, ...args),\n  avg: (...args) => applyAggregationFunction(avg, ...args),\n};\n\n/** @privateRemarks Source: @carto/react-core */\nexport function aggregate(\n  feature: FeatureData,\n  keys?: string[],\n  operation?: AggregationType\n): unknown {\n  if (!keys?.length) {\n    throw new Error('Cannot aggregate a feature without having keys');\n  } else if (keys.length === 1) {\n    const value = feature[keys[0]];\n    return isPotentiallyValidNumber(value) ? Number(value) : value;\n  }\n\n  const aggregationFn =\n    aggregationFunctions[operation as Exclude<AggregationType, 'custom'>];\n\n  if (!aggregationFn) {\n    throw new Error(`${operation} isn't a valid aggregation function`);\n  }\n\n  return aggregationFn(\n    keys.map((column) => {\n      const value = feature[column];\n      return isPotentiallyValidNumber(value) ? Number(value) : value;\n    })\n  );\n}\n\n/*\n * Forced casting to Number (just of non empty strings) allows to work-around\n * some specific situations, where a big numeric field is transformed into a string when generating the tileset(eg.PG)\n */\nfunction isPotentiallyValidNumber(value: unknown): boolean {\n  return typeof value === 'string' && value.trim().length > 0;\n}\n\nconst applyAggregationFunction = (\n  aggFn: AggregationFunction,\n  values: unknown[] | FeatureData[],\n  keys?: string[] | string,\n  operation?: AggregationType\n) => {\n  const normalizedKeys = normalizeKeys(keys);\n  const elements =\n    (normalizedKeys?.length || 0) <= 1\n      ? filterFalsyElements(values as unknown[], normalizedKeys || [])\n      : values;\n  return aggFn(elements, keys, operation);\n};\n\nfunction filterFalsyElements(\n  values: unknown[] | FeatureData[],\n  keys: string[]\n) {\n  const filterFn = (value: unknown) => value !== null && value !== undefined;\n\n  if (!keys?.length) {\n    return values.filter(filterFn);\n  }\n\n  return (values as FeatureData[]).filter((v) => filterFn(v[keys[0]]));\n}\n\n// Aggregation functions\nfunction avg(\n  values: unknown[] | FeatureData[],\n  keys?: string[] | string,\n  joinOperation?: AggregationType\n): number {\n  return sum(values, keys, joinOperation) / (values.length || 1);\n}\n\nfunction sum(\n  values: unknown[] | FeatureData[],\n  keys?: string[] | string,\n  joinOperation?: AggregationType\n): number {\n  const normalizedKeys = normalizeKeys(keys);\n\n  if (normalizedKeys) {\n    return (values as FeatureData[]).reduce(\n      (a, b) => a + (aggregate(b, normalizedKeys, joinOperation) as number),\n      0\n    );\n  }\n\n  return values.reduce((a: number, b: unknown) => a + (b as number), 0);\n}\n\nfunction min(\n  values: unknown[] | FeatureData[],\n  keys?: string[] | string,\n  joinOperation?: AggregationType\n): number {\n  const normalizedKeys = normalizeKeys(keys);\n  if (normalizedKeys) {\n    return (values as FeatureData[]).reduce(\n      (a, b) =>\n        Math.min(a, aggregate(b, normalizedKeys, joinOperation) as number),\n      Infinity\n    );\n  }\n  return Math.min(...(values as number[]));\n}\n\nfunction max(\n  values: unknown[] | FeatureData[],\n  keys?: string[] | string,\n  joinOperation?: AggregationType\n): number {\n  const normalizedKeys = normalizeKeys(keys);\n  if (normalizedKeys) {\n    return (values as FeatureData[]).reduce(\n      (a, b) =>\n        Math.max(a, aggregate(b, normalizedKeys, joinOperation) as number),\n      -Infinity\n    );\n  }\n  return Math.max(...(values as number[]));\n}\n\n// Aux\n\n// Keys can come as a string (one column) or a strings array (multiple column)\n// Use always an array to make the code easier\nfunction normalizeKeys(keys: unknown): string[] | undefined {\n  return Array.isArray(keys)\n    ? keys\n    : typeof keys === 'string'\n      ? [keys]\n      : undefined;\n}\n","/***\n   Copyright 2013 Teun Duynstee\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\nmodule.exports = (function() {\n\n    function identity(v){return v;}\n\n    function ignoreCase(v){return typeof(v)===\"string\" ? v.toLowerCase() : v;}\n\n    function makeCompareFunction(f, opt){\n        opt = typeof(opt)===\"object\" ? opt : {direction:opt};\n        \n        if(typeof(f)!=\"function\"){\n            var prop = f;\n            // make unary function\n            f = function(v1){return !!v1[prop] ? v1[prop] : \"\";}\n        }\n        if(f.length === 1) {\n            // f is a unary function mapping a single item to its sort score\n            var uf = f;\n            var preprocess = opt.ignoreCase?ignoreCase:identity;\n            var cmp = opt.cmp || function(v1,v2) {return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;}\n            f = function(v1,v2) {return cmp(preprocess(uf(v1)), preprocess(uf(v2)));}\n        }\n        const descTokens = {\"-1\":'', desc:''};\n        if(opt.direction in descTokens) return function(v1,v2){return -f(v1,v2)};\n        return f;\n    }\n\n    /* adds a secondary compare function to the target function (`this` context)\n       which is applied in case the first one returns 0 (equal)\n       returns a new compare function, which has a `thenBy` method as well */\n    function tb(func, opt) {\n        /* should get value false for the first call. This can be done by calling the \n        exported function, or the firstBy property on it (for es6 module compatibility)\n        */\n        var x = (typeof(this) == \"function\" && !this.firstBy) ? this : false;\n        var y = makeCompareFunction(func, opt);\n        var f = x ? function(a, b) {\n                        return x(a,b) || y(a,b);\n                    }\n                  : y;\n        f.thenBy = tb;\n        return f;\n    }\n    tb.firstBy = tb;\n    return tb;\n})();\n","import {firstBy} from 'thenby';\nimport {SortDirection} from '../types.js';\nimport {FeatureData} from '../types-internal.js';\n\n// TODO(cleanup): Could this be simplified?\ntype SortColumns = string | string[] | object[];\n\ninterface SortOptions {\n  sortBy?: SortColumns;\n  sortByDirection?: SortDirection;\n  sortByColumnType?: 'number' | 'string' | 'date';\n}\n\n/**\n * Apply sort structure to a collection of features\n * @param features\n * @param [sortOptions]\n * @param [sortOptions.sortBy] - One or more columns to sort by\n * @param [sortOptions.sortByDirection] - Direction by the columns will be sorted\n * @param [sortOptions.sortByColumnType] - Column type\n * @internal\n * @privateRemarks Source: @carto/react-core\n */\nexport function applySorting(\n  features: FeatureData[],\n  {\n    sortBy,\n    sortByDirection = 'asc',\n    sortByColumnType = 'string',\n  }: SortOptions = {}\n): FeatureData[] {\n  // If sortBy is undefined, pass all features\n  if (sortBy === undefined) {\n    return features;\n  }\n\n  // sortOptions exists, but are bad formatted\n  const isValidSortBy =\n    (Array.isArray(sortBy) && sortBy.length) || // sortBy can be an array of columns\n    typeof sortBy === 'string'; // or just one column\n\n  if (!isValidSortBy) {\n    throw new Error('Sorting options are bad formatted');\n  }\n  const sortFn = createSortFn({\n    sortBy,\n    sortByDirection,\n    sortByColumnType: sortByColumnType || 'string',\n  });\n  return features.sort(sortFn);\n}\n\n// Aux\nfunction createSortFn({\n  sortBy,\n  sortByDirection,\n  sortByColumnType,\n}: Required<SortOptions>) {\n  const [firstSortOption, ...othersSortOptions] = normalizeSortByOptions({\n    sortBy,\n    sortByDirection,\n    sortByColumnType,\n  }) as Parameters<typeof firstBy>[];\n\n  let sortFn = firstBy(...firstSortOption);\n  for (const sortOptions of othersSortOptions) {\n    sortFn = sortFn.thenBy(...sortOptions);\n  }\n\n  return sortFn;\n}\n\nfunction normalizeSortByOptions({\n  sortBy,\n  sortByDirection,\n  sortByColumnType,\n}: Required<SortOptions>) {\n  const numberFormat = sortByColumnType === 'number' && {\n    cmp: (a: number, b: number) => a - b,\n  };\n  if (!Array.isArray(sortBy)) {\n    sortBy = [sortBy];\n  }\n  return sortBy.map((sortByEl) => {\n    // sortByEl is 'column'\n    if (typeof sortByEl === 'string') {\n      return [sortByEl, {direction: sortByDirection, ...numberFormat}];\n    }\n\n    if (Array.isArray(sortByEl)) {\n      // sortBy is ['column']\n      if (sortByEl[1] === undefined) {\n        return [sortByEl, {direction: sortByDirection, ...numberFormat}];\n      }\n\n      // sortBy is ['column', { ... }]\n      if (typeof sortByEl[1] === 'object') {\n        const othersSortOptions = numberFormat\n          ? {...numberFormat, ...sortByEl[1]}\n          : sortByEl[1];\n        return [\n          sortByEl[0],\n          {direction: sortByDirection, ...othersSortOptions},\n        ];\n      }\n    }\n    return sortByEl;\n  });\n}\n","import {aggregationFunctions, aggregate} from './aggregation.js';\nimport {AggregationType} from '../types.js';\nimport {FeatureData} from '../types-internal.js';\n\n/** @privateRemarks Source: @carto/react-core */\nexport type GroupByFeature = {\n  name: string;\n  value: number;\n}[];\n\n/** @privateRemarks Source: @carto/react-core */\nexport function groupValuesByColumn({\n  data,\n  valuesColumns,\n  joinOperation,\n  keysColumn,\n  operation,\n}: {\n  data: FeatureData[];\n  valuesColumns?: string[];\n  joinOperation?: AggregationType;\n  keysColumn: string;\n  operation: AggregationType;\n}): GroupByFeature | null {\n  if (Array.isArray(data) && data.length === 0) {\n    return null;\n  }\n  const groups = data.reduce((accumulator, item) => {\n    const group = item[keysColumn];\n\n    const values = accumulator.get(group) || [];\n    accumulator.set(group, values);\n\n    const aggregatedValue = aggregate(item, valuesColumns, joinOperation);\n\n    const isValid =\n      (operation === 'count' ? true : aggregatedValue !== null) &&\n      aggregatedValue !== undefined;\n\n    if (isValid) {\n      values.push(aggregatedValue);\n      accumulator.set(group, values);\n    }\n\n    return accumulator;\n  }, new Map()); // We use a map to be able to maintain the type in the key value\n\n  const targetOperation =\n    aggregationFunctions[operation as Exclude<AggregationType, 'custom'>];\n\n  if (targetOperation) {\n    return Array.from(groups).map(([name, value]) => ({\n      name,\n      value: targetOperation(value),\n    }));\n  }\n\n  return [];\n}\n","/**\n * Returns midnight (local time) on the Monday preceeding a given date, in\n * milliseconds since the UNIX epoch.\n */\nexport function getMonday(date: number | Date): number {\n  const dateCp = new Date(date);\n  const day = dateCp.getDay();\n  const diff = dateCp.getDate() - day + (day ? 1 : -6); // adjust when day is sunday\n  dateCp.setDate(diff);\n  dateCp.setHours(0, 0, 0, 0);\n  return dateCp.getTime();\n}\n\n/**\n * Returns midnight (UTC) on the Monday preceeding a given date, in\n * milliseconds since the UNIX epoch.\n */\nexport function getUTCMonday(date: number | Date): number {\n  const dateCp = new Date(date);\n  const day = dateCp.getUTCDay();\n  const diff = dateCp.getUTCDate() - day + (day ? 1 : -6); // adjust when day is sunday\n  dateCp.setUTCDate(diff);\n  return Date.UTC(\n    dateCp.getUTCFullYear(),\n    dateCp.getUTCMonth(),\n    dateCp.getUTCDate()\n  );\n}\n","import {AggregationType, GroupDateType} from '../types.js';\nimport {getUTCMonday} from '../utils/dateUtils.js';\nimport {aggregate, aggregationFunctions} from './aggregation.js';\nimport {GroupByFeature} from './groupBy.js';\n\nconst GROUP_KEY_FN_MAPPING: Record<GroupDateType, (date: Date) => number> = {\n  year: (date: Date) => Date.UTC(date.getUTCFullYear()),\n  month: (date: Date) => Date.UTC(date.getUTCFullYear(), date.getUTCMonth()),\n  week: (date: Date) => getUTCMonday(date),\n  day: (date: Date) =>\n    Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()),\n  hour: (date: Date) =>\n    Date.UTC(\n      date.getUTCFullYear(),\n      date.getUTCMonth(),\n      date.getUTCDate(),\n      date.getUTCHours()\n    ),\n  minute: (date: Date) =>\n    Date.UTC(\n      date.getUTCFullYear(),\n      date.getUTCMonth(),\n      date.getUTCDate(),\n      date.getUTCHours(),\n      date.getUTCMinutes()\n    ),\n  second: (date: Date) =>\n    Date.UTC(\n      date.getUTCFullYear(),\n      date.getUTCMonth(),\n      date.getUTCDate(),\n      date.getUTCHours(),\n      date.getUTCMinutes(),\n      date.getUTCSeconds()\n    ),\n};\n\n/** @privateRemarks Source: @carto/react-core */\nexport function groupValuesByDateColumn({\n  data,\n  valuesColumns,\n  joinOperation,\n  keysColumn,\n  groupType,\n  operation,\n}: {\n  data: Record<string, unknown>[];\n  valuesColumns?: string[];\n  joinOperation?: Exclude<AggregationType, 'custom'>;\n  keysColumn: string;\n  groupType: GroupDateType;\n  operation?: Exclude<AggregationType, 'custom'>;\n}): GroupByFeature | null {\n  if (Array.isArray(data) && data.length === 0) {\n    return null;\n  }\n\n  const groupKeyFn = GROUP_KEY_FN_MAPPING[groupType];\n\n  if (!groupKeyFn) {\n    return null;\n  }\n\n  const groups = data.reduce((acc, item) => {\n    const value = item[keysColumn];\n    const formattedValue = new Date(value as number);\n    const groupKey = groupKeyFn(formattedValue);\n\n    if (!isNaN(groupKey)) {\n      let groupedValues = acc.get(groupKey);\n      if (!groupedValues) {\n        groupedValues = [];\n        acc.set(groupKey, groupedValues);\n      }\n\n      const aggregatedValue = aggregate(item, valuesColumns, joinOperation);\n\n      const isValid = aggregatedValue !== null && aggregatedValue !== undefined;\n\n      if (isValid) {\n        groupedValues.push(aggregatedValue);\n        acc.set(groupKey, groupedValues);\n      }\n    }\n\n    return acc;\n  }, new Map());\n\n  const targetOperation =\n    aggregationFunctions[operation as Exclude<AggregationType, 'custom'>];\n\n  return [...groups.entries()]\n    .map(([name, value]) => ({\n      name,\n      value: targetOperation(value),\n    }))\n    .sort((a, b) => a.name - b.name);\n}\n","import {aggregate, aggregationFunctions} from './aggregation.js';\nimport {AggregationType} from '../types.js';\nimport {FeatureData} from '../types-internal.js';\n\n/**\n * Histogram computation.\n * @privateRemarks Source: @carto/react-core\n */\nexport function histogram({\n  data,\n  valuesColumns,\n  joinOperation,\n  ticks,\n  operation,\n}: {\n  data: FeatureData[];\n  valuesColumns?: string[];\n  joinOperation?: Exclude<AggregationType, 'custom'>;\n  ticks: number[];\n  operation: Exclude<AggregationType, 'custom'>;\n}): number[] {\n  if (Array.isArray(data) && data.length === 0) {\n    return [];\n  }\n\n  const binsContainer = [Number.MIN_SAFE_INTEGER, ...ticks].map(\n    (tick, index, arr) => ({\n      bin: index,\n      start: tick,\n      end: index === arr.length - 1 ? Number.MAX_SAFE_INTEGER : arr[index + 1],\n      values: [] as number[],\n    })\n  );\n\n  data.forEach((feature) => {\n    const featureValue = aggregate(\n      feature,\n      valuesColumns,\n      joinOperation\n    ) as number;\n\n    const isValid = featureValue !== null && featureValue !== undefined;\n\n    if (!isValid) {\n      return;\n    }\n\n    const binContainer = binsContainer.find(\n      (bin) => bin.start <= featureValue && bin.end > featureValue\n    );\n\n    if (!binContainer) {\n      return;\n    }\n\n    binContainer.values.push(featureValue);\n  });\n\n  const targetOperation = aggregationFunctions[operation];\n  const transformedBins = binsContainer.map(\n    (binContainer) => binContainer.values\n  );\n  return transformedBins.map((values) =>\n    values.length ? targetOperation(values) : 0\n  );\n}\n","import {aggregate} from './aggregation.js';\nimport {FeatureData} from '../types-internal.js';\nimport {AggregationType} from '../types.js';\n\nexport type ScatterPlotFeature = [number, number][];\n\n/**\n * Filters invalid features and formats  data.\n * @privateRemarks Source: @carto/react-core\n */\nexport function scatterPlot({\n  data,\n  xAxisColumns,\n  xAxisJoinOperation,\n  yAxisColumns,\n  yAxisJoinOperation,\n}: {\n  data: FeatureData[];\n  xAxisColumns: string[];\n  xAxisJoinOperation?: AggregationType;\n  yAxisColumns: string[];\n  yAxisJoinOperation?: AggregationType;\n}): ScatterPlotFeature {\n  return data.reduce(\n    (acc, feature) => {\n      const xValue = aggregate(\n        feature,\n        xAxisColumns,\n        xAxisJoinOperation\n      ) as number;\n\n      const xIsValid = xValue !== null && xValue !== undefined;\n\n      const yValue = aggregate(\n        feature,\n        yAxisColumns,\n        yAxisJoinOperation\n      ) as number;\n\n      const yIsValid = yValue !== null && yValue !== undefined;\n\n      if (xIsValid && yIsValid) {\n        acc.push([xValue, yValue]);\n      }\n\n      return acc;\n    },\n    [] as [number, number][]\n  );\n}\n","/* eslint-disable @typescript-eslint/require-await */\nimport {TilesetSourceOptions} from '../sources/index.js';\nimport type {ModelSource} from '../models/index.js';\nimport {\n  CategoryRequestOptions,\n  CategoryResponse,\n  FeaturesResponse,\n  FormulaRequestOptions,\n  FormulaResponse,\n  HistogramRequestOptions,\n  HistogramResponse,\n  RangeRequestOptions,\n  RangeResponse,\n  ScatterRequestOptions,\n  ScatterResponse,\n  TableRequestOptions,\n  TableResponse,\n  TimeSeriesRequestOptions,\n  TimeSeriesResponse,\n} from './types.js';\nimport {InvalidColumnError, assert, getApplicableFilters} from '../utils.js';\nimport {TileFormat} from '../constants.js';\nimport {Filter, Filters, SpatialFilter, Tile} from '../types.js';\nimport {\n  TileFeatureExtractOptions,\n  applyFilters,\n  geojsonFeatures,\n  tileFeatures,\n} from '../filters/index.js';\nimport {\n  aggregationFunctions,\n  applySorting,\n  groupValuesByColumn,\n  groupValuesByDateColumn,\n  histogram,\n  scatterPlot,\n} from '../operations/index.js';\nimport {FeatureData} from '../types-internal.js';\nimport {FeatureCollection} from 'geojson';\nimport {SpatialDataType} from '../sources/types.js';\nimport {WidgetSource, WidgetSourceProps} from './widget-source.js';\nimport {booleanEqual} from '@turf/boolean-equal';\n\n// TODO(cleanup): Parameter defaults in source functions and widget API calls are\n// currently duplicated and possibly inconsistent. Consider consolidating and\n// operating on Required<T> objects. See:\n// https://github.com/CartoDB/carto-api-client/issues/39\n\nexport type WidgetTilesetSourceProps = WidgetSourceProps &\n  Omit<TilesetSourceOptions, 'filters'> & {\n    tileFormat: TileFormat;\n    spatialDataType: SpatialDataType;\n  };\n\nexport type WidgetTilesetSourceResult = {widgetSource: WidgetTilesetSource};\n\n/**\n * Source for Widget API requests on a data source defined by a tileset.\n *\n * Generally not intended to be constructed directly. Instead, call\n * {@link vectorTilesetSource}, {@link h3TilesetSource}, or {@link quadbinTilesetSource},\n * which can be shared with map layers. Sources contain a `widgetSource`\n * property, for use by widget implementations.\n *\n * Example:\n *\n * ```javascript\n * import { vectorTilesetSource } from '@carto/api-client';\n *\n * const data = vectorTilesetSource({\n *   accessToken: '••••',\n *   connectionName: 'carto_dw',\n *   tableName: 'carto-demo-data.demo_rasters.my_tileset_source'\n * });\n *\n * const { widgetSource } = await data;\n * ```\n */\nexport class WidgetTilesetSource extends WidgetSource<WidgetTilesetSourceProps> {\n  private _tiles: Tile[] = [];\n  private _features: FeatureData[] = [];\n  private _tileFeatureExtractOptions: TileFeatureExtractOptions = {};\n  private _tileFeatureExtractPreviousInputs: {spatialFilter?: SpatialFilter} =\n    {};\n\n  protected override getModelSource(\n    filters: Filters | undefined,\n    filterOwner: string\n  ): ModelSource {\n    return {\n      ...super._getModelSource(filters, filterOwner),\n      type: 'tileset',\n      data: this.props.tableName,\n    };\n  }\n\n  /**\n   * Loads features as a list of tiles (typically provided by deck.gl).\n   * After tiles are loaded, {@link extractTileFeatures} must be called\n   * before computing statistics on the tiles.\n   */\n  loadTiles(tiles: unknown[]) {\n    this._tiles = tiles as Tile[];\n    this._features.length = 0;\n  }\n\n  /** Configures options used to extract features from tiles. */\n  setTileFeatureExtractOptions(options: TileFeatureExtractOptions) {\n    this._tileFeatureExtractOptions = options;\n    this._features.length = 0;\n  }\n\n  protected _extractTileFeatures(spatialFilter: SpatialFilter) {\n    // When spatial filter has not changed, don't redo extraction. If tiles or\n    // tile extract options change, features will have been cleared already.\n    const prevInputs = this._tileFeatureExtractPreviousInputs;\n    if (\n      this._features.length &&\n      prevInputs.spatialFilter &&\n      booleanEqual(prevInputs.spatialFilter, spatialFilter)\n    ) {\n      return;\n    }\n\n    this._features = tileFeatures({\n      tiles: this._tiles,\n      tileFormat: this.props.tileFormat,\n      ...this._tileFeatureExtractOptions,\n\n      spatialFilter,\n      spatialDataColumn: this.props.spatialDataColumn,\n      spatialDataType: this.props.spatialDataType,\n    });\n\n    prevInputs.spatialFilter = spatialFilter;\n  }\n\n  /**\n   * Loads features as GeoJSON (used for testing).\n   * @experimental\n   * @internal Not for public use. Spatial filters in other method calls will be ignored.\n   */\n  loadGeoJSON({\n    geojson,\n    spatialFilter,\n  }: {\n    geojson: FeatureCollection;\n    spatialFilter: SpatialFilter;\n  }) {\n    this._features = geojsonFeatures({\n      geojson,\n      spatialFilter,\n      ...this._tileFeatureExtractOptions,\n    });\n    this._tileFeatureExtractPreviousInputs.spatialFilter = spatialFilter;\n  }\n\n  override async getFeatures(): Promise<FeaturesResponse> {\n    throw new Error('getFeatures not supported for tilesets');\n  }\n\n  async getFormula({\n    column = '*',\n    operation = 'count',\n    joinOperation,\n    filters,\n    filterOwner,\n    spatialFilter,\n  }: FormulaRequestOptions): Promise<FormulaResponse> {\n    if (operation === 'custom') {\n      throw new Error('Custom aggregation not supported for tilesets');\n    }\n\n    // Column is required except when operation is 'count'.\n    if ((column && column !== '*') || operation !== 'count') {\n      assertColumn(this._features, column);\n    }\n\n    const filteredFeatures = this._getFilteredFeatures(\n      spatialFilter,\n      filters,\n      filterOwner\n    );\n\n    if (filteredFeatures.length === 0 && operation !== 'count') {\n      return {value: null};\n    }\n\n    const targetOperation = aggregationFunctions[operation];\n    return {\n      value: targetOperation(filteredFeatures, column, joinOperation),\n    };\n  }\n\n  override async getHistogram({\n    operation = 'count',\n    ticks,\n    column,\n    joinOperation,\n    filters,\n    filterOwner,\n    spatialFilter,\n  }: HistogramRequestOptions): Promise<HistogramResponse> {\n    const filteredFeatures = this._getFilteredFeatures(\n      spatialFilter,\n      filters,\n      filterOwner\n    );\n\n    assertColumn(this._features, column);\n\n    if (!this._features.length) {\n      return [];\n    }\n\n    return histogram({\n      data: filteredFeatures,\n      valuesColumns: normalizeColumns(column),\n      joinOperation,\n      ticks,\n      operation,\n    });\n  }\n\n  override async getCategories({\n    column,\n    operation = 'count',\n    operationColumn,\n    joinOperation,\n    filters,\n    filterOwner,\n    spatialFilter,\n  }: CategoryRequestOptions): Promise<CategoryResponse> {\n    const filteredFeatures = this._getFilteredFeatures(\n      spatialFilter,\n      filters,\n      filterOwner\n    );\n\n    if (!filteredFeatures.length) {\n      return [];\n    }\n\n    assertColumn(this._features, column, operationColumn as string);\n\n    const groups = groupValuesByColumn({\n      data: filteredFeatures,\n      valuesColumns: normalizeColumns(operationColumn || column),\n      joinOperation,\n      keysColumn: column,\n      operation,\n    });\n\n    return groups || [];\n  }\n\n  override async getScatter({\n    xAxisColumn,\n    yAxisColumn,\n    xAxisJoinOperation,\n    yAxisJoinOperation,\n    filters,\n    filterOwner,\n    spatialFilter,\n  }: ScatterRequestOptions): Promise<ScatterResponse> {\n    const filteredFeatures = this._getFilteredFeatures(\n      spatialFilter,\n      filters,\n      filterOwner\n    );\n\n    if (!filteredFeatures.length) {\n      return [];\n    }\n\n    assertColumn(this._features, xAxisColumn, yAxisColumn);\n\n    return scatterPlot({\n      data: filteredFeatures,\n      xAxisColumns: normalizeColumns(xAxisColumn),\n      xAxisJoinOperation,\n      yAxisColumns: normalizeColumns(yAxisColumn),\n      yAxisJoinOperation,\n    });\n  }\n\n  override async getTable({\n    columns,\n    searchFilterColumn,\n    searchFilterText,\n    sortBy,\n    sortDirection,\n    sortByColumnType,\n    offset = 0,\n    limit = 10,\n    filters,\n    filterOwner,\n    spatialFilter,\n  }: TableRequestOptions): Promise<TableResponse> {\n    // Filter.\n    let filteredFeatures = this._getFilteredFeatures(\n      spatialFilter,\n      filters,\n      filterOwner\n    );\n\n    if (!filteredFeatures.length) {\n      return {rows: [], totalCount: 0};\n    }\n\n    // Search.\n    if (searchFilterColumn && searchFilterText) {\n      filteredFeatures = filteredFeatures.filter(\n        (row) =>\n          row[searchFilterColumn] &&\n          String(row[searchFilterColumn] as unknown)\n            .toLowerCase()\n            .includes(String(searchFilterText).toLowerCase())\n      );\n    }\n\n    // Sort.\n    let rows = applySorting(filteredFeatures, {\n      sortBy,\n      sortByDirection: sortDirection,\n      sortByColumnType,\n    });\n    const totalCount = rows.length;\n\n    // Offset and limit.\n    rows = rows.slice(\n      Math.min(offset, totalCount),\n      Math.min(offset + limit, totalCount)\n    );\n\n    // Select columns.\n    rows = rows.map((srcRow: FeatureData) => {\n      const dstRow: FeatureData = {};\n      for (const column of columns) {\n        dstRow[column] = srcRow[column];\n      }\n      return dstRow;\n    });\n\n    return {rows, totalCount} as TableResponse;\n  }\n\n  override async getTimeSeries({\n    column,\n    stepSize,\n    operation,\n    operationColumn,\n    joinOperation,\n    filters,\n    filterOwner,\n    spatialFilter,\n  }: TimeSeriesRequestOptions): Promise<TimeSeriesResponse> {\n    const filteredFeatures = this._getFilteredFeatures(\n      spatialFilter,\n      filters,\n      filterOwner\n    );\n\n    if (!filteredFeatures.length) {\n      return {rows: []};\n    }\n\n    assertColumn(this._features, column, operationColumn as string);\n\n    const rows =\n      groupValuesByDateColumn({\n        data: filteredFeatures,\n        valuesColumns: normalizeColumns(operationColumn || column),\n        keysColumn: column,\n        groupType: stepSize,\n        operation,\n        joinOperation,\n      }) || [];\n\n    return {rows};\n  }\n\n  override async getRange({\n    column,\n    filters,\n    filterOwner,\n    spatialFilter,\n  }: RangeRequestOptions): Promise<RangeResponse> {\n    assertColumn(this._features, column);\n\n    const filteredFeatures = this._getFilteredFeatures(\n      spatialFilter,\n      filters,\n      filterOwner\n    );\n\n    if (!this._features.length) {\n      // TODO: Is this the only nullable response in the Widgets API? If so,\n      // can we do something more consistent?\n      return null;\n    }\n\n    return {\n      min: aggregationFunctions.min(filteredFeatures, column),\n      max: aggregationFunctions.max(filteredFeatures, column),\n    };\n  }\n\n  /****************************************************************************\n   * INTERNAL\n   */\n\n  private _getFilteredFeatures(\n    spatialFilter?: SpatialFilter,\n    filters?: Record<string, Filter>,\n    filterOwner?: string\n  ): FeatureData[] {\n    assert(spatialFilter, 'spatialFilter required for tilesets');\n    this._extractTileFeatures(spatialFilter);\n    return applyFilters(\n      this._features,\n      getApplicableFilters(filterOwner, filters || this.props.filters),\n      this.props.filtersLogicalOperator || 'and'\n    );\n  }\n}\n\nfunction assertColumn(\n  features: FeatureData[],\n  ...columnArgs: string[] | string[][]\n) {\n  // TODO(cleanup): Can drop support for multiple column shapes here?\n\n  // Due to the multiple column shape, we normalise it as an array with normalizeColumns\n  const columns = Array.from(new Set(columnArgs.map(normalizeColumns).flat()));\n\n  const featureKeys = Object.keys(features[0]);\n\n  const invalidColumns = columns.filter(\n    (column) => !featureKeys.includes(column)\n  );\n\n  if (invalidColumns.length) {\n    throw new InvalidColumnError(\n      `Missing column(s): ${invalidColumns.join(', ')}`\n    );\n  }\n}\n\nfunction normalizeColumns(columns: string | string[]): string[] {\n  return Array.isArray(columns)\n    ? columns\n    : typeof columns === 'string'\n      ? [columns]\n      : [];\n}\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {DEFAULT_AGGREGATION_RES_LEVEL_H3} from '../constants-internal.js';\nimport {\n  WidgetQuerySource,\n  WidgetQuerySourceResult,\n} from '../widget-sources/index.js';\nimport {baseSource} from './base-source.js';\nimport type {\n  AggregationOptions,\n  FilterOptions,\n  QuerySourceOptions,\n  SourceOptions,\n  SpatialDataType,\n  TilejsonResult,\n} from './types.js';\n\nexport type H3QuerySourceOptions = SourceOptions &\n  QuerySourceOptions &\n  AggregationOptions &\n  FilterOptions;\n\ntype UrlParameters = {\n  aggregationExp: string;\n  aggregationResLevel?: string;\n  spatialDataType: SpatialDataType;\n  spatialDataColumn?: string;\n  q: string;\n  queryParameters?: Record<string, unknown> | unknown[];\n  filters?: Record<string, unknown>;\n};\n\nexport type H3QuerySourceResponse = TilejsonResult & WidgetQuerySourceResult;\n\nexport const h3QuerySource = async function (\n  options: H3QuerySourceOptions\n): Promise<H3QuerySourceResponse> {\n  const {\n    aggregationExp,\n    aggregationResLevel = DEFAULT_AGGREGATION_RES_LEVEL_H3,\n    sqlQuery,\n    spatialDataColumn = 'h3',\n    queryParameters,\n    filters,\n  } = options;\n\n  const spatialDataType = 'h3';\n\n  const urlParameters: UrlParameters = {\n    aggregationExp,\n    spatialDataColumn,\n    spatialDataType,\n    q: sqlQuery,\n  };\n\n  if (aggregationResLevel) {\n    urlParameters.aggregationResLevel = String(aggregationResLevel);\n  }\n  if (queryParameters) {\n    urlParameters.queryParameters = queryParameters;\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n\n  return baseSource<UrlParameters>('query', options, urlParameters).then(\n    (result) => ({\n      ...(result as TilejsonResult),\n      widgetSource: new WidgetQuerySource({\n        ...options,\n        // NOTE: Parameters with default values above must be explicitly passed here.\n        spatialDataColumn,\n        spatialDataType,\n      }),\n    })\n  );\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {DEFAULT_AGGREGATION_RES_LEVEL_H3} from '../constants-internal.js';\nimport {\n  WidgetTableSource,\n  WidgetTableSourceResult,\n} from '../widget-sources/index.js';\nimport {baseSource} from './base-source.js';\nimport type {\n  AggregationOptions,\n  FilterOptions,\n  SourceOptions,\n  SpatialDataType,\n  TableSourceOptions,\n  TilejsonResult,\n} from './types.js';\n\nexport type H3TableSourceOptions = SourceOptions &\n  TableSourceOptions &\n  AggregationOptions &\n  FilterOptions;\n\ntype UrlParameters = {\n  aggregationExp: string;\n  aggregationResLevel?: string;\n  spatialDataType: SpatialDataType;\n  spatialDataColumn?: string;\n  name: string;\n  filters?: Record<string, unknown>;\n};\n\nexport type H3TableSourceResponse = TilejsonResult & WidgetTableSourceResult;\n\nexport const h3TableSource = async function (\n  options: H3TableSourceOptions\n): Promise<H3TableSourceResponse> {\n  const {\n    aggregationExp,\n    aggregationResLevel = DEFAULT_AGGREGATION_RES_LEVEL_H3,\n    spatialDataColumn = 'h3',\n    tableName,\n    filters,\n  } = options;\n\n  const spatialDataType = 'h3';\n\n  const urlParameters: UrlParameters = {\n    aggregationExp,\n    name: tableName,\n    spatialDataColumn,\n    spatialDataType,\n  };\n\n  if (aggregationResLevel) {\n    urlParameters.aggregationResLevel = String(aggregationResLevel);\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n\n  return baseSource<UrlParameters>('table', options, urlParameters).then(\n    (result) => ({\n      ...(result as TilejsonResult),\n      widgetSource: new WidgetTableSource({\n        ...options,\n        // NOTE: Parameters with default values above must be explicitly passed here.\n        spatialDataColumn,\n        spatialDataType,\n      }),\n    })\n  );\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {baseSource} from './base-source.js';\nimport type {\n  SourceOptions,\n  TilejsonResult,\n  TilesetSourceOptions,\n} from './types.js';\n\nexport type H3TilesetSourceOptions = SourceOptions & TilesetSourceOptions;\ntype UrlParameters = {name: string};\n\nexport type H3TilesetSourceResponse = TilejsonResult;\n\nexport const h3TilesetSource = async function (\n  options: H3TilesetSourceOptions\n): Promise<H3TilesetSourceResponse> {\n  const {tableName} = options;\n  const urlParameters: UrlParameters = {name: tableName};\n\n  return baseSource<UrlParameters>(\n    'tileset',\n    options,\n    urlParameters\n  ) as Promise<H3TilesetSourceResponse>;\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {baseSource} from './base-source.js';\nimport type {\n  FilterOptions,\n  SourceOptions,\n  TilejsonResult,\n  TilesetSourceOptions,\n} from './types.js';\n\nexport type RasterSourceOptions = SourceOptions &\n  TilesetSourceOptions &\n  FilterOptions;\ntype UrlParameters = {\n  name: string;\n  filters?: Record<string, unknown>;\n};\n\nexport type RasterSourceResponse = TilejsonResult;\n\nexport const rasterSource = async function (\n  options: RasterSourceOptions\n): Promise<RasterSourceResponse> {\n  const {tableName, filters} = options;\n  const urlParameters: UrlParameters = {name: tableName};\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n\n  return baseSource<UrlParameters>(\n    'raster',\n    options,\n    urlParameters\n  ) as Promise<RasterSourceResponse>;\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {DEFAULT_AGGREGATION_RES_LEVEL_QUADBIN} from '../constants-internal.js';\nimport {\n  WidgetQuerySource,\n  WidgetQuerySourceResult,\n} from '../widget-sources/index.js';\nimport {baseSource} from './base-source.js';\nimport type {\n  AggregationOptions,\n  FilterOptions,\n  QuerySourceOptions,\n  SourceOptions,\n  SpatialDataType,\n  TilejsonResult,\n} from './types.js';\n\nexport type QuadbinQuerySourceOptions = SourceOptions &\n  QuerySourceOptions &\n  AggregationOptions &\n  FilterOptions;\n\ntype UrlParameters = {\n  aggregationExp: string;\n  aggregationResLevel?: string;\n  spatialDataType: SpatialDataType;\n  spatialDataColumn?: string;\n  q: string;\n  queryParameters?: Record<string, unknown> | unknown[];\n  filters?: Record<string, unknown>;\n};\n\nexport type QuadbinQuerySourceResponse = TilejsonResult &\n  WidgetQuerySourceResult;\n\nexport const quadbinQuerySource = async function (\n  options: QuadbinQuerySourceOptions\n): Promise<QuadbinQuerySourceResponse> {\n  const {\n    aggregationExp,\n    aggregationResLevel = DEFAULT_AGGREGATION_RES_LEVEL_QUADBIN,\n    sqlQuery,\n    spatialDataColumn = 'quadbin',\n    queryParameters,\n    filters,\n  } = options;\n\n  const spatialDataType = 'quadbin';\n\n  const urlParameters: UrlParameters = {\n    aggregationExp,\n    q: sqlQuery,\n    spatialDataColumn,\n    spatialDataType,\n  };\n\n  if (aggregationResLevel) {\n    urlParameters.aggregationResLevel = String(aggregationResLevel);\n  }\n  if (queryParameters) {\n    urlParameters.queryParameters = queryParameters;\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n\n  return baseSource<UrlParameters>('query', options, urlParameters).then(\n    (result) => ({\n      ...(result as TilejsonResult),\n      widgetSource: new WidgetQuerySource({\n        ...options,\n        // NOTE: Parameters with default values above must be explicitly passed here.\n        spatialDataColumn,\n        spatialDataType,\n      }),\n    })\n  );\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {DEFAULT_AGGREGATION_RES_LEVEL_QUADBIN} from '../constants-internal.js';\nimport {\n  WidgetTableSource,\n  WidgetTableSourceResult,\n} from '../widget-sources/index.js';\nimport {baseSource} from './base-source.js';\nimport type {\n  AggregationOptions,\n  FilterOptions,\n  SourceOptions,\n  SpatialDataType,\n  TableSourceOptions,\n  TilejsonResult,\n} from './types.js';\n\nexport type QuadbinTableSourceOptions = SourceOptions &\n  TableSourceOptions &\n  AggregationOptions &\n  FilterOptions;\n\ntype UrlParameters = {\n  aggregationExp: string;\n  aggregationResLevel?: string;\n  spatialDataType: SpatialDataType;\n  spatialDataColumn?: string;\n  name: string;\n  filters?: Record<string, unknown>;\n};\n\nexport type QuadbinTableSourceResponse = TilejsonResult &\n  WidgetTableSourceResult;\n\nexport const quadbinTableSource = async function (\n  options: QuadbinTableSourceOptions\n): Promise<QuadbinTableSourceResponse> {\n  const {\n    aggregationExp,\n    aggregationResLevel = DEFAULT_AGGREGATION_RES_LEVEL_QUADBIN,\n    spatialDataColumn = 'quadbin',\n    tableName,\n    filters,\n  } = options;\n\n  const spatialDataType = 'quadbin';\n\n  const urlParameters: UrlParameters = {\n    aggregationExp,\n    name: tableName,\n    spatialDataColumn,\n    spatialDataType,\n  };\n\n  if (aggregationResLevel) {\n    urlParameters.aggregationResLevel = String(aggregationResLevel);\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n\n  return baseSource<UrlParameters>('table', options, urlParameters).then(\n    (result) => ({\n      ...(result as TilejsonResult),\n      widgetSource: new WidgetTableSource({\n        ...options,\n        // NOTE: Parameters with default values above must be explicitly passed here.\n        spatialDataColumn,\n        spatialDataType,\n      }),\n    })\n  );\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {baseSource} from './base-source.js';\nimport type {\n  SourceOptions,\n  TilejsonResult,\n  TilesetSourceOptions,\n} from './types.js';\n\nexport type QuadbinTilesetSourceOptions = SourceOptions & TilesetSourceOptions;\ntype UrlParameters = {name: string};\n\nexport type QuadbinTilesetSourceResponse = TilejsonResult;\n\nexport const quadbinTilesetSource = async function (\n  options: QuadbinTilesetSourceOptions\n): Promise<QuadbinTilesetSourceResponse> {\n  const {tableName} = options;\n  const urlParameters: UrlParameters = {name: tableName};\n\n  return baseSource<UrlParameters>(\n    'tileset',\n    options,\n    urlParameters\n  ) as Promise<QuadbinTilesetSourceResponse>;\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  DEFAULT_GEO_COLUMN,\n  DEFAULT_TILE_RESOLUTION,\n} from '../constants-internal.js';\nimport {\n  WidgetQuerySource,\n  WidgetQuerySourceResult,\n} from '../widget-sources/index.js';\nimport {baseSource} from './base-source.js';\nimport type {\n  FilterOptions,\n  SourceOptions,\n  QuerySourceOptions,\n  SpatialDataType,\n  TilejsonResult,\n  ColumnsOption,\n} from './types.js';\n\nexport type VectorQuerySourceOptions = SourceOptions &\n  QuerySourceOptions &\n  FilterOptions &\n  ColumnsOption;\n\ntype UrlParameters = {\n  columns?: string;\n  filters?: Record<string, unknown>;\n  spatialDataType: SpatialDataType;\n  spatialDataColumn?: string;\n  tileResolution?: string;\n  q: string;\n  queryParameters?: Record<string, unknown> | unknown[];\n  aggregationExp?: string;\n};\n\nexport type VectorQuerySourceResponse = TilejsonResult &\n  WidgetQuerySourceResult;\n\nexport const vectorQuerySource = async function (\n  options: VectorQuerySourceOptions\n): Promise<VectorQuerySourceResponse> {\n  const {\n    columns,\n    filters,\n    spatialDataColumn = DEFAULT_GEO_COLUMN,\n    sqlQuery,\n    tileResolution = DEFAULT_TILE_RESOLUTION,\n    queryParameters,\n    aggregationExp,\n  } = options;\n\n  const spatialDataType = 'geo';\n\n  const urlParameters: UrlParameters = {\n    spatialDataColumn,\n    spatialDataType,\n    tileResolution: tileResolution.toString(),\n    q: sqlQuery,\n  };\n\n  if (columns) {\n    urlParameters.columns = columns.join(',');\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n  if (queryParameters) {\n    urlParameters.queryParameters = queryParameters;\n  }\n  if (aggregationExp) {\n    urlParameters.aggregationExp = aggregationExp;\n  }\n\n  return baseSource<UrlParameters>('query', options, urlParameters).then(\n    (result) => ({\n      ...(result as TilejsonResult),\n      widgetSource: new WidgetQuerySource({\n        ...options,\n        // NOTE: Parameters with default values above must be explicitly passed here.\n        spatialDataColumn,\n        spatialDataType,\n        tileResolution,\n      }),\n    })\n  );\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {\n  DEFAULT_GEO_COLUMN,\n  DEFAULT_TILE_RESOLUTION,\n} from '../constants-internal.js';\nimport {\n  WidgetTableSource,\n  WidgetTableSourceResult,\n} from '../widget-sources/index.js';\nimport {baseSource} from './base-source.js';\nimport type {\n  FilterOptions,\n  ColumnsOption,\n  SourceOptions,\n  SpatialDataType,\n  TableSourceOptions,\n  TilejsonResult,\n} from './types.js';\n\nexport type VectorTableSourceOptions = SourceOptions &\n  TableSourceOptions &\n  FilterOptions &\n  ColumnsOption;\n\ntype UrlParameters = {\n  columns?: string;\n  filters?: Record<string, unknown>;\n  spatialDataType: SpatialDataType;\n  spatialDataColumn?: string;\n  tileResolution?: string;\n  name: string;\n  aggregationExp?: string;\n};\n\nexport type VectorTableSourceResponse = TilejsonResult &\n  WidgetTableSourceResult;\n\nexport const vectorTableSource = async function (\n  options: VectorTableSourceOptions\n): Promise<VectorTableSourceResponse> {\n  const {\n    columns,\n    filters,\n    spatialDataColumn = DEFAULT_GEO_COLUMN,\n    tableName,\n    tileResolution = DEFAULT_TILE_RESOLUTION,\n    aggregationExp,\n  } = options;\n\n  const spatialDataType = 'geo';\n\n  const urlParameters: UrlParameters = {\n    name: tableName,\n    spatialDataColumn,\n    spatialDataType,\n    tileResolution: tileResolution.toString(),\n  };\n\n  if (columns) {\n    urlParameters.columns = columns.join(',');\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n  if (aggregationExp) {\n    urlParameters.aggregationExp = aggregationExp;\n  }\n\n  return baseSource<UrlParameters>('table', options, urlParameters).then(\n    (result) => ({\n      ...(result as TilejsonResult),\n      widgetSource: new WidgetTableSource({\n        ...options,\n        // NOTE: Parameters with default values above must be explicitly passed here.\n        spatialDataColumn,\n        spatialDataType,\n        tileResolution,\n      }),\n    })\n  );\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {baseSource} from './base-source.js';\nimport type {\n  SourceOptions,\n  TilesetSourceOptions,\n  TilejsonResult,\n} from './types.js';\n\nexport type VectorTilesetSourceOptions = SourceOptions & TilesetSourceOptions;\ntype UrlParameters = {name: string};\n\nexport type VectorTilesetSourceResponse = TilejsonResult;\n\nexport const vectorTilesetSource = async function (\n  options: VectorTilesetSourceOptions\n): Promise<VectorTilesetSourceResponse> {\n  const {tableName} = options;\n  const urlParameters: UrlParameters = {name: tableName};\n\n  return baseSource<UrlParameters>(\n    'tileset',\n    options,\n    urlParameters\n  ) as Promise<VectorTilesetSourceResponse>;\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {SOURCE_DEFAULTS} from '../sources/index.js';\nimport type {\n  SourceOptions,\n  QuerySourceOptions,\n  QueryResult,\n} from '../sources/types.js';\nimport {buildQueryUrl} from './endpoints.js';\nimport {requestWithParameters} from './request-with-parameters.js';\nimport {APIErrorContext} from './carto-api-error.js';\nimport {getClient} from '../client.js';\n\nexport type QueryOptions = SourceOptions & QuerySourceOptions;\ntype UrlParameters = {q: string; queryParameters?: string};\n\nexport const query = async function (\n  options: QueryOptions\n): Promise<QueryResult> {\n  const {\n    apiBaseUrl = SOURCE_DEFAULTS.apiBaseUrl,\n    maxLengthURL = SOURCE_DEFAULTS.maxLengthURL,\n    clientId = getClient(),\n    localCache,\n    connectionName,\n    sqlQuery,\n    queryParameters,\n  } = options;\n  const urlParameters: UrlParameters = {q: sqlQuery};\n\n  if (queryParameters) {\n    urlParameters.queryParameters = JSON.stringify(queryParameters);\n  }\n\n  const baseUrl = buildQueryUrl({apiBaseUrl, connectionName});\n  const headers = {\n    Authorization: `Bearer ${options.accessToken}`,\n    ...options.headers,\n  };\n  const parameters = {client: clientId, ...urlParameters};\n\n  const errorContext: APIErrorContext = {\n    requestType: 'SQL',\n    connection: options.connectionName,\n    type: 'query',\n    source: JSON.stringify(parameters, undefined, 2),\n  };\n  return await requestWithParameters<QueryResult>({\n    baseUrl,\n    parameters,\n    headers,\n    errorContext,\n    maxLengthURL,\n    localCache,\n  });\n};\n","// Default tile display size in deck.gl, in viewport pixels. May differ\n// from size or resolution assumed when generating the tile data,\nconst DEFAULT_TILE_SIZE = 512;\n\n// Relative scale factor (0 = no biasing, 2 = a few hexagons cover view)\nconst BIAS = 2;\n\n/**\n * Resolution conversion function. Takes a WebMercatorViewport and returns\n * a H3 resolution such that the screen space size of the hexagons is\n * \"similar\" to the given tileSize on screen. Intended for use with deck.gl.\n * @internal\n * @privateRemarks Source: https://github.com/visgl/deck.gl/blob/master/modules/carto/src/layers/h3-tileset-2d.ts\n */\nexport function _getHexagonResolution(\n  viewport: {zoom: number; latitude: number},\n  tileSize: number\n): number {\n  // Difference in given tile size compared to deck's internal 512px tile size,\n  // expressed as an offset to the viewport zoom.\n  const zoomOffset = Math.log2(tileSize / DEFAULT_TILE_SIZE);\n  const hexagonScaleFactor = (2 / 3) * (viewport.zoom - zoomOffset);\n  const latitudeScaleFactor = Math.log(\n    1 / Math.cos((Math.PI * viewport.latitude) / 180)\n  );\n\n  // Clip and bias\n  return Math.max(\n    0,\n    Math.floor(hexagonScaleFactor + latitudeScaleFactor - BIAS)\n  );\n}\n"],"names":["client","getClient","setClient","c","FilterType","ApiVersion","DEFAULT_API_BASE_URL","TileFormat","SpatialIndex","Provider","makeIntervalComplete","intervals","map","val","undefined","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","filterFunctions","IN","filterIn","BETWEEN","filterBetween","TIME","filterTime","CLOSED_OPEN","filterClosedOpen","STRING_SEARCH","filterStringSearch","filterValues","featureValue","includes","checkRange","range","lowerBound","upperBound","some","featureValueAsTimestamp","Date","getTime","isFinite","Error","params","normalizedFeatureValue","normalize","stringRegExp","useRegExp","filterValue","escapeRegExp","mustStart","mustEnd","regex","RegExp","join","caseSensitive","match","specialCharRegExp","normalizeRegExp","value","replace","data","normalizedData","String","keepSpecialCharacters","LOGICAL_OPERATOR_METHODS","and","or","passesFilter","columns","filters","feature","filtersLogicalOperator","method","column","columnFilters","columnFilterTypes","Object","keys","every","filter","filterFunction","values","_buildFeatureFilter","_ref","type","length","f","properties","featurePassesFilter","applyFilters","features","buildBinaryFeatureFilter","_ref2","featureIdIdx","binaryData","passesFilterUsingBinary","getValueFromNumericProps","_ref3","numericProps","getValueFromProperties","_ref4","propertyIdx","featureIds","GET_VALUE_BY_BINARY_PROP","getBinaryPropertyByFilterValues","flat","getFeatureValue","binaryProp","getFeatureValueFn","entries","_ref5","filterFn","geojsonFeatures","geojson","spatialFilter","uniqueIdProperty","uniqueIdx","Map","uniqueId","has","intersects","set","Array","from","DEFAULT_CONFIG","EPSILON","debug","precision","printTypes","printDegrees","printRowMajor","_cartographicRadians","globalThis","mathgl","config","isArray","ArrayBuffer","isView","DataView","lerp","a","b","t","ai","i","assert","condition","message","PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","lngLatToWorld","lngLat","lng","lat","lambda2","phi2","x","y","log","tan","worldToLngLat","xy","atan","exp","TRANSFORM_FN","Point","transformPoint","MultiPoint","transformMultiPoint","LineString","transformLineString","MultiLineString","transformMultiLineString","Polygon","transformPolygon","MultiPolygon","transformMultiPolygon","transformToTileCoords","geometry","bbox","west","south","east","north","nw","projectFlat","se","projectedBbox","transformFn","coordinates","pointX","pointY","inverseLerp","getPoints","g","multiPoint","line","multiLineString","lineString","polygon","polygonRing","multiPolygon","xyz","transformTileCoordsToWGS84","FEATURE_GEOM_PROPERTY","tileFeaturesGeometries","tiles","tileFormat","options","tile","isVisible","bboxToGeom","bboxPolygon","tileIsFullyVisible","booleanWithin","spatialFilterFeature","clippedGeometryToIntersect","intersect","featureCollection","transformedGeometryToIntersect","MVT","createIndicesForPoints","points","calculateFeatures","geometryIntersection","lines","polygons","processTileFeatureProperties","startIndex","endIndex","storeGeometry","tileProps","getPropertiesFromTile","uniquePropertyValue","getUniquePropertyValue","positions","ringCoordinates","getRingCoordinatesFor","getFeatureByType","parseProperties","addIntersectedFeaturesInTile","indices","getIndices","pointIndices","pathIndices","primitivePolygonIndices","getFeatureId","featureId","fields","result","id","key","assign","getValueFromTileProps","artificialId","size","propertyName","j","push","subarray","addAllFeaturesInTile","lastFeatureId","PointIndicesArray","constructor","d2r","r2d","tileToBBOX","e","tile2lon","w","s","tile2lat","n","tileToGeoJSON","poly","z","pow","pointToTile","lon","pointToTileFraction","floor","getChildren","getParent","getSiblings","hasSiblings","siblings","hasTile","tilesEqual","tile1","tile2","tileToQuadkey","index","mask","toString","quadkeyToTile","quadkey","bboxToTile","bboxCoords","min","max","getBboxZoom","MAX_ZOOM","sin","z2","tilebelt","getTiles","geom","limits","coords","maxZoom","max_zoom","tileHash","toID","lineCover","polygonCover","min_zoom","len","appendHashTiles","mergeTiles","mergedTiles","parentTileHash","parentTiles","id2","id3","id4","parentTile","tileArray","zoom","intersections","ring","k","m","sort","compareTiles","prevX","prevY","start","stop","x0","y0","x1","y1","dx","dy","sx","sy","tMaxX","Infinity","abs","tMaxY","tdx","tdy","pop","hash","fromID","dim","B","S","tileToCell","BigInt","quadbin","getResolution","geometryToCells","resolution","tileFeaturesSpatialIndex","spatialDataColumn","spatialDataType","spatialIndex","getSpatialIndex","spatialIndexIDName","cells","getCellsCoverGeometry","cellsSet","Set","forEach","d","find","QUADBIN","quadbinGetResolution","H3","h3GetResolution","bboxWest","bboxEast","polygonToCells","bboxClip","concat","V3_MINOR_VERSION","DEFAULT_GEO_COLUMN","DEFAULT_MAX_LENGTH_URL","DEFAULT_TILE_RESOLUTION","DEFAULT_AGGREGATION_RES_LEVEL_H3","DEFAULT_AGGREGATION_RES_LEVEL_QUADBIN","tileFeatures","DEFAULT_FILTER_SIZE","getDataFilterExtensionProps","filtersWithoutTimeType","timeColumn","timeFilter","getFiltersByType","filterRange","getFilterRange","updateTriggers","getUpdateTriggers","getFilterValue","columnData","typeData","filterSize","fill","offsetBy","v","JSON","stringify","featureFilter","FILTER_TYPES","isFilterType","getApplicableFilters","owner","applicableFilters","isApplicable","normalizeObjectKeys","el","reduce","acc","toLowerCase","InvalidColumnError","NAME","name","is","error","isEmptyObject","object","_","isObject","isPureObject","addFilter","removeFilter","clearFilters","hasFilter","getFilter","createViewportSpatialFilter","viewport","_isGlobalViewport","createPolygonSpatialFilter","_normalizeGeometry","minx","miny","maxx","maxy","WORLD","worldClip","_clean","geometryTxWest","_tx","geometryTxEast","worldWestClip","collection","merged","union","worldEastClip","_cleanPolygonCoords","cc","_cleanMultiPolygonCoords","ccc","_isPolygon","_isMultiPolygon","_txContourCoords","distance","_txPolygonCoords","_txMultiPolygonCoords","cccc","getType","joinPath","slice","call","arguments","part","endsWith","buildV3Path","apiBaseUrl","version","endpoint","buildPublicMapUrl","cartoMapId","buildStatsUrl","attribute","connectionName","source","buildSourceUrl","buildQueryUrl","CartoAPIError","errorContext","response","responseJson","responseString","status","requestType","formatErrorKey","toUpperCase","requestWithParameters","baseUrl","parameters","headers","customHeaders","maxLengthURL","localCache","deck","VERSION","deckglVersion","excludeURLParameters","createCacheKey","cache","REQUEST_CACHE","canReadCache","canStoreInCache","getCacheSettings","Promise","resolve","get","url","createURLWithParameters","DEFAULT_HEADERS","fetchPromise","fetch","body","jsonPromise","then","_response","json","ok","catch","delete","reject","Accept","DEFAULT_REQUEST_CACHE","cacheControl","parameterEntries","headerEntries","baseUrlString","URL","searchParams","param","baseSource","urlParameters","accessToken","optionalOptions","mergedOptions","SOURCE_DEFAULTS","clientId","format","Authorization","connection","mapInstantiation","_exit","_temp2","_result","dataUrl","parseInt","_temp","boundaryQuerySource","tilesetTableName","propertiesSqlQuery","queryParameters","boundaryTableSource","propertiesTableName","WidgetSource","props","defaultProps","_getModelSource","filterOwner","apiVersion","dataResolution","V3","WidgetBaseSource","makeCall","opts","dealWithApiError","isPost","_catch","signal","otherOptions","_fetch","_response$json","column_name","hint","AVAILABLE_MODELS","REQUEST_GET_MAX_URL_LENGTH","executeModel","model","spatialFiltersMode","queryParams","spatialFilters","urlWithSearchParams","objectToURLSearchParams","isGet","URLSearchParams","append","WidgetRemoteSource","getCategories","_this","operation","operationColumn","getModelSource","res","rows","getFeatures","_this2","abortController","dataType","limit","tileResolution","getFormula","_this3","operationExp","getHistogram","_this4","ticks","tick","getRange","_this5","getScatter","_this6","xAxisColumn","xAxisJoinOperation","yAxisColumn","yAxisJoinOperation","HARD_LIMIT","getTable","_this7","sortBy","sortDirection","offset","ROWS","totalCount","metadata","total","METADATA","TOTAL","getTimeSeries","_this8","joinOperation","stepSize","stepMultiplier","splitByCategory","splitByCategoryLimit","splitByCategoryValues","categories","WidgetQuerySource","sqlQuery","WidgetTableSource","tableName","aggregationFunctions","count","applyAggregationFunction","sum","avg","aggregate","isPotentiallyValidNumber","aggregationFn","trim","aggFn","normalizedKeys","normalizeKeys","elements","filterFalsyElements","thenBy_module","identity","ignoreCase","makeCompareFunction","opt","direction","prop","v1","uf","preprocess","cmp","v2","descTokens","desc","tb","func","firstBy","thenBy","applySorting","sortByDirection","sortByColumnType","isValidSortBy","sortFn","createSortFn","firstSortOption","othersSortOptions","normalizeSortByOptions","sortOptions","numberFormat","sortByEl","groupValuesByColumn","valuesColumns","keysColumn","groups","accumulator","item","group","aggregatedValue","isValid","targetOperation","getUTCMonday","date","dateCp","day","getUTCDay","diff","getUTCDate","setUTCDate","UTC","getUTCFullYear","getUTCMonth","GROUP_KEY_FN_MAPPING","year","month","week","hour","getUTCHours","minute","getUTCMinutes","second","getUTCSeconds","groupValuesByDateColumn","groupType","groupKeyFn","formattedValue","groupKey","isNaN","groupedValues","histogram","binsContainer","arr","bin","end","binContainer","transformedBins","scatterPlot","xAxisColumns","yAxisColumns","xValue","xIsValid","yValue","yIsValid","WidgetTilesetSource","_tiles","_features","_tileFeatureExtractOptions","_tileFeatureExtractPreviousInputs","loadTiles","setTileFeatureExtractOptions","_extractTileFeatures","prevInputs","booleanEqual","loadGeoJSON","assertColumn","filteredFeatures","_getFilteredFeatures","normalizeColumns","_ref6","searchFilterColumn","searchFilterText","row","srcRow","dstRow","_ref7","_ref8","featureKeys","invalidColumns","h3QuerySource","aggregationExp","aggregationResLevel","q","widgetSource","h3TableSource","h3TilesetSource","rasterSource","quadbinQuerySource","quadbinTableSource","quadbinTilesetSource","vectorQuerySource","vectorTableSource","vectorTilesetSource","query","DEFAULT_TILE_SIZE","BIAS","_getHexagonResolution","tileSize","zoomOffset","log2","hexagonScaleFactor","latitudeScaleFactor","cos","latitude"],"mappings":";;;;;;;;;;;AAAA;;;AAGG;AACH,IAAIA,MAAM,GAAG,eAAe,CAAA;AAE5B;;;;;AAKG;SACaC,SAASA,GAAA;AACvB,EAAA,OAAOD,MAAM,CAAA;AACf,CAAA;AAEA;;;;;AAKG;AACG,SAAUE,SAASA,CAACC,CAAS,EAAA;AACjCH,EAAAA,MAAM,GAAGG,CAAC,CAAA;AACZ;;ACxBA;;;;;;;;;;;;;AAaG;AACSC,4BAQX;AARD,CAAA,UAAYA,UAAU,EAAA;AACpBA,EAAAA,UAAA,CAAA,IAAA,CAAA,GAAA,IAAS,CAAA;AACT;AACAA,EAAAA,UAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnB;AACAA,EAAAA,UAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC3BA,EAAAA,UAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACbA,EAAAA,UAAA,CAAA,eAAA,CAAA,GAAA,cAA8B,CAAA;AAChC,CAAC,EARWA,kBAAU,KAAVA,kBAAU,GAQrB,EAAA,CAAA,CAAA,CAAA;AAED;AACYC,4BAIX;AAJD,CAAA,UAAYA,UAAU,EAAA;AACpBA,EAAAA,UAAA,CAAA,IAAA,CAAA,GAAA,IAAS,CAAA;AACTA,EAAAA,UAAA,CAAA,IAAA,CAAA,GAAA,IAAS,CAAA;AACTA,EAAAA,UAAA,CAAA,IAAA,CAAA,GAAA,IAAS,CAAA;AACX,CAAC,EAJWA,kBAAU,KAAVA,kBAAU,GAIrB,EAAA,CAAA,CAAA,CAAA;AAED;AACO,MAAMC,oBAAoB,GAAG,qCAAoC;AAExE;AACYC,4BAKX;AALD,CAAA,UAAYA,UAAU,EAAA;AACpBA,EAAAA,UAAA,CAAA,KAAA,CAAA,GAAA,KAAW,CAAA;AACXA,EAAAA,UAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACbA,EAAAA,UAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnBA,EAAAA,UAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACnB,CAAC,EALWA,kBAAU,KAAVA,kBAAU,GAKrB,EAAA,CAAA,CAAA,CAAA;AAED;AACYC,8BAIX;AAJD,CAAA,UAAYA,YAAY,EAAA;AACtBA,EAAAA,YAAA,CAAA,IAAA,CAAA,GAAA,IAAS,CAAA;AACTA,EAAAA,YAAA,CAAA,IAAA,CAAA,GAAA,IAAS,CAAA;AACTA,EAAAA,YAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACrB,CAAC,EAJWA,oBAAY,KAAZA,oBAAY,GAIvB,EAAA,CAAA,CAAA,CAAA;AAED;AACYC,0BAOX;AAPD,CAAA,UAAYA,QAAQ,EAAA;AAClBA,EAAAA,QAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;AACrBA,EAAAA,QAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;AACrBA,EAAAA,QAAA,CAAA,UAAA,CAAA,GAAA,UAAqB,CAAA;AACrBA,EAAAA,QAAA,CAAA,WAAA,CAAA,GAAA,WAAuB,CAAA;AACvBA,EAAAA,QAAA,CAAA,YAAA,CAAA,GAAA,YAAyB,CAAA;AACzBA,EAAAA,QAAA,CAAA,iBAAA,CAAA,GAAA,gBAAkC,CAAA;AACpC,CAAC,EAPWA,gBAAQ,KAARA,gBAAQ,GAOnB,EAAA,CAAA,CAAA;;ACvDK,SAAUC,oBAAoBA,CAClCC,SAA2B,EAAA;AAE3B,EAAA,OAAOA,SAAS,CAACC,GAAG,CAAEC,GAAG,IAAI;AAC3B,IAAA,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAKC,SAAS,IAAID,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;MAC3C,OAAO,CAACE,MAAM,CAACC,gBAAgB,EAAEH,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;AAC1C,KAAA;AAEA,IAAA,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAKC,SAAS,IAAID,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;MAC3C,OAAO,CAACA,GAAG,CAAC,CAAC,CAAC,EAAEE,MAAM,CAACE,gBAAgB,CAAC,CAAA;AAC1C,KAAA;AAEA,IAAA,OAAOJ,GAAG,CAAA;AACZ,GAAC,CAA6B,CAAA;AAChC;;ACNO,MAAMK,eAAe,GAAuC;AACjE,EAAA,CAACd,kBAAU,CAACe,EAAE,GAAGC,QAAQ;AACzB,EAAA,CAAChB,kBAAU,CAACiB,OAAO,GAAGC,aAAa;AACnC,EAAA,CAAClB,kBAAU,CAACmB,IAAI,GAAGC,UAAU;AAC7B,EAAA,CAACpB,kBAAU,CAACqB,WAAW,GAAGC,gBAAgB;EAC1C,CAACtB,kBAAU,CAACuB,aAAa,GAAGC,kBAAAA;EAC7B;AAED,SAASR,QAAQA,CAACS,YAAuB,EAAEC,YAAqB,EAAA;AAC9D,EAAA,OAAOD,YAAY,CAACE,QAAQ,CAACD,YAAY,CAAC,CAAA;AAC5C,CAAA;AAEA;AACA,SAASR,aAAaA,CACpBO,YAAuB,EACvBC,YAAqB,EAAA;EAErB,MAAME,UAAU,GAAIC,KAAuB,IAAI;AAC7C,IAAA,MAAM,CAACC,UAAU,EAAEC,UAAU,CAAC,GAAGF,KAAK,CAAA;AACtC,IAAA,OACGH,YAAuB,IAAII,UAAU,IACrCJ,YAAuB,IAAIK,UAAU,CAAA;GAEzC,CAAA;EAED,OAAOzB,oBAAoB,CAACmB,YAAgC,CAAC,CAACO,IAAI,CAChEJ,UAAU,CACX,CAAA;AACH,CAAA;AAEA,SAASR,UAAUA,CAACK,YAAuB,EAAEC,YAAqB,EAAA;EAChE,MAAMO,uBAAuB,GAAG,IAAIC,IAAI,CAACR,YAAsB,CAAC,CAACS,OAAO,EAAE,CAAA;AAC1E,EAAA,IAAIC,QAAQ,CAACH,uBAAuB,CAAC,EAAE;AACrC,IAAA,OAAOf,aAAa,CAACO,YAAY,EAAEQ,uBAAuB,CAAC,CAAA;AAC7D,GAAC,MAAM;AACL,IAAA,MAAM,IAAII,KAAK,CAAC,CAAA,mDAAA,CAAqD,CAAC,CAAA;AACxE,GAAA;AACF,CAAA;AAEA;AACA,SAASf,gBAAgBA,CACvBG,YAAuB,EACvBC,YAAqB,EAAA;EAErB,MAAME,UAAU,GAAIC,KAAuB,IAAI;AAC7C,IAAA,MAAM,CAACC,UAAU,EAAEC,UAAU,CAAC,GAAGF,KAAK,CAAA;AACtC,IAAA,OACGH,YAAuB,IAAII,UAAU,IACrCJ,YAAuB,GAAGK,UAAU,CAAA;GAExC,CAAA;EAED,OAAOzB,oBAAoB,CAACmB,YAAkC,CAAC,CAACO,IAAI,CAClEJ,UAAU,CACX,CAAA;AACH,CAAA;AAEA;AACA,SAASJ,kBAAkBA,CACzBC,YAAuB,EACvBC,YAAqB,EACrBY,QAAgC;AAAA,EAAA,IAAhCA;IAAAA,SAA8B,EAAE,CAAA;AAAA,GAAA;AAEhC,EAAA,MAAMC,sBAAsB,GAAGC,SAAS,CAACd,YAAY,EAAEY,MAAM,CAAC,CAAA;AAC9D,EAAA,MAAMG,YAAY,GAAGH,MAAM,CAACI,SAAS,GACjCjB,YAAY,GACZA,YAAY,CAACjB,GAAG,CAAEmC,WAAW,IAAI;IAC/B,IAAIF,YAAY,GAAGG,YAAY,CAACJ,SAAS,CAACG,WAAW,EAAEL,MAAM,CAAC,CAAC,CAAA;IAE/D,IAAIA,MAAM,CAACO,SAAS,EAAEJ,YAAY,GAAG,CAAA,CAAA,EAAIA,YAAY,CAAE,CAAA,CAAA;IACvD,IAAIH,MAAM,CAACQ,OAAO,EAAEL,YAAY,GAAG,CAAA,EAAGA,YAAY,CAAG,CAAA,CAAA,CAAA;AAErD,IAAA,OAAOA,YAAY,CAAA;AACrB,GAAC,CAAC,CAAA;AAEN,EAAA,MAAMM,KAAK,GAAG,IAAIC,MAAM,CACtBP,YAAY,CAACQ,IAAI,CAAC,GAAG,CAAC,EACtBX,MAAM,CAACY,aAAa,GAAG,GAAG,GAAG,IAAI,CAClC,CAAA;AACD,EAAA,OAAO,CAAC,CAACX,sBAAsB,CAACY,KAAK,CAACJ,KAAK,CAAC,CAAA;AAC9C,CAAA;AAEA;AACA,MAAMK,iBAAiB,GAAG,qBAAqB,CAAA;AAC/C,MAAMC,eAAe,GAAG,iBAAiB,CAAA;AAEzC,SAAST,YAAYA,CAACU,KAAa,EAAA;AACjC,EAAA,OAAOA,KAAK,CAACC,OAAO,CAACH,iBAAiB,EAAE,MAAM,CAAC,CAAA;AACjD,CAAA;AAEA,SAASZ,SAASA,CAACgB,IAAa,EAAElB,MAA2B,EAAA;AAC3D,EAAA,IAAImB,cAAc,GAAGC,MAAM,CAACF,IAAI,CAAC,CAAA;AACjC,EAAA,IAAI,CAAClB,MAAM,CAACqB,qBAAqB,EAC/BF,cAAc,GAAGA,cAAc,CAC5BjB,SAAS,CAAC,KAAK,CAAC,CAChBe,OAAO,CAACF,eAAe,EAAE,EAAE,CAAC,CAAA;AAEjC,EAAA,OAAOI,cAAc,CAAA;AACvB;;ACrGA,MAAMG,wBAAwB,GAG1B;AACFC,EAAAA,GAAG,EAAE,OAAO;AACZC,EAAAA,EAAE,EAAE,MAAA;CACL,CAAA;AAED,SAASC,YAAYA,CACnBC,OAAiB,EACjBC,OAAgB,EAChBC,OAAoB,EACpBC,sBAA6C,EAAA;AAE7C,EAAA,MAAMC,MAAM,GAAGR,wBAAwB,CAACO,sBAAsB,CAAC,CAAA;AAC/D,EAAA,OAAOH,OAAO,CAACI,MAAM,CAAC,CAAEC,MAAM,IAAI;AAChC,IAAA,MAAMC,aAAa,GAAGL,OAAO,CAACI,MAAM,CAAC,CAAA;AACrC,IAAA,MAAME,iBAAiB,GAAGC,MAAM,CAACC,IAAI,CAACH,aAAa,CAAiB,CAAA;AAEpE,IAAA,IAAI,CAACJ,OAAO,IAAIA,OAAO,CAACG,MAAM,CAAC,KAAK,IAAI,IAAIH,OAAO,CAACG,MAAM,CAAC,KAAK3D,SAAS,EAAE;AACzE,MAAA,OAAO,KAAK,CAAA;AACd,KAAA;AAEA,IAAA,OAAO6D,iBAAiB,CAACG,KAAK,CAAEC,MAAM,IAAI;AACxC,MAAA,MAAMC,cAAc,GAAG9D,eAAe,CAAC6D,MAAM,CAAC,CAAA;MAE9C,IAAI,CAACC,cAAc,EAAE;AACnB,QAAA,MAAM,IAAIvC,KAAK,CAAC,CAAIsC,CAAAA,EAAAA,MAAM,8BAA8B,CAAC,CAAA;AAC3D,OAAA;MAEA,OAAOC,cAAc,CACnBN,aAAa,CAACK,MAAM,CAAE,CAACE,MAAM,EAC7BX,OAAO,CAACG,MAAM,CAAC,EACdC,aAAa,CAACK,MAAM,CAAuC,CAACrC,MAAM,CACpE,CAAA;AACH,KAAC,CAAC,CAAA;AACJ,GAAC,CAAC,CAAA;AACJ,CAAA;AAEA;;;AAGG;AACa,SAAAwC,mBAAmBA,CAAAC,IAAA,EAQlC;EAAA,IARmC;IAClCd,OAAO,GAAG,EAAE;AACZe,IAAAA,IAAI,GAAG,SAAS;AAChBb,IAAAA,sBAAsB,GAAG,KAAA;AAK1B,GAAA,GAAAY,IAAA,CAAA;AACC,EAAA,MAAMf,OAAO,GAAGQ,MAAM,CAACC,IAAI,CAACR,OAAO,CAAC,CAAA;AAEpC,EAAA,IAAI,CAACD,OAAO,CAACiB,MAAM,EAAE;AACnB,IAAA,OAAO,MAAOD,IAAI,KAAK,QAAQ,GAAG,CAAC,GAAG,IAAK,CAAA;AAC7C,GAAA;AAEA,EAAA,OAAQd,OAA8B,IAAI;AACxC,IAAA,MAAMgB,CAAC,GAAGhB,OAAO,CAACiB,UAAU,IAAIjB,OAAO,CAAA;IACvC,MAAMkB,mBAAmB,GAAGrB,YAAY,CACtCC,OAAO,EACPC,OAAO,EACPiB,CAAgB,EAChBf,sBAAsB,CACvB,CAAA;IAED,OAAOa,IAAI,KAAK,QAAQ,GACpBrE,MAAM,CAACyE,mBAAmB,CAAC,GAC3BA,mBAAmB,CAAA;GACxB,CAAA;AACH,CAAA;AAEA;;;AAGG;SACaC,YAAYA,CAC1BC,QAAuB,EACvBrB,OAAgB,EAChBE,sBAA6C,EAAA;AAE7C,EAAA,OAAOK,MAAM,CAACC,IAAI,CAACR,OAAO,CAAC,CAACgB,MAAM,GAC9BK,QAAQ,CAACX,MAAM,CAACG,mBAAmB,CAAC;IAACb,OAAO;AAAEE,IAAAA,sBAAAA;GAAuB,CAAC,CAAC,GACvEmB,QAAQ,CAAA;AACd,CAAA;AAEA;;;AAGG;SACaC,wBAAwBA,CAAAC,KAAA,EAAmC;EAAA,IAAlC;AAACvB,IAAAA,OAAO,GAAG;AAAuB,GAAA,GAAAuB,KAAA,CAAA;AACzE,EAAA,MAAMxB,OAAO,GAAGQ,MAAM,CAACC,IAAI,CAACR,OAAO,CAAC,CAAA;AAEpC,EAAA,IAAI,CAACD,OAAO,CAACiB,MAAM,EAAE;AACnB,IAAA,OAAO,MAAM,CAAC,CAAA;AAChB,GAAA;AAEA,EAAA,OAAO,CAACQ,YAAoB,EAAEC,UAAyB,KACrDC,uBAAuB,CAAC3B,OAAO,EAAEC,OAAO,EAAEwB,YAAY,EAAEC,UAAU,CAAC,CAAA;AACvE,CAAA;AAEA,SAASE,wBAAwBA,CAC/BH,YAAoB,EACpBC,UAAyB,EAAAG,KAAA,EACC;EAAA,IAA1B;AAACxB,IAAAA,MAAAA;AAAyB,GAAA,GAAAwB,KAAA,CAAA;EAE1B,OAAOH,UAAU,CAACI,YAAY,GAAGzB,MAAM,CAAC,EAAEf,KAAK,CAACmC,YAAY,CAAC,CAAA;AAC/D,CAAA;AAEA,SAASM,sBAAsBA,CAC7BN,YAAoB,EACpBC,UAAyB,EAAAM,KAAA,EACC;EAAA,IAA1B;AAAC3B,IAAAA,MAAAA;AAAyB,GAAA,GAAA2B,KAAA,CAAA;EAE1B,MAAMC,WAAW,GAAGP,UAAU,CAACQ,UAAU,CAAC5C,KAAK,CAACmC,YAAY,CAAC,CAAA;EAC7D,OAAQC,UAAU,CAACP,UAAU,CAACc,WAAW,CAA6B,GACpE5B,MAAM,CACP,CAAA;AACH,CAAA;AAEA,MAAM8B,wBAAwB,GAAG;AAC/BhB,EAAAA,UAAU,EAAEY,sBAAsB;AAClCD,EAAAA,YAAY,EAAEF,wBAAAA;CACf,CAAA;AAED,SAASQ,+BAA+BA,CAAC3E,YAAuB,EAAA;AAC9D,EAAA,OAAO,OAAOA,YAAY,CAAC4E,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,QAAQ,GAC7C,YAAY,GACZ,cAAc,CAAA;AACpB,CAAA;AAEA,SAASC,eAAeA,CACtBb,YAAoB,EACpBC,UAAe,EACff,MAA6D,EAAA;EAE7D,MAAM;IAACN,MAAM;AAAEQ,IAAAA,MAAAA;AAAO,GAAA,GAAGF,MAAM,CAAA;AAC/B,EAAA,MAAM4B,UAAU,GAAGH,+BAA+B,CAACvB,MAAM,CAAC,CAAA;AAC1D,EAAA,MAAM2B,iBAAiB,GAAGL,wBAAwB,CAACI,UAAU,CAAC,CAAA;AAC9D,EAAA,OAAOC,iBAAiB,CAACf,YAAY,EAAEC,UAAU,EAAE;AAACrB,IAAAA,MAAAA;AAAO,GAAA,CAAC,CAAA;AAC9D,CAAA;AAEA,SAASsB,uBAAuBA,CAC9B3B,OAAiB,EACjBC,OAAgB,EAChBwB,YAAoB,EACpBC,UAAyB,EAAA;AAEzB,EAAA,OAAO1B,OAAO,CAACU,KAAK,CAAEL,MAAM,IAAI;AAC9B,IAAA,MAAMC,aAAa,GAAGL,OAAO,CAACI,MAAM,CAAC,CAAA;IAErC,OAAOG,MAAM,CAACiC,OAAO,CAACnC,aAAa,CAAC,CAACI,KAAK,CAACgC,KAAA,IAAqB;MAAA,IAApB,CAAC1B,IAAI,EAAE;AAACH,QAAAA,MAAAA;OAAO,CAAC,GAAA6B,KAAA,CAAA;AAC1D,MAAA,MAAMC,QAAQ,GAAG7F,eAAe,CAACkE,IAAkB,CAAC,CAAA;MACpD,IAAI,CAAC2B,QAAQ,EAAE;AACb,QAAA,MAAM,IAAItE,KAAK,CAAC,CAAI2C,CAAAA,EAAAA,IAAI,8BAA8B,CAAC,CAAA;AACzD,OAAA;AAEA,MAAA,IAAI,CAACH,MAAM,EAAE,OAAO,CAAC,CAAA;AAErB,MAAA,MAAMnD,YAAY,GAAG4E,eAAe,CAACb,YAAY,EAAEC,UAAU,EAAE;AAC7DV,QAAAA,IAAI,EAAEA,IAAkB;QACxBX,MAAM;AACNQ,QAAAA,MAAAA;AACD,OAAA,CAAC,CAAA;MAEF,IAAInD,YAAY,KAAKhB,SAAS,IAAIgB,YAAY,KAAK,IAAI,EAAE,OAAO,CAAC,CAAA;AAEjE,MAAA,OAAOiF,QAAQ,CAAC9B,MAAM,EAAEnD,YAAY,CAAC,CAAA;AACvC,KAAC,CAAC,CAAA;AACJ,GAAC,CAAC,CAAA;AACJ;;AC7KM,SAAUkF,eAAeA,CAAA7B,IAAA,EAQ9B;EAAA,IAR+B;IAC9B8B,OAAO;IACPC,aAAa;AACbC,IAAAA,gBAAAA;AAKD,GAAA,GAAAhC,IAAA,CAAA;EACC,IAAIiC,SAAS,GAAG,CAAC,CAAA;AACjB,EAAA,MAAMxG,GAAG,GAAG,IAAIyG,GAAG,EAAE,CAAA;EAErB,IAAI,CAACH,aAAa,EAAE;AAClB,IAAA,OAAO,EAAE,CAAA;AACX,GAAA;AAEA,EAAA,KAAK,MAAM5C,OAAO,IAAI2C,OAAO,CAACvB,QAAQ,EAAE;AACtC,IAAA,MAAM4B,QAAQ,GAAGH,gBAAgB,GAC7B7C,OAAO,CAACiB,UAAW,CAAC4B,gBAAgB,CAAC,GACrC,EAAEC,SAAS,CAAA;AACf,IAAA,IAAI,CAACxG,GAAG,CAAC2G,GAAG,CAACD,QAAQ,CAAC,IAAIE,UAAU,CAACN,aAAa,EAAE5C,OAAO,CAAC,EAAE;MAC5D1D,GAAG,CAAC6G,GAAG,CAACH,QAAQ,EAAEhD,OAAO,CAACiB,UAAU,CAAC,CAAA;AACvC,KAAA;AACF,GAAA;EAEA,OAAOmC,KAAK,CAACC,IAAI,CAAC/G,GAAG,CAACqE,MAAM,EAAE,CAAC,CAAA;AACjC;;AC/BA;AACA;AACA;AAqBA,MAAM2C,cAAc,GAAmC;AACrDC,EAAAA,OAAO,EAAE,KAAK;AACdC,EAAAA,KAAK,EAAE,KAAK;AACZC,EAAAA,SAAS,EAAE,CAAC;AACZC,EAAAA,UAAU,EAAE,KAAK;AACjBC,EAAAA,YAAY,EAAE,KAAK;AACnBC,EAAAA,aAAa,EAAE,IAAI;AACnBC,EAAAA,oBAAoB,EAAE,KAAA;AACvB,CAAA,CAAA;AAUD;AACA;AACAC,UAAU,CAACC,MAAM,GAAGD,UAAU,CAACC,MAAM,IAAI;AAACC,EAAAA,MAAM,EAAE;IAAC,GAAGV,cAAAA;AAAc,GAAA;AAAC,CAAC,CAAA;AAyBtE;;;;;;AAMM,SAAUW,OAAOA,CAAC7E,KAAc,EAAA;AACpC,EAAA,OAAOgE,KAAK,CAACa,OAAO,CAAC7E,KAAK,CAAC,IAAK8E,WAAW,CAACC,MAAM,CAAC/E,KAAK,CAAC,IAAI,EAAEA,KAAK,YAAYgF,QAAQ,CAAE,CAAA;AAC5F,CAAA;AAoHM,SAAUC,IAAIA,CAClBC,CAAwB,EACxBC,CAAwB,EACxBC,CAAS,EAAA;AAET,EAAA,IAAIP,OAAO,CAACK,CAAC,CAAC,EAAE;IACd,OAAQA,CAAkB,CAAChI,GAAG,CAAC,CAACmI,EAAU,EAAEC,CAAS,KAAKL,IAAI,CAACI,EAAE,EAAGF,CAAkB,CAACG,CAAC,CAAC,EAAEF,CAAC,CAAC,CAAC,CAAA;AAChG,GAAA;EACA,OAAOA,CAAC,GAAID,CAAY,GAAG,CAAC,CAAC,GAAGC,CAAC,IAAKF,CAAY,CAAA;AACpD;;ACzMA;AACA;AACA;AACM,SAAUK,QAAMA,CAACC,SAAkB,EAAEC,OAAgB,EAAA;EACzD,IAAI,CAACD,SAAS,EAAE;AACd,IAAA,MAAM,IAAIzG,KAAK,CAAC0G,OAAO,IAAI,0CAA0C,CAAC,CAAA;AACxE,GAAA;AACF;;ACPA;AAOA;AACA,MAAMC,EAAE,GAAGC,IAAI,CAACD,EAAE,CAAA;AAClB,MAAME,IAAI,GAAGF,EAAE,GAAG,CAAC,CAAA;AACnB,MAAMG,kBAAkB,GAAGH,EAAE,GAAG,GAAG,CAAA;AACnC,MAAMI,kBAAkB,GAAG,GAAG,GAAGJ,EAAE,CAAA;AACnC,MAAMK,SAAS,GAAG,GAAG,CAAA;AA8CrB;;;;;;;;;;AAUM,SAAUC,aAAaA,CAACC,MAAgB,EAAA;AAC5C,EAAA,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGF,MAAM,CAAA;AACzBV,EAAAA,QAAM,CAAClI,MAAM,CAACyB,QAAQ,CAACoH,GAAG,CAAC,CAAC,CAAA;AAC5BX,EAAAA,QAAM,CAAClI,MAAM,CAACyB,QAAQ,CAACqH,GAAG,CAAC,IAAIA,GAAG,IAAI,CAAC,EAAE,IAAIA,GAAG,IAAI,EAAE,EAAE,kBAAkB,CAAC,CAAA;AAE3E,EAAA,MAAMC,OAAO,GAAGF,GAAG,GAAGL,kBAAkB,CAAA;AACxC,EAAA,MAAMQ,IAAI,GAAGF,GAAG,GAAGN,kBAAkB,CAAA;AACrC,EAAA,MAAMS,CAAC,GAAIP,SAAS,IAAIK,OAAO,GAAGV,EAAE,CAAC,IAAK,CAAC,GAAGA,EAAE,CAAC,CAAA;EACjD,MAAMa,CAAC,GAAIR,SAAS,IAAIL,EAAE,GAAGC,IAAI,CAACa,GAAG,CAACb,IAAI,CAACc,GAAG,CAACb,IAAI,GAAGS,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,IAAK,CAAC,GAAGX,EAAE,CAAC,CAAA;AAC/E,EAAA,OAAO,CAACY,CAAC,EAAEC,CAAC,CAAC,CAAA;AACf,CAAA;AAEA;;;;;;;;;AASM,SAAUG,aAAaA,CAACC,EAAY,EAAA;AACxC,EAAA,MAAM,CAACL,CAAC,EAAEC,CAAC,CAAC,GAAGI,EAAE,CAAA;EACjB,MAAMP,OAAO,GAAIE,CAAC,GAAGP,SAAS,IAAK,CAAC,GAAGL,EAAE,CAAC,GAAGA,EAAE,CAAA;EAC/C,MAAMW,IAAI,GAAG,CAAC,IAAIV,IAAI,CAACiB,IAAI,CAACjB,IAAI,CAACkB,GAAG,CAAEN,CAAC,GAAGR,SAAS,IAAK,CAAC,GAAGL,EAAE,CAAC,GAAGA,EAAE,CAAC,CAAC,GAAGE,IAAI,CAAC,CAAA;EAC9E,OAAO,CAACQ,OAAO,GAAGN,kBAAkB,EAAEO,IAAI,GAAGP,kBAAkB,CAAC,CAAA;AAClE;;ACzFA,MAAMgB,cAAY,GAGd;AACFC,EAAAA,KAAK,EAAEC,gBAAc;AACrBC,EAAAA,UAAU,EAAEC,qBAAmB;AAC/BC,EAAAA,UAAU,EAAEC,qBAAmB;AAC/BC,EAAAA,eAAe,EAAEC,0BAAwB;AACzCC,EAAAA,OAAO,EAAEC,kBAAgB;AACzBC,EAAAA,YAAY,EAAEC,uBAAAA;CACf,CAAA;AAED;;;;;;AAMG;AACa,SAAAC,qBAAqBA,CACnCC,QAAW,EACXC,IAAU,EAAA;EAEV,MAAM,CAACC,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,CAAC,GAAGJ,IAAI,CAAA;EACvC,MAAMK,EAAE,GAAGC,WAAW,CAAC,CAACL,IAAI,EAAEG,KAAK,CAAC,CAAC,CAAA;EACrC,MAAMG,EAAE,GAAGD,WAAW,CAAC,CAACH,IAAI,EAAED,KAAK,CAAC,CAAC,CAAA;AACrC,EAAA,MAAMM,aAAa,GAAG,CAACH,EAAE,EAAEE,EAAE,CAAC,CAAA;AAE9B,EAAA,IAAIR,QAAQ,CAAClG,IAAI,KAAK,oBAAoB,EAAE;AAC1C,IAAA,MAAM,IAAI3C,KAAK,CAAC,8CAA8C,CAAC,CAAA;AACjE,GAAA;AAEA,EAAA,MAAMuJ,WAAW,GAAGxB,cAAY,CAACc,QAAQ,CAAClG,IAAI,CAAC,CAAA;EAC/C,MAAM6G,WAAW,GAAGD,WAAW,CAACV,QAAQ,CAACW,WAAW,EAAEF,aAAa,CAAC,CAAA;EACpE,OAAO;AAAC,IAAA,GAAGT,QAAQ;AAAEW,IAAAA,WAAAA;GAAY,CAAA;AACnC,CAAA;AAEA,SAASvB,gBAAcA,CAAAvF,IAAA,EAAAS,KAAA,EAAiD;AAAA,EAAA,IAAhD,CAACsG,MAAM,EAAEC,MAAM,CAAW,GAAAhH,IAAA,CAAA;AAAA,EAAA,IAAE,CAACyG,EAAE,EAAEE,EAAE,CAAa,GAAAlG,KAAA,CAAA;AACtE,EAAA,MAAMoE,CAAC,GAAGoC,WAAW,CAACR,EAAE,CAAC,CAAC,CAAC,EAAEE,EAAE,CAAC,CAAC,CAAC,EAAEI,MAAM,CAAC,CAAA;AAC3C,EAAA,MAAMjC,CAAC,GAAGmC,WAAW,CAACR,EAAE,CAAC,CAAC,CAAC,EAAEE,EAAE,CAAC,CAAC,CAAC,EAAEK,MAAM,CAAC,CAAA;AAE3C,EAAA,OAAO,CAACnC,CAAC,EAAEC,CAAC,CAAC,CAAA;AACf,CAAA;AAEA,SAASoC,WAASA,CAACf,QAAoB,EAAEC,IAAgB,EAAA;AACvD,EAAA,OAAOD,QAAQ,CAAC1K,GAAG,CAAE0L,CAAC,IAAK5B,gBAAc,CAACmB,WAAW,CAACS,CAAC,CAAC,EAAEf,IAAI,CAAC,CAAC,CAAA;AAClE,CAAA;AAEA,SAASX,qBAAmBA,CAAC2B,UAAsB,EAAEhB,IAAgB,EAAA;AACnE,EAAA,OAAOc,WAAS,CAACE,UAAU,EAAEhB,IAAI,CAAC,CAAA;AACpC,CAAA;AAEA,SAAST,qBAAmBA,CAAC0B,IAAgB,EAAEjB,IAAgB,EAAA;AAC7D,EAAA,OAAOc,WAAS,CAACG,IAAI,EAAEjB,IAAI,CAAC,CAAA;AAC9B,CAAA;AAEA,SAASP,0BAAwBA,CAC/ByB,eAA6B,EAC7BlB,IAAgB,EAAA;AAEhB,EAAA,OAAOkB,eAAe,CAAC7L,GAAG,CAAE8L,UAAU,IACpC5B,qBAAmB,CAAC4B,UAAU,EAAEnB,IAAI,CAAC,CACtC,CAAA;AACH,CAAA;AAEA,SAASL,kBAAgBA,CAACyB,OAAqB,EAAEpB,IAAgB,EAAA;AAC/D,EAAA,OAAOoB,OAAO,CAAC/L,GAAG,CAAEgM,WAAW,IAAKP,WAAS,CAACO,WAAW,EAAErB,IAAI,CAAC,CAAC,CAAA;AACnE,CAAA;AAEA,SAASH,uBAAqBA,CAACyB,YAA4B,EAAEtB,IAAgB,EAAA;AAC3E,EAAA,OAAOsB,YAAY,CAACjM,GAAG,CAAE+L,OAAO,IAAKzB,kBAAgB,CAACyB,OAAO,EAAEpB,IAAI,CAAC,CAAC,CAAA;AACvE,CAAA;AAEA,SAASM,WAAWA,CAACiB,GAAa,EAAA;EAChC,OAAOpD,aAAa,CAACoD,GAAG,CAAC,CAAA;AAC3B,CAAA;AAEA,SAASV,WAAWA,CAACxD,CAAS,EAAEC,CAAS,EAAEmB,CAAS,EAAA;EAClD,OAAO,CAACA,CAAC,GAAGpB,CAAC,KAAKC,CAAC,GAAGD,CAAC,CAAC,CAAA;AAC1B;;AC9EA,MAAM4B,YAAY,GAGd;AACFC,EAAAA,KAAK,EAAEC,cAAc;AACrBC,EAAAA,UAAU,EAAEC,mBAAmB;AAC/BC,EAAAA,UAAU,EAAEC,mBAAmB;AAC/BC,EAAAA,eAAe,EAAEC,wBAAwB;AACzCC,EAAAA,OAAO,EAAEC,gBAAgB;AACzBC,EAAAA,YAAY,EAAEC,qBAAAA;CACf,CAAA;AAED;;;;;AAKG;AACa,SAAA2B,0BAA0BA,CACxCzB,QAAW,EACXC,IAAU,EAAA;EAEV,MAAM,CAACC,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,CAAC,GAAGJ,IAAI,CAAA;EACvC,MAAMK,EAAE,GAAGlC,aAAa,CAAC,CAAC8B,IAAI,EAAEG,KAAK,CAAC,CAAC,CAAA;EACvC,MAAMG,EAAE,GAAGpC,aAAa,CAAC,CAACgC,IAAI,EAAED,KAAK,CAAC,CAAC,CAAA;AACvC,EAAA,MAAMM,aAAa,GAAG,CAACH,EAAE,EAAEE,EAAE,CAAC,CAAA;AAE9B,EAAA,IAAIR,QAAQ,CAAClG,IAAI,KAAK,oBAAoB,EAAE;AAC1C,IAAA,MAAM,IAAI3C,KAAK,CAAC,8CAA8C,CAAC,CAAA;AACjE,GAAA;AAEA,EAAA,MAAMuJ,WAAW,GAAGxB,YAAY,CAACc,QAAQ,CAAClG,IAAI,CAAC,CAAA;EAC/C,MAAM6G,WAAW,GAAGD,WAAW,CAACV,QAAQ,CAACW,WAAW,EAAEF,aAAa,CAAC,CAAA;EACpE,OAAO;AAAC,IAAA,GAAGT,QAAQ;AAAEW,IAAAA,WAAAA;GAAY,CAAA;AACnC,CAAA;AAEA,SAASvB,cAAcA,CAAAvF,IAAA,EAAAS,KAAA,EAAiD;AAAA,EAAA,IAAhD,CAACsG,MAAM,EAAEC,MAAM,CAAW,GAAAhH,IAAA,CAAA;AAAA,EAAA,IAAE,CAACyG,EAAE,EAAEE,EAAE,CAAa,GAAAlG,KAAA,CAAA;AACtE,EAAA,MAAMoE,CAAC,GAAGrB,IAAI,CAACiD,EAAE,CAAC,CAAC,CAAC,EAAEE,EAAE,CAAC,CAAC,CAAC,EAAEI,MAAM,CAAC,CAAA;AACpC,EAAA,MAAMjC,CAAC,GAAGtB,IAAI,CAACiD,EAAE,CAAC,CAAC,CAAC,EAAEE,EAAE,CAAC,CAAC,CAAC,EAAEK,MAAM,CAAC,CAAA;AAEpC,EAAA,OAAO/B,aAAa,CAAC,CAACJ,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAA;AAC9B,CAAA;AAEA,SAASoC,SAASA,CAACf,QAAoB,EAAEC,IAAgB,EAAA;AACvD,EAAA,OAAOD,QAAQ,CAAC1K,GAAG,CAAE0L,CAAC,IAAK5B,cAAc,CAAC4B,CAAC,EAAEf,IAAI,CAAC,CAAC,CAAA;AACrD,CAAA;AAEA,SAASX,mBAAmBA,CAAC2B,UAAsB,EAAEhB,IAAgB,EAAA;AACnE,EAAA,OAAOc,SAAS,CAACE,UAAU,EAAEhB,IAAI,CAAC,CAAA;AACpC,CAAA;AAEA,SAAST,mBAAmBA,CAAC0B,IAAgB,EAAEjB,IAAgB,EAAA;AAC7D,EAAA,OAAOc,SAAS,CAACG,IAAI,EAAEjB,IAAI,CAAC,CAAA;AAC9B,CAAA;AAEA,SAASP,wBAAwBA,CAC/ByB,eAA6B,EAC7BlB,IAAgB,EAAA;AAEhB,EAAA,OAAOkB,eAAe,CAAC7L,GAAG,CAAE8L,UAAU,IACpC5B,mBAAmB,CAAC4B,UAAU,EAAEnB,IAAI,CAAC,CACtC,CAAA;AACH,CAAA;AAEA,SAASL,gBAAgBA,CAACyB,OAAqB,EAAEpB,IAAgB,EAAA;AAC/D,EAAA,OAAOoB,OAAO,CAAC/L,GAAG,CAAEgM,WAAW,IAAKP,SAAS,CAACO,WAAW,EAAErB,IAAI,CAAC,CAAC,CAAA;AACnE,CAAA;AAEA,SAASH,qBAAqBA,CAACyB,YAA4B,EAAEtB,IAAgB,EAAA;AAC3E,EAAA,OAAOsB,YAAY,CAACjM,GAAG,CAAE+L,OAAO,IAAKzB,gBAAgB,CAACyB,OAAO,EAAEpB,IAAI,CAAC,CAAC,CAAA;AACvE;;AC/CO,MAAMyB,qBAAqB,GAAG,cAAa;AAUlC,SAAAC,sBAAsBA,CAAA9H,IAAA,EAYrC;EAAA,IAZsC;IACrC+H,KAAK;IACLC,UAAU;IACVjG,aAAa;IACbC,gBAAgB;AAChBiG,IAAAA,OAAAA;AAOD,GAAA,GAAAjI,IAAA,CAAA;AACC,EAAA,MAAMvE,GAAG,GAAG,IAAIyG,GAAG,EAAE,CAAA;AAErB,EAAA,KAAK,MAAMgG,IAAI,IAAIH,KAAK,EAAE;AACxB;AACA;IACA,IAAIG,IAAI,CAACC,SAAS,KAAK,KAAK,IAAI,CAACD,IAAI,CAACzJ,IAAI,EAAE;AAC1C,MAAA,SAAA;AACF,KAAA;IAEA,MAAM2H,IAAI,GAAG,CACX8B,IAAI,CAAC9B,IAAI,CAACC,IAAI,EACd6B,IAAI,CAAC9B,IAAI,CAACE,KAAK,EACf4B,IAAI,CAAC9B,IAAI,CAACG,IAAI,EACd2B,IAAI,CAAC9B,IAAI,CAACI,KAAK,CACR,CAAA;AACT,IAAA,MAAM4B,UAAU,GAAGC,WAAW,CAACjC,IAAI,CAAC,CAAA;AACpC,IAAA,MAAMkC,kBAAkB,GAAGC,aAAa,CAACH,UAAU,EAAErG,aAAa,CAAC,CAAA;AAEnE;AACA,IAAA,MAAMyG,oBAAoB,GAAoC;AAC5DvI,MAAAA,IAAI,EAAE,SAAS;AACfkG,MAAAA,QAAQ,EAAEpE,aAAa;AACvB3B,MAAAA,UAAU,EAAE,EAAE;KACf,CAAA;AACD,IAAA,MAAMqI,0BAA0B,GAAGC,SAAS,CAC1CC,yBAAiB,CAAC,CAACP,UAAU,EAAEI,oBAAoB,CAAC,CAAC,CACtD,CAAA;IAED,IAAI,CAACC,0BAA0B,EAAE;AAC/B,MAAA,SAAA;AACF,KAAA;AAEA;AACA;AACA,IAAA,MAAMG,8BAA8B,GAClCZ,UAAU,KAAK5M,kBAAU,CAACyN,GAAG,GACzB3C,qBAAqB,CAACuC,0BAA0B,CAACtC,QAAQ,EAAEC,IAAI,CAAC,GAChEqC,0BAA0B,CAACtC,QAAQ,CAAA;AAEzC2C,IAAAA,sBAAsB,CAACZ,IAAI,CAACzJ,IAAI,CAACsK,MAAO,CAAC,CAAA;AAEzCC,IAAAA,iBAAiB,CAAC;MAChBvN,GAAG;MACH6M,kBAAkB;AAClBW,MAAAA,oBAAoB,EAAEL,8BAA8B;AACpDnK,MAAAA,IAAI,EAAEyJ,IAAI,CAACzJ,IAAI,CAACsK,MAAO;AACvB9I,MAAAA,IAAI,EAAE,OAAO;MACbmG,IAAI;MACJ4B,UAAU;MACVhG,gBAAgB;AAChBiG,MAAAA,OAAAA;AACD,KAAA,CAAC,CAAA;AACFe,IAAAA,iBAAiB,CAAC;MAChBvN,GAAG;MACH6M,kBAAkB;AAClBW,MAAAA,oBAAoB,EAAEL,8BAA8B;AACpDnK,MAAAA,IAAI,EAAEyJ,IAAI,CAACzJ,IAAI,CAACyK,KAAM;AACtBjJ,MAAAA,IAAI,EAAE,YAAY;MAClBmG,IAAI;MACJ4B,UAAU;MACVhG,gBAAgB;AAChBiG,MAAAA,OAAAA;AACD,KAAA,CAAC,CAAA;AACFe,IAAAA,iBAAiB,CAAC;MAChBvN,GAAG;MACH6M,kBAAkB;AAClBW,MAAAA,oBAAoB,EAAEL,8BAA8B;AACpDnK,MAAAA,IAAI,EAAEyJ,IAAI,CAACzJ,IAAI,CAAC0K,QAAS;AACzBlJ,MAAAA,IAAI,EAAE,SAAS;MACfmG,IAAI;MACJ4B,UAAU;MACVhG,gBAAgB;AAChBiG,MAAAA,OAAAA;AACD,KAAA,CAAC,CAAA;AACJ,GAAA;EACA,OAAO1F,KAAK,CAACC,IAAI,CAAC/G,GAAG,CAACqE,MAAM,EAAE,CAAC,CAAA;AACjC,CAAA;AAEA,SAASsJ,4BAA4BA,CAAA3I,KAAA,EAsBpC;EAAA,IAtBqC;IACpChF,GAAG;IACHgD,IAAI;IACJ4K,UAAU;IACVC,QAAQ;IACRrJ,IAAI;IACJmG,IAAI;IACJ4B,UAAU;IACVhG,gBAAgB;IAChBuH,aAAa;AACbN,IAAAA,oBAAAA;AAYD,GAAA,GAAAxI,KAAA,CAAA;AACC,EAAA,MAAM+I,SAAS,GAAGC,qBAAqB,CAAChL,IAAI,EAAE4K,UAAU,CAAC,CAAA;EACzD,MAAMK,mBAAmB,GAAGC,sBAAsB,CAChDH,SAAS,EACTxH,gBAAgB,EAChBvG,GAAG,CACJ,CAAA;EAED,IAAI,CAACiO,mBAAmB,IAAIjO,GAAG,CAAC2G,GAAG,CAACsH,mBAAmB,CAAC,EAAE;AACxD,IAAA,OAAA;AACF,GAAA;EACA,IAAIvD,QAAQ,GAAoB,IAAI,CAAA;AAEpC;EACA,IAAIoD,aAAa,IAAIN,oBAAoB,EAAE;IACzC,MAAM;AAACW,MAAAA,SAAAA;AAAU,KAAA,GAAGnL,IAAI,CAAA;IACxB,MAAMoL,eAAe,GAAGC,qBAAqB,CAC3CT,UAAU,EACVC,QAAQ,EACRM,SAAS,CACV,CAAA;AACDzD,IAAAA,QAAQ,GAAG4D,gBAAgB,CAACF,eAAe,EAAE5J,IAAI,CAAC,CAAA;AACpD,GAAA;AAEA;EACA,IACEkG,QAAQ,IACR8C,oBAAoB,IACpB,CAAC5G,UAAU,CAAC8D,QAAQ,EAAE8C,oBAAoB,CAAC,EAC3C;AACA,IAAA,OAAA;AACF,GAAA;AAEA,EAAA,MAAM7I,UAAU,GAAG4J,eAAe,CAACR,SAAS,CAAC,CAAA;AAE7C;EACA,IAAID,aAAa,IAAIpD,QAAQ,EAAE;AAC7B/F,IAAAA,UAAU,CAACyH,qBAAqB,CAAC,GAC/BG,UAAU,KAAK5M,kBAAU,CAACyN,GAAG,GACzBjB,0BAA0B,CAACzB,QAAQ,EAAEC,IAAI,CAAC,GAC1CD,QAAQ,CAAA;AAChB,GAAA;AACA1K,EAAAA,GAAG,CAAC6G,GAAG,CAACoH,mBAAmB,EAAEtJ,UAAU,CAAC,CAAA;AAC1C,CAAA;AAEA,SAAS6J,4BAA4BA,CAAAnJ,KAAA,EAkBpC;EAAA,IAlBqC;IACpCrF,GAAG;IACHgD,IAAI;IACJwK,oBAAoB;IACpBhJ,IAAI;IACJmG,IAAI;IACJ4B,UAAU;IACVhG,gBAAgB;AAChBiG,IAAAA,OAAAA;AAUD,GAAA,GAAAnH,KAAA,CAAA;AACC,EAAA,MAAMoJ,OAAO,GAAGC,UAAU,CAAC1L,IAAI,CAAC,CAAA;AAChC,EAAA,MAAM8K,aAAa,GAAGtB,OAAO,EAAEsB,aAAa,IAAI,KAAK,CAAA;AAErD,EAAA,KAAK,IAAI1F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqG,OAAO,CAAChK,MAAM,GAAG,CAAC,EAAE2D,CAAC,EAAE,EAAE;AAC3C,IAAA,MAAMwF,UAAU,GAAGa,OAAO,CAACrG,CAAC,CAAC,CAAA;AAC7B,IAAA,MAAMyF,QAAQ,GAAGY,OAAO,CAACrG,CAAC,GAAG,CAAC,CAAC,CAAA;AAC/BuF,IAAAA,4BAA4B,CAAC;MAC3B3N,GAAG;MACHgD,IAAI;MACJ4K,UAAU;MACVC,QAAQ;MACRrJ,IAAI;MACJmG,IAAI;MACJ4B,UAAU;MACVhG,gBAAgB;MAChBuH,aAAa;AACbN,MAAAA,oBAAAA;AACD,KAAA,CAAC,CAAA;AACJ,GAAA;AACF,CAAA;AAEA,SAASkB,UAAUA,CAAC1L,IAAmB,EAAA;AACrC,EAAA,IAAIyL,OAAwB,CAAA;EAC5B,QAAQzL,IAAI,CAACwB,IAAI;AACf,IAAA,KAAK,OAAO;AACV;MACAiK,OAAO,GAAGzL,IAAI,CAAC2L,YAAY,CAAA;AAC3B,MAAA,MAAA;AACF,IAAA,KAAK,YAAY;MACfF,OAAO,GAAGzL,IAAI,CAAC4L,WAAW,CAAA;AAC1B,MAAA,MAAA;AACF,IAAA,KAAK,SAAS;MACZH,OAAO,GAAGzL,IAAI,CAAC6L,uBAAuB,CAAA;AACtC,MAAA,MAAA;AACF,IAAA;MACE,MAAM,IAAIhN,KAAK,CAAC,CAAA,kBAAA,EAAsBmB,IAAsB,CAACwB,IAAI,GAAG,CAAC,CAAA;AACzE,GAAA;EACA,OAAOiK,OAAO,CAAC3L,KAAK,CAAA;AACtB,CAAA;AAEA,SAASgM,YAAYA,CAAC9L,IAAmB,EAAE4K,UAAkB,EAAA;AAC3D,EAAA,OAAO5K,IAAI,CAAC0C,UAAU,CAAC5C,KAAK,CAAC8K,UAAU,CAAC,CAAA;AAC1C,CAAA;AAEA,SAASI,qBAAqBA,CAAChL,IAAmB,EAAE4K,UAAkB,EAAA;AACpE,EAAA,MAAMmB,SAAS,GAAGD,YAAY,CAAC9L,IAAI,EAAE4K,UAAU,CAAC,CAAA;EAChD,MAAM;IAACjJ,UAAU;IAAEW,YAAY;AAAE0J,IAAAA,MAAAA;AAAM,GAAC,GAAGhM,IAAI,CAAA;AAC/C,EAAA,MAAMiM,MAAM,GAAqB;AAC/BvI,IAAAA,QAAQ,EAAGsI,MAAM,GAAGD,SAAS,CAA2B,EAAEG,EAAE;AAC5DvK,IAAAA,UAAU,EAAEA,UAAU,CAACoK,SAAS,CAAC;AACjCzJ,IAAAA,YAAY,EAAE,EAAE;GACjB,CAAA;AAED,EAAA,KAAK,MAAM6J,GAAG,IAAI7J,YAAY,EAAE;AAC9B2J,IAAAA,MAAM,CAAC3J,YAAY,CAAC6J,GAAG,CAAC,GAAG7J,YAAY,CAAC6J,GAAG,CAAC,CAACrM,KAAK,CAAC8K,UAAU,CAAC,CAAA;AAChE,GAAA;AAEA,EAAA,OAAOqB,MAAM,CAAA;AACf,CAAA;AAEA,SAASV,eAAeA,CAACR,SAA2B,EAAA;EAClD,MAAM;IAACpJ,UAAU;AAAEW,IAAAA,YAAAA;AAAa,GAAA,GAAGyI,SAAS,CAAA;EAC5C,OAAO/J,MAAM,CAACoL,MAAM,CAAC,EAAE,EAAEzK,UAAU,EAAEW,YAAY,CAAC,CAAA;AACpD,CAAA;AAEA,SAAS4I,sBAAsBA,CAC7BH,SAA2B,EAC3BxH,gBAAoC,EACpCvG,GAAY,EAAA;AAEZ,EAAA,IAAIuG,gBAAgB,EAAE;AACpB,IAAA,OAAO8I,qBAAqB,CAACtB,SAAS,EAAExH,gBAAgB,CAAC,CAAA;AAC3D,GAAA;EAEA,IAAIwH,SAAS,CAACrH,QAAQ,EAAE;IACtB,OAAOqH,SAAS,CAACrH,QAAQ,CAAA;AAC3B,GAAA;EAEA,MAAM4I,YAAY,GAAGtP,GAAG,CAACuP,IAAI,GAAG,CAAC,CAAC;AAClC,EAAA,OACEF,qBAAqB,CAACtB,SAAS,EAAE,YAAY,CAAC,IAC9CsB,qBAAqB,CAACtB,SAAS,EAAE,OAAO,CAAC,IACzCuB,YAAY,CAAA;AAEhB,CAAA;AAEA,SAASD,qBAAqBA,CAC5BtB,SAA2B,EAC3ByB,YAAoB,EAAA;EAEpB,MAAM;IAAC7K,UAAU;AAAEW,IAAAA,YAAAA;AAAa,GAAA,GAAGyI,SAAS,CAAA;EAC5C,OAAOzI,YAAY,CAACkK,YAAY,CAAC,IAAI7K,UAAU,CAAC6K,YAAY,CAAC,CAAA;AAC/D,CAAA;AAEA,SAASlB,gBAAgBA,CACvBjD,WAAuB,EACvB7G,IAAwB,EAAA;AAExB,EAAA,QAAQA,IAAI;AACV,IAAA,KAAK,SAAS;MACZ,OAAO;AAACA,QAAAA,IAAI,EAAE,SAAS;QAAE6G,WAAW,EAAE,CAACA,WAAW,CAAA;OAAE,CAAA;AACtD,IAAA,KAAK,YAAY;MACf,OAAO;AAAC7G,QAAAA,IAAI,EAAE,YAAY;AAAE6G,QAAAA,WAAAA;OAAY,CAAA;AAC1C,IAAA,KAAK,OAAO;MACV,OAAO;AAAC7G,QAAAA,IAAI,EAAE,OAAO;QAAE6G,WAAW,EAAEA,WAAW,CAAC,CAAC,CAAA;OAAE,CAAA;AACrD,IAAA;AACE,MAAA,MAAM,IAAIxJ,KAAK,CAAC,uBAAuB,CAAC,CAAA;AAC5C,GAAA;AACF,CAAA;AAEA,SAASwM,qBAAqBA,CAC5BT,UAAkB,EAClBC,QAAgB,EAChBM,SAA0B,EAAA;EAE1B,MAAMC,eAAe,GAAG,EAAE,CAAA;EAE1B,KAAK,IAAIqB,CAAC,GAAG7B,UAAU,EAAE6B,CAAC,GAAG5B,QAAQ,EAAE4B,CAAC,EAAE,EAAE;AAC1CrB,IAAAA,eAAe,CAACsB,IAAI,CAClB5I,KAAK,CAACC,IAAI,CACRoH,SAAS,CAACrL,KAAK,CAAC6M,QAAQ,CAACF,CAAC,GAAGtB,SAAS,CAACoB,IAAI,EAAE,CAACE,CAAC,GAAG,CAAC,IAAItB,SAAS,CAACoB,IAAI,CAAC,CACvE,CACF,CAAA;AACH,GAAA;AAEA,EAAA,OAAOnB,eAAe,CAAA;AACxB,CAAA;AAEA,SAASb,iBAAiBA,CAAA/H,KAAA,EAoBzB;EAAA,IApB0B;IACzBxF,GAAG;IACH6M,kBAAkB;IAClBW,oBAAoB;IACpBxK,IAAI;IACJwB,IAAI;IACJmG,IAAI;IACJ4B,UAAU;IACVhG,gBAAgB;AAChBiG,IAAAA,OAAAA;AAWD,GAAA,GAAAhH,KAAA,CAAA;AACC,EAAA,IAAI,CAACxC,IAAI,EAAE2B,UAAU,CAACF,MAAM,EAAE;AAC5B,IAAA,OAAA;AACF,GAAA;AAEA,EAAA,IAAIoI,kBAAkB,EAAE;AACtB+C,IAAAA,oBAAoB,CAAC;MACnB5P,GAAG;MACHgD,IAAI;MACJwB,IAAI;MACJmG,IAAI;MACJ4B,UAAU;MACVhG,gBAAgB;AAChBiG,MAAAA,OAAAA;AACD,KAAA,CAAC,CAAA;AACJ,GAAC,MAAM;AACLgC,IAAAA,4BAA4B,CAAC;MAC3BxO,GAAG;MACHgD,IAAI;MACJwK,oBAAoB;MACpBhJ,IAAI;MACJmG,IAAI;MACJ4B,UAAU;MACVhG,gBAAgB;AAChBiG,MAAAA,OAAAA;AACD,KAAA,CAAC,CAAA;AACJ,GAAA;AACF,CAAA;AAEA,SAASoD,oBAAoBA,CAAA1J,KAAA,EAgB5B;EAAA,IAhB6B;IAC5BlG,GAAG;IACHgD,IAAI;IACJwB,IAAI;IACJmG,IAAI;IACJ4B,UAAU;IACVhG,gBAAgB;AAChBiG,IAAAA,OAAAA;AASD,GAAA,GAAAtG,KAAA,CAAA;AACC,EAAA,MAAMuI,OAAO,GAAGC,UAAU,CAAC1L,IAAI,CAAC,CAAA;AAChC,EAAA,MAAM8K,aAAa,GAAGtB,OAAO,EAAEsB,aAAa,IAAI,KAAK,CAAA;AACrD,EAAA,KAAK,IAAI1F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqG,OAAO,CAAChK,MAAM,GAAG,CAAC,EAAE2D,CAAC,EAAE,EAAE;AAC3C,IAAA,MAAMwF,UAAU,GAAGa,OAAO,CAACrG,CAAC,CAAC,CAAA;AAC7B,IAAA,MAAMyF,QAAQ,GAAGY,OAAO,CAACrG,CAAC,GAAG,CAAC,CAAC,CAAA;AAC/BuF,IAAAA,4BAA4B,CAAC;MAC3B3N,GAAG;MACHgD,IAAI;MACJ4K,UAAU;MACVC,QAAQ;MACRrJ,IAAI;MACJmG,IAAI;MACJ4B,UAAU;MACVhG,gBAAgB;AAChBuH,MAAAA,aAAAA;AACD,KAAA,CAAC,CAAA;AACJ,GAAA;AACF,CAAA;AAEA,SAAST,sBAAsBA,CAACrK,IAAwB,EAAA;AACtD,EAAA,MAAM0C,UAAU,GAAG1C,IAAI,CAAC0C,UAAU,CAAC5C,KAAK,CAAA;EACxC,MAAM+M,aAAa,GAAGnK,UAAU,CAACA,UAAU,CAACjB,MAAM,GAAG,CAAC,CAAC,CAAA;AACvD,EAAA,MAAMqL,iBAAiB,GAAGpK,UAAU,CAACqK,WAAoC,CAAA;AAEzE,EAAA,MAAMpB,YAAY,GAAoB;IACpC7L,KAAK,EAAE,IAAIgN,iBAAiB,CAACpK,UAAU,CAACjB,MAAM,GAAG,CAAC,CAAC;AACnD8K,IAAAA,IAAI,EAAE,CAAA;GACP,CAAA;AACDZ,EAAAA,YAAY,CAAC7L,KAAK,CAAC+D,GAAG,CAACnB,UAAU,CAAC,CAAA;AAClCiJ,EAAAA,YAAY,CAAC7L,KAAK,CAAC+D,GAAG,CAAC,CAACgJ,aAAa,GAAG,CAAC,CAAC,EAAEnK,UAAU,CAACjB,MAAM,CAAC,CAAA;AAE9D;EACAzB,IAAI,CAAC2L,YAAY,GAAGA,YAAY,CAAA;AAClC;;AC3bA;AACA,IAAIqB,GAAG,GAAGvH,IAAI,CAACD,EAAE,GAAG,GAAG;AACnByH,EAAAA,GAAG,GAAG,GAAG,GAAGxH,IAAI,CAACD,EAAE,CAAA;AAEvB,SAAS0H,UAAUA,CAAEzD,IAAI,EAAE;AACvB,EAAA,IAAI0D,CAAC,GAAGC,QAAQ,CAAC3D,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,EAACA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;AACnC,EAAA,IAAI4D,CAAC,GAAGD,QAAQ,CAAC3D,IAAI,CAAC,CAAC,CAAC,EAACA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;AACjC,EAAA,IAAI6D,CAAC,GAAGC,QAAQ,CAAC9D,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,EAACA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;AACnC,EAAA,IAAI+D,CAAC,GAAGD,QAAQ,CAAC9D,IAAI,CAAC,CAAC,CAAC,EAACA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;EACjC,OAAO,CAAC4D,CAAC,EAACC,CAAC,EAACH,CAAC,EAACK,CAAC,CAAC,CAAA;AACpB,CAAA;AAEA,SAASC,aAAaA,CAAEhE,IAAI,EAAE;AAC1B,EAAA,IAAI9B,IAAI,GAAGuF,UAAU,CAACzD,IAAI,CAAC,CAAA;AAC3B,EAAA,IAAIiE,IAAI,GAAG;AACPlM,IAAAA,IAAI,EAAE,SAAS;AACf6G,IAAAA,WAAW,EACP,CACI,CACI,CAACV,IAAI,CAAC,CAAC,CAAC,EAACA,IAAI,CAAC,CAAC,CAAC,CAAC,EACjB,CAACA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,EAClB,CAACA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,EAClB,CAACA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,EAClB,CAACA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,CACrB,CAAA;GAEZ,CAAA;AACD,EAAA,OAAO+F,IAAI,CAAA;AACf,CAAA;AAEA,SAASN,QAAQA,CAAChH,CAAC,EAAEuH,CAAC,EAAE;AACpB,EAAA,OAAQvH,CAAC,GAACX,IAAI,CAACmI,GAAG,CAAC,CAAC,EAACD,CAAC,CAAC,GAAC,GAAG,GAAC,GAAG,CAAA;AACnC,CAAA;AAEA,SAASJ,QAAQA,CAAClH,CAAC,EAAEsH,CAAC,EAAE;EACpB,IAAIH,CAAC,GAAC/H,IAAI,CAACD,EAAE,GAAC,CAAC,GAACC,IAAI,CAACD,EAAE,GAACa,CAAC,GAACZ,IAAI,CAACmI,GAAG,CAAC,CAAC,EAACD,CAAC,CAAC,CAAA;EACvC,OAAQV,GAAG,GAACxH,IAAI,CAACiB,IAAI,CAAC,GAAG,IAAEjB,IAAI,CAACkB,GAAG,CAAC6G,CAAC,CAAC,GAAC/H,IAAI,CAACkB,GAAG,CAAC,CAAC6G,CAAC,CAAC,CAAC,CAAC,CAAA;AACzD,CAAA;AAEA,SAASK,WAAWA,CAACC,GAAG,EAAE7H,GAAG,EAAE0H,CAAC,EAAE;EAC9B,IAAIlE,IAAI,GAAGsE,mBAAmB,CAACD,GAAG,EAAE7H,GAAG,EAAE0H,CAAC,CAAC,CAAA;AAC3ClE,EAAAA,IAAI,CAAC,CAAC,CAAC,GAAGhE,IAAI,CAACuI,KAAK,CAACvE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;AAC7BA,EAAAA,IAAI,CAAC,CAAC,CAAC,GAAGhE,IAAI,CAACuI,KAAK,CAACvE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;AAC7B,EAAA,OAAOA,IAAI,CAAA;AACf,CAAA;AAEA,SAASwE,WAAWA,CAAExE,IAAI,EAAE;EACxB,OAAO,CACH,CAACA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,EACjC,CAACA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAE,GAAC,CAAC,CAAC,EACpC,CAACA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,EACrC,CAACA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CACtC,CAAA;AACL,CAAA;AAEA,SAASyE,SAASA,CAAEzE,IAAI,EAAE;AAC1B;AACI,EAAA,IAAGA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,KAAG,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,KAAG,CAAC,EAAE;IAC/B,OAAO,CAACA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAA;AAC3C,GAAA;AACL;AAAA,OACS,IAAIA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,KAAG,CAAC,IAAM,CAACA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,KAAG,CAAE,EAAE;IACzC,OAAO,CAACA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAA;AAC/C,GAAA;AACL;AAAA,OACS,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,KAAG,CAAC,IAAMA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,KAAG,CAAE,EAAE;IACzC,OAAO,CAAC,CAACA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC,EAAGA,IAAI,CAAC,CAAC,CAAC,GAAE,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAA;AACjD,GAAA;AACL;OACS;IACD,OAAO,CAAC,CAACA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,IAAE,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAA;AACnD,GAAA;AACL,CAAA;AAEA,SAAS0E,WAAWA,CAAE1E,IAAI,EAAE;AACxB,EAAA,OAAOwE,WAAW,CAACC,SAAS,CAACzE,IAAI,CAAC,CAAC,CAAA;AACvC,CAAA;AAEA,SAAS2E,WAAWA,CAAC3E,IAAI,EAAEH,KAAK,EAAE;AAC9B,EAAA,IAAI+E,QAAQ,GAAGF,WAAW,CAAC1E,IAAI,CAAC,CAAA;AAChC,EAAA,KAAK,IAAIrE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiJ,QAAQ,CAAC5M,MAAM,EAAE2D,CAAC,EAAE,EAAE;AACtC,IAAA,IAAI,CAACkJ,OAAO,CAAChF,KAAK,EAAE+E,QAAQ,CAACjJ,CAAC,CAAC,CAAC,EAAE,OAAO,KAAK,CAAA;AACjD,GAAA;AACD,EAAA,OAAO,IAAI,CAAA;AACf,CAAA;AAEA,SAASkJ,OAAOA,CAAChF,KAAK,EAAEG,IAAI,EAAE;AAC1B,EAAA,KAAK,IAAIrE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkE,KAAK,CAAC7H,MAAM,EAAE2D,CAAC,EAAE,EAAE;IACnC,IAAImJ,UAAU,CAACjF,KAAK,CAAClE,CAAC,CAAC,EAAEqE,IAAI,CAAC,EAAE,OAAO,IAAI,CAAA;AAC9C,GAAA;AACD,EAAA,OAAO,KAAK,CAAA;AAChB,CAAA;AAEA,SAAS8E,UAAUA,CAACC,KAAK,EAAEC,KAAK,EAAE;AAC9B,EAAA,OACID,KAAK,CAAC,CAAC,CAAC,KAAKC,KAAK,CAAC,CAAC,CAAC,IACrBD,KAAK,CAAC,CAAC,CAAC,KAAKC,KAAK,CAAC,CAAC,CAAC,IACrBD,KAAK,CAAC,CAAC,CAAC,KAAKC,KAAK,CAAC,CAAC,CAAC,CAAA;AAE7B,CAAA;AAEA,SAASC,aAAaA,CAACjF,IAAI,EAAE;EAC3B,IAAIkF,KAAK,GAAG,EAAE,CAAA;AACd,EAAA,KAAK,IAAIhB,CAAC,GAAGlE,IAAI,CAAC,CAAC,CAAC,EAAEkE,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC9B,IAAI1I,CAAC,GAAG,CAAC,CAAA;AACT,IAAA,IAAI2J,IAAI,GAAG,CAAC,IAAKjB,CAAC,GAAG,CAAE,CAAA;IACvB,IAAI,CAAClE,IAAI,CAAC,CAAC,CAAC,GAAGmF,IAAI,MAAM,CAAC,EAAE3J,CAAC,EAAE,CAAA;AAC/B,IAAA,IAAI,CAACwE,IAAI,CAAC,CAAC,CAAC,GAAGmF,IAAI,MAAM,CAAC,EAAE3J,CAAC,IAAI,CAAC,CAAA;AAClC0J,IAAAA,KAAK,IAAI1J,CAAC,CAAC4J,QAAQ,EAAE,CAAA;AACxB,GAAA;AACD,EAAA,OAAOF,KAAK,CAAA;AACd,CAAA;AAEA,SAASG,aAAaA,CAACC,OAAO,EAAE;EAC5B,IAAI3I,CAAC,GAAG,CAAC,CAAA;EACT,IAAIC,CAAC,GAAG,CAAC,CAAA;AACT,EAAA,IAAIsH,CAAC,GAAGoB,OAAO,CAACtN,MAAM,CAAA;EAEtB,KAAK,IAAI2D,CAAC,GAAGuI,CAAC,EAAEvI,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;AACxB,IAAA,IAAIwJ,IAAI,GAAG,CAAC,IAAKxJ,CAAC,GAAG,CAAE,CAAA;AACvB,IAAA,QAAQ2J,OAAO,CAACpB,CAAC,GAAGvI,CAAC,CAAC;AAClB,MAAA,KAAK,GAAG;AACJ,QAAA,MAAA;AAEJ,MAAA,KAAK,GAAG;AACJgB,QAAAA,CAAC,IAAIwI,IAAI,CAAA;AACT,QAAA,MAAA;AAEJ,MAAA,KAAK,GAAG;AACJvI,QAAAA,CAAC,IAAIuI,IAAI,CAAA;AACT,QAAA,MAAA;AAEJ,MAAA,KAAK,GAAG;AACJxI,QAAAA,CAAC,IAAIwI,IAAI,CAAA;AACTvI,QAAAA,CAAC,IAAIuI,IAAI,CAAA;AACT,QAAA,MAAA;AACP,KAAA;AACJ,GAAA;AACD,EAAA,OAAO,CAACxI,CAAC,EAACC,CAAC,EAACsH,CAAC,CAAC,CAAA;AAClB,CAAA;AAEA,SAASqB,UAAUA,CAACC,UAAU,EAAE;AAC5B,EAAA,IAAIC,GAAG,GAAGrB,WAAW,CAACoB,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;AACvD,EAAA,IAAIE,GAAG,GAAGtB,WAAW,CAACoB,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;EACvD,IAAItH,IAAI,GAAG,CAACuH,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEC,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;AAE3C,EAAA,IAAIxB,CAAC,GAAGyB,WAAW,CAACzH,IAAI,CAAC,CAAA;EACzB,IAAIgG,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAA;EAC3B,IAAIvH,CAAC,GAAGuB,IAAI,CAAC,CAAC,CAAC,KAAM,EAAE,GAAGgG,CAAE,CAAA;EAC5B,IAAItH,CAAC,GAAGsB,IAAI,CAAC,CAAC,CAAC,KAAM,EAAE,GAAGgG,CAAE,CAAA;AAC5B,EAAA,OAAO,CAACvH,CAAC,EAACC,CAAC,EAACsH,CAAC,CAAC,CAAA;AAClB,CAAA;AAEA,SAASyB,WAAWA,CAACzH,IAAI,EAAE;EACvB,IAAI0H,QAAQ,GAAG,EAAE,CAAA;EACjB,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,QAAQ,EAAE1B,CAAC,EAAE,EAAE;IAC/B,IAAIiB,IAAI,GAAG,CAAC,IAAK,EAAE,IAAIjB,CAAC,GAAG,CAAC,CAAE,CAAA;AAC9B,IAAA,IAAK,CAAChG,IAAI,CAAC,CAAC,CAAC,GAAGiH,IAAI,MAAMjH,IAAI,CAAC,CAAC,CAAC,GAAGiH,IAAI,CAAC,IACpC,CAACjH,IAAI,CAAC,CAAC,CAAC,GAAGiH,IAAI,MAAMjH,IAAI,CAAC,CAAC,CAAC,GAAGiH,IAAI,CAAE,EAAE;AACxC,MAAA,OAAOjB,CAAC,CAAA;AACX,KAAA;AACJ,GAAA;AAED,EAAA,OAAO0B,QAAQ,CAAA;AACnB,CAAA;AAEA,SAAStB,mBAAmBA,CAACD,GAAG,EAAE7H,GAAG,EAAE0H,CAAC,EAAE;EACtC,IAAI2B,GAAG,GAAG7J,IAAI,CAAC6J,GAAG,CAACrJ,GAAG,GAAG+G,GAAG,CAAC;IACzBuC,EAAE,GAAG9J,IAAI,CAACmI,GAAG,CAAC,CAAC,EAAED,CAAC,CAAC;IACnBvH,CAAC,GAAGmJ,EAAE,IAAIzB,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;IAC1BzH,CAAC,GAAGkJ,EAAE,IAAI,GAAG,GAAG,IAAI,GAAG9J,IAAI,CAACa,GAAG,CAAC,CAAC,CAAC,GAAGgJ,GAAG,KAAK,CAAC,GAAGA,GAAG,CAAC,CAAC,GAAG7J,IAAI,CAACD,EAAE,CAAC,CAAA;AACrE,EAAA,OAAO,CAACY,CAAC,EAAEC,CAAC,EAAEsH,CAAC,CAAC,CAAA;AACpB,CAAA;AAEA,IAAA6B,QAAc,GAAG;AACb/B,EAAAA,aAAa,EAAEA,aAAa;AAC5BP,EAAAA,UAAU,EAAEA,UAAU;AACtBe,EAAAA,WAAW,EAAEA,WAAW;AACxBC,EAAAA,SAAS,EAAEA,SAAS;AACpBC,EAAAA,WAAW,EAAEA,WAAW;AACxBG,EAAAA,OAAO,EAAEA,OAAO;AAChBF,EAAAA,WAAW,EAAEA,WAAW;AACxBG,EAAAA,UAAU,EAAEA,UAAU;AACtBG,EAAAA,aAAa,EAAEA,aAAa;AAC5BI,EAAAA,aAAa,EAAEA,aAAa;AAC5BjB,EAAAA,WAAW,EAAEA,WAAW;AACxBmB,EAAAA,UAAU,EAAEA,UAAU;AACtBjB,EAAAA,mBAAmB,EAAEA,mBAAAA;AACzB,CAAC;;ACjKD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAazE,KAAA,GAAGmG,QAAQ,CAAA;AAgBxB,SAASA,QAAQA,CAACC,IAAI,EAAEC,MAAM,EAAE;AAC5B,EAAA,IAAIvK,CAAC;IAAEqE,IAAI;IACPmG,MAAM,GAAGF,IAAI,CAACrH,WAAW;IACzBwH,OAAO,GAAGF,MAAM,CAACG,QAAQ;IACzBC,QAAQ,GAAG,EAAE;AACbzG,IAAAA,KAAK,GAAG,EAAE,CAAA;AAEd,EAAA,IAAIoG,IAAI,CAAClO,IAAI,KAAK,OAAO,EAAE;AACvB,IAAA,OAAO,CAACgO,QAAQ,CAAC3B,WAAW,CAAC+B,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAA;AAEpE,GAAK,MAAM,IAAIH,IAAI,CAAClO,IAAI,KAAK,YAAY,EAAE;AACnC,IAAA,KAAK4D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwK,MAAM,CAACnO,MAAM,EAAE2D,CAAC,EAAE,EAAE;MAChCqE,IAAI,GAAG+F,QAAQ,CAAC3B,WAAW,CAAC+B,MAAM,CAACxK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEwK,MAAM,CAACxK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEyK,OAAO,CAAC,CAAA;MAChEE,QAAQ,CAACC,IAAI,CAACvG,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;AACnD,KAAA;AACT,GAAK,MAAM,IAAIiG,IAAI,CAAClO,IAAI,KAAK,YAAY,EAAE;AACnCyO,IAAAA,SAAS,CAACF,QAAQ,EAAEH,MAAM,EAAEC,OAAO,CAAC,CAAA;AAE5C,GAAK,MAAM,IAAIH,IAAI,CAAClO,IAAI,KAAK,iBAAiB,EAAE;AACxC,IAAA,KAAK4D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwK,MAAM,CAACnO,MAAM,EAAE2D,CAAC,EAAE,EAAE;MAChC6K,SAAS,CAACF,QAAQ,EAAEH,MAAM,CAACxK,CAAC,CAAC,EAAEyK,OAAO,CAAC,CAAA;AAC1C,KAAA;AACT,GAAK,MAAM,IAAIH,IAAI,CAAClO,IAAI,KAAK,SAAS,EAAE;IAChC0O,YAAY,CAACH,QAAQ,EAAEzG,KAAK,EAAEsG,MAAM,EAAEC,OAAO,CAAC,CAAA;AAEtD,GAAK,MAAM,IAAIH,IAAI,CAAClO,IAAI,KAAK,cAAc,EAAE;AACrC,IAAA,KAAK4D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwK,MAAM,CAACnO,MAAM,EAAE2D,CAAC,EAAE,EAAE;MAChC8K,YAAY,CAACH,QAAQ,EAAEzG,KAAK,EAAEsG,MAAM,CAACxK,CAAC,CAAC,EAAEyK,OAAO,CAAC,CAAA;AACpD,KAAA;AACT,GAAK,MAAM;AACH,IAAA,MAAM,IAAIhR,KAAK,CAAC,+BAA+B,CAAC,CAAA;AACnD,GAAA;AAED,EAAA,IAAI8Q,MAAM,CAACQ,QAAQ,KAAKN,OAAO,EAAE;AACrC;AACQ,IAAA,IAAIO,GAAG,GAAG9G,KAAK,CAAC7H,MAAM,CAAA;AACtB4O,IAAAA,eAAe,CAACN,QAAQ,EAAEzG,KAAK,CAAC,CAAA;IAChC,KAAKlE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgL,GAAG,EAAEhL,CAAC,EAAE,EAAE;AACtB,MAAA,IAAIF,CAAC,GAAGoE,KAAK,CAAClE,CAAC,CAAC,CAAA;MAChB2K,QAAQ,CAACC,IAAI,CAAC9K,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;AAC1C,KAAA;AACD,IAAA,OAAOoL,UAAU,CAACP,QAAQ,EAAEzG,KAAK,EAAEqG,MAAM,CAAC,CAAA;AAC7C,GAAA;AAEDU,EAAAA,eAAe,CAACN,QAAQ,EAAEzG,KAAK,CAAC,CAAA;AAChC,EAAA,OAAOA,KAAK,CAAA;AAChB,CAAA;AAEA,SAASgH,UAAUA,CAACP,QAAQ,EAAEzG,KAAK,EAAEqG,MAAM,EAAE;EACzC,IAAIY,WAAW,GAAG,EAAE,CAAA;AAEpB,EAAA,KAAK,IAAI5C,CAAC,GAAGgC,MAAM,CAACG,QAAQ,EAAEnC,CAAC,GAAGgC,MAAM,CAACQ,QAAQ,EAAExC,CAAC,EAAE,EAAE;IAEpD,IAAI6C,cAAc,GAAG,EAAE,CAAA;IACvB,IAAIC,WAAW,GAAG,EAAE,CAAA;AAEpB,IAAA,KAAK,IAAIrL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkE,KAAK,CAAC7H,MAAM,EAAE2D,CAAC,EAAE,EAAE;AACnC,MAAA,IAAIF,CAAC,GAAGoE,KAAK,CAAClE,CAAC,CAAC,CAAA;AAEhB,MAAA,IAAIF,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;AAClC,QAAA,IAAIwL,GAAG,GAAGV,IAAI,CAAC9K,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEyI,CAAC,CAAC;AAC7BgD,UAAAA,GAAG,GAAGX,IAAI,CAAC9K,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEyI,CAAC,CAAC;AAC7BiD,UAAAA,GAAG,GAAGZ,IAAI,CAAC9K,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEyI,CAAC,CAAC,CAAA;AAErC,QAAA,IAAIoC,QAAQ,CAACW,GAAG,CAAC,IAAIX,QAAQ,CAACY,GAAG,CAAC,IAAIZ,QAAQ,CAACa,GAAG,CAAC,EAAE;UACjDb,QAAQ,CAACC,IAAI,CAAC9K,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAA;AACxC6K,UAAAA,QAAQ,CAACW,GAAG,CAAC,GAAG,KAAK,CAAA;AACrBX,UAAAA,QAAQ,CAACY,GAAG,CAAC,GAAG,KAAK,CAAA;AACrBZ,UAAAA,QAAQ,CAACa,GAAG,CAAC,GAAG,KAAK,CAAA;UAErB,IAAIC,UAAU,GAAG,CAAC3L,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEyI,CAAC,GAAG,CAAC,CAAC,CAAA;AAE5C,UAAA,IAAIA,CAAC,GAAG,CAAC,KAAKgC,MAAM,CAACQ,QAAQ,EAAEI,WAAW,CAAC7D,IAAI,CAACmE,UAAU,CAAC,CAAC,KACvD;YACDL,cAAc,CAACR,IAAI,CAAC9K,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEyI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;AACtD8C,YAAAA,WAAW,CAAC/D,IAAI,CAACmE,UAAU,CAAC,CAAA;AAC/B,WAAA;AACJ,SAAA;AACJ,OAAA;AACJ,KAAA;AAED,IAAA,KAAKzL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkE,KAAK,CAAC7H,MAAM,EAAE2D,CAAC,EAAE,EAAE;AAC/BF,MAAAA,CAAC,GAAGoE,KAAK,CAAClE,CAAC,CAAC,CAAA;MACZ,IAAI2K,QAAQ,CAACC,IAAI,CAAC9K,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEqL,WAAW,CAAC7D,IAAI,CAACxH,CAAC,CAAC,CAAA;AAC5D,KAAA;AAED6K,IAAAA,QAAQ,GAAGS,cAAc,CAAA;AACzBlH,IAAAA,KAAK,GAAGmH,WAAW,CAAA;AACtB,GAAA;AAED,EAAA,OAAOF,WAAW,CAAA;AACtB,CAAA;AAEA,SAASL,YAAYA,CAACH,QAAQ,EAAEe,SAAS,EAAEpB,IAAI,EAAEqB,IAAI,EAAE;EACnD,IAAIC,aAAa,GAAG,EAAE,CAAA;AAEtB,EAAA,KAAK,IAAI5L,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsK,IAAI,CAACjO,MAAM,EAAE2D,CAAC,EAAE,EAAE;IAClC,IAAI6L,IAAI,GAAG,EAAE,CAAA;IACbhB,SAAS,CAACF,QAAQ,EAAEL,IAAI,CAACtK,CAAC,CAAC,EAAE2L,IAAI,EAAEE,IAAI,CAAC,CAAA;IAExC,KAAK,IAAIxE,CAAC,GAAG,CAAC,EAAE2D,GAAG,GAAGa,IAAI,CAACxP,MAAM,EAAEyP,CAAC,GAAGd,GAAG,GAAG,CAAC,EAAE3D,CAAC,GAAG2D,GAAG,EAAEc,CAAC,GAAGzE,CAAC,EAAE,EAAE;AAC9D,MAAA,IAAI0E,CAAC,GAAG,CAAC1E,CAAC,GAAG,CAAC,IAAI2D,GAAG,CAAA;MACrB,IAAI/J,CAAC,GAAG4K,IAAI,CAACxE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;;AAE9B;AACY,MAAA,IAAI,CAACpG,CAAC,GAAG4K,IAAI,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI7K,CAAC,GAAG4K,IAAI,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC;AAAA;AAChC9K,MAAAA,CAAC,GAAG4K,IAAI,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI7K,CAAC,GAAG4K,IAAI,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAAA;AAClC9K,MAAAA,CAAC,KAAK4K,IAAI,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEH,aAAa,CAACtE,IAAI,CAACuE,IAAI,CAACxE,CAAC,CAAC,CAAC,CAAA;AACpD,KAAA;AACJ,GAAA;AAEDuE,EAAAA,aAAa,CAACI,IAAI,CAACC,YAAY,CAAC,CAAC;;AAEjC,EAAA,KAAKjM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4L,aAAa,CAACvP,MAAM,EAAE2D,CAAC,IAAI,CAAC,EAAE;AAClD;AACQiB,IAAAA,CAAC,GAAG2K,aAAa,CAAC5L,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IACvB,KAAK,IAAIgB,CAAC,GAAG4K,aAAa,CAAC5L,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEgB,CAAC,GAAG4K,aAAa,CAAC5L,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEgB,CAAC,EAAE,EAAE;MACpE,IAAI8F,EAAE,GAAG8D,IAAI,CAAC5J,CAAC,EAAEC,CAAC,EAAE0K,IAAI,CAAC,CAAA;AACzB,MAAA,IAAI,CAAChB,QAAQ,CAAC7D,EAAE,CAAC,EAAE;QACf4E,SAAS,CAACpE,IAAI,CAAC,CAACtG,CAAC,EAAEC,CAAC,EAAE0K,IAAI,CAAC,CAAC,CAAA;AAC/B,OAAA;AACJ,KAAA;AACJ,GAAA;AACL,CAAA;AAEA,SAASM,YAAYA,CAACrM,CAAC,EAAEC,CAAC,EAAE;AACxB,EAAA,OAAQD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,IAAMD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAE,CAAA;AACzC,CAAA;AAEA,SAASgL,SAASA,CAACF,QAAQ,EAAEH,MAAM,EAAEC,OAAO,EAAEoB,IAAI,EAAE;EAChD,IAAIK,KAAK,EAAEC,KAAK,CAAA;AAEhB,EAAA,KAAK,IAAInM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwK,MAAM,CAACnO,MAAM,GAAG,CAAC,EAAE2D,CAAC,EAAE,EAAE;IACxC,IAAIoM,KAAK,GAAGhC,QAAQ,CAACzB,mBAAmB,CAAC6B,MAAM,CAACxK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEwK,MAAM,CAACxK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEyK,OAAO,CAAC;MACzE4B,IAAI,GAAGjC,QAAQ,CAACzB,mBAAmB,CAAC6B,MAAM,CAACxK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEwK,MAAM,CAACxK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEyK,OAAO,CAAC;AAChF6B,MAAAA,EAAE,GAAGF,KAAK,CAAC,CAAC,CAAC;AACbG,MAAAA,EAAE,GAAGH,KAAK,CAAC,CAAC,CAAC;AACbI,MAAAA,EAAE,GAAGH,IAAI,CAAC,CAAC,CAAC;AACZI,MAAAA,EAAE,GAAGJ,IAAI,CAAC,CAAC,CAAC;MACZK,EAAE,GAAGF,EAAE,GAAGF,EAAE;MACZK,EAAE,GAAGF,EAAE,GAAGF,EAAE,CAAA;AAEhB,IAAA,IAAII,EAAE,KAAK,CAAC,IAAID,EAAE,KAAK,CAAC,EAAE,SAAA;IAE1B,IAAIE,EAAE,GAAGF,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MACpBG,EAAE,GAAGF,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACpB3L,MAAAA,CAAC,GAAGX,IAAI,CAACuI,KAAK,CAAC0D,EAAE,CAAC;AAClBrL,MAAAA,CAAC,GAAGZ,IAAI,CAACuI,KAAK,CAAC2D,EAAE,CAAC;MAClBO,KAAK,GAAGJ,EAAE,KAAK,CAAC,GAAGK,QAAQ,GAAG1M,IAAI,CAAC2M,GAAG,CAAC,CAAC,CAACN,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI1L,CAAC,GAAGsL,EAAE,IAAII,EAAE,CAAC;MACxEO,KAAK,GAAGN,EAAE,KAAK,CAAC,GAAGI,QAAQ,GAAG1M,IAAI,CAAC2M,GAAG,CAAC,CAAC,CAACL,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI1L,CAAC,GAAGsL,EAAE,IAAII,EAAE,CAAC;MACxEO,GAAG,GAAG7M,IAAI,CAAC2M,GAAG,CAACJ,EAAE,GAAGF,EAAE,CAAC;MACvBS,GAAG,GAAG9M,IAAI,CAAC2M,GAAG,CAACH,EAAE,GAAGF,EAAE,CAAC,CAAA;AAE3B,IAAA,IAAI3L,CAAC,KAAKkL,KAAK,IAAIjL,CAAC,KAAKkL,KAAK,EAAE;MAC5BxB,QAAQ,CAACC,IAAI,CAAC5J,CAAC,EAAEC,CAAC,EAAEwJ,OAAO,CAAC,CAAC,GAAG,IAAI,CAAA;AACpC,MAAA,IAAIoB,IAAI,IAAI5K,CAAC,KAAKkL,KAAK,EAAEN,IAAI,CAACvE,IAAI,CAAC,CAACtG,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAA;AAC1CiL,MAAAA,KAAK,GAAGlL,CAAC,CAAA;AACTmL,MAAAA,KAAK,GAAGlL,CAAC,CAAA;AACZ,KAAA;AAED,IAAA,OAAO6L,KAAK,GAAG,CAAC,IAAIG,KAAK,GAAG,CAAC,EAAE;MAC3B,IAAIH,KAAK,GAAGG,KAAK,EAAE;AACfH,QAAAA,KAAK,IAAII,GAAG,CAAA;AACZlM,QAAAA,CAAC,IAAI4L,EAAE,CAAA;AACvB,OAAa,MAAM;AACHK,QAAAA,KAAK,IAAIE,GAAG,CAAA;AACZlM,QAAAA,CAAC,IAAI4L,EAAE,CAAA;AACV,OAAA;MACDlC,QAAQ,CAACC,IAAI,CAAC5J,CAAC,EAAEC,CAAC,EAAEwJ,OAAO,CAAC,CAAC,GAAG,IAAI,CAAA;AACpC,MAAA,IAAIoB,IAAI,IAAI5K,CAAC,KAAKkL,KAAK,EAAEN,IAAI,CAACvE,IAAI,CAAC,CAACtG,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAA;AAC1CiL,MAAAA,KAAK,GAAGlL,CAAC,CAAA;AACTmL,MAAAA,KAAK,GAAGlL,CAAC,CAAA;AACZ,KAAA;AACJ,GAAA;AAED,EAAA,IAAI4K,IAAI,IAAI5K,CAAC,KAAK4K,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,IAAI,CAACuB,GAAG,EAAE,CAAA;AAC5C,CAAA;AAEA,SAASnC,eAAeA,CAACoC,IAAI,EAAEnJ,KAAK,EAAE;AAClC,EAAA,IAAIrI,IAAI,GAAGD,MAAM,CAACC,IAAI,CAACwR,IAAI,CAAC,CAAA;AAC5B,EAAA,KAAK,IAAIrN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnE,IAAI,CAACQ,MAAM,EAAE2D,CAAC,EAAE,EAAE;IAClCkE,KAAK,CAACoD,IAAI,CAACgG,MAAM,CAAC,CAACzR,IAAI,CAACmE,CAAC,CAAC,CAAC,CAAC,CAAA;AAC/B,GAAA;AACL,CAAA;AAEA,SAAS4K,IAAIA,CAAC5J,CAAC,EAAEC,CAAC,EAAEsH,CAAC,EAAE;AACnB,EAAA,IAAIgF,GAAG,GAAG,CAAC,IAAI,CAAC,IAAIhF,CAAC,CAAC,CAAA;EACtB,OAAQ,CAACgF,GAAG,GAAGtM,CAAC,GAAGD,CAAC,IAAI,EAAE,GAAIuH,CAAC,CAAA;AACnC,CAAA;AAEA,SAAS+E,MAAMA,CAACxG,EAAE,EAAE;AAChB,EAAA,IAAIyB,CAAC,GAAGzB,EAAE,GAAG,EAAE;AACXyG,IAAAA,GAAG,GAAG,CAAC,IAAI,CAAC,IAAIhF,CAAC,CAAC;AAClBlH,IAAAA,EAAE,GAAI,CAACyF,EAAE,GAAGyB,CAAC,IAAI,EAAG;IACpBvH,CAAC,GAAGK,EAAE,GAAGkM,GAAG;IACZtM,CAAC,GAAI,CAACI,EAAE,GAAGL,CAAC,IAAIuM,GAAG,GAAIA,GAAG,CAAA;AAC9B,EAAA,OAAO,CAACvM,CAAC,EAAEC,CAAC,EAAEsH,CAAC,CAAC,CAAA;AACpB;;ACzPA,MAAMiF,CAAC,GAAG,CACN,mBAAmB,EACnB,mBAAmB,EACnB,mBAAmB,EACnB,mBAAmB,EACnB,mBAAmB,EACnB,mBAAmB,CACtB,CAAA;AACD,MAAMC,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAA;AAO5B,SAASC,UAAUA,CAACrJ,IAAI,EAAE;EAC7B,IAAIA,IAAI,CAACkE,CAAC,GAAG,CAAC,IAAIlE,IAAI,CAACkE,CAAC,GAAG,EAAE,EAAE;AAC3B,IAAA,MAAM,IAAI9O,KAAK,CAAC,YAAY,CAAC,CAAA;AACjC,GAAA;AACA,EAAA,MAAM8O,CAAC,GAAGoF,MAAM,CAACtJ,IAAI,CAACkE,CAAC,CAAC,CAAA;EACxB,IAAIvH,CAAC,GAAG2M,MAAM,CAACtJ,IAAI,CAACrD,CAAC,CAAC,IAAK,GAAG,GAAGuH,CAAE,CAAA;EACnC,IAAItH,CAAC,GAAG0M,MAAM,CAACtJ,IAAI,CAACpD,CAAC,CAAC,IAAK,GAAG,GAAGsH,CAAE,CAAA;EACnC,KAAK,IAAIvI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;AACxB,IAAA,MAAMkI,CAAC,GAAGuF,CAAC,CAAC,CAAC,GAAGzN,CAAC,CAAC,CAAA;AAClB,IAAA,MAAMH,CAAC,GAAG2N,CAAC,CAAC,CAAC,GAAGxN,CAAC,CAAC,CAAA;IAClBgB,CAAC,GAAG,CAACA,CAAC,GAAIA,CAAC,IAAIkH,CAAE,IAAIrI,CAAC,CAAA;IACtBoB,CAAC,GAAG,CAACA,CAAC,GAAIA,CAAC,IAAIiH,CAAE,IAAIrI,CAAC,CAAA;AAC1B,GAAA;AACA,EAAA,MAAM+N,OAAO,GAAG,mBAAmB,GAC9B,EAAE,IAAI,GAAI;AAAG;AACbrF,EAAAA,CAAC,IAAI,GAAI,GACT,CAACvH,CAAC,GAAIC,CAAC,IAAI,EAAG,KAAK,GAAI,GACvB,gBAAgB,IAAKsH,CAAC,GAAG,EAAI,CAAA;AAClC,EAAA,OAAOqF,OAAO,CAAA;AAClB,CAAA;AAqBO,SAASC,eAAaA,CAACD,OAAO,EAAE;AACnC,EAAA,OAAQA,OAAO,IAAI,GAAG,GAAI,KAAK,CAAA;AACnC,CAAA;AAMO,SAASE,eAAeA,CAACxL,QAAQ,EAAEyL,UAAU,EAAE;AAClD,EAAA,MAAMpC,IAAI,GAAG5T,MAAM,CAACgW,UAAU,CAAC,CAAA;EAC/B,OAAO7J,KAAK,CAAC5B,QAAQ,EAAE;AACnByI,IAAAA,QAAQ,EAAEY,IAAI;AACdjB,IAAAA,QAAQ,EAAEiB,IAAAA;AACd,GAAC,CAAC,CAAC/T,GAAG,CAAC,CAAC,CAACoJ,CAAC,EAAEC,CAAC,EAAEsH,CAAC,CAAC,KAAKmF,UAAU,CAAC;IAAE1M,CAAC;IAAEC,CAAC;AAAEsH,IAAAA,CAAAA;AAAE,GAAC,CAAC,CAAC,CAAA;AAClD;;ACtDM,SAAUyF,wBAAwBA,CAAA7R,IAAA,EAKN;EAAA,IALO;IACvC+H,KAAK;IACLhG,aAAa;IACb+P,iBAAiB;AACjBC,IAAAA,eAAAA;AACgC,GAAA,GAAA/R,IAAA,CAAA;AAChC,EAAA,MAAMvE,GAAG,GAAG,IAAIyG,GAAG,EAAE,CAAA;AACrB,EAAA,MAAM8P,YAAY,GAAGC,eAAe,CAACF,eAAe,CAAC,CAAA;AACrD,EAAA,MAAMH,UAAU,GAAGF,aAAa,CAAC3J,KAAK,EAAEiK,YAAY,CAAC,CAAA;AACrD,EAAA,MAAME,kBAAkB,GAAGJ,iBAAiB,GACxCA,iBAAiB,GACjBE,YAAY,CAAA;EAEhB,IAAI,CAACJ,UAAU,EAAE;AACf,IAAA,OAAO,EAAE,CAAA;AACX,GAAA;EACA,MAAMO,KAAK,GAAGC,qBAAqB,CAACrQ,aAAa,EAAEiQ,YAAY,EAAEJ,UAAU,CAAC,CAAA;AAE5E,EAAA,IAAI,CAACO,KAAK,EAAEjS,MAAM,EAAE;AAClB,IAAA,OAAO,EAAE,CAAA;AACX,GAAA;AAEA;AACA,EAAA,MAAMmS,QAAQ,GAAG,IAAIC,GAAG,CAAkBH,KAAK,CAAC,CAAA;AAEhD,EAAA,KAAK,MAAMjK,IAAI,IAAIH,KAAK,EAAE;IACxB,IAAIG,IAAI,CAACC,SAAS,KAAK,KAAK,IAAI,CAACD,IAAI,CAACzJ,IAAI,EAAE;AAC1C,MAAA,SAAA;AACF,KAAA;AAEAyJ,IAAAA,IAAI,CAACzJ,IAAI,CAAC8T,OAAO,CAAEC,CAAU,IAAI;MAC/B,IAAIH,QAAQ,CAACjQ,GAAG,CAACoQ,CAAC,CAAC7H,EAAqB,CAAC,EAAE;AACzClP,QAAAA,GAAG,CAAC6G,GAAG,CAACkQ,CAAC,CAAC7H,EAAE,EAAE;UAAC,GAAG6H,CAAC,CAACpS,UAAU;UAAE,CAAC8R,kBAAkB,GAAGM,CAAC,CAAC7H,EAAAA;AAAG,SAAA,CAAC,CAAA;AAC9D,OAAA;AACF,KAAC,CAAC,CAAA;AACJ,GAAA;EACA,OAAOpI,KAAK,CAACC,IAAI,CAAC/G,GAAG,CAACqE,MAAM,EAAE,CAAC,CAAA;AACjC,CAAA;AAEA,SAAS4R,aAAaA,CACpB3J,KAAyB,EACzBiK,YAA0B,EAAA;AAE1B,EAAA,MAAMvT,IAAI,GAAGsJ,KAAK,CAAC0K,IAAI,CAAEvK,IAAI,IAAKA,IAAI,CAACzJ,IAAI,EAAEyB,MAAM,CAAC,EAAEzB,IAAI,CAAA;EAE1D,IAAI,CAACA,IAAI,EAAE;AACT,IAAA,OAAA;AACF,GAAA;AAEA,EAAA,IAAIuT,YAAY,KAAK3W,oBAAY,CAACqX,OAAO,EAAE;IACzC,OAAO9W,MAAM,CAAC+W,eAAoB,CAAClU,IAAI,CAAC,CAAC,CAAC,CAACkM,EAAE,CAAC,CAAC,CAAA;AACjD,GAAA;AAEA,EAAA,IAAIqH,YAAY,KAAK3W,oBAAY,CAACuX,EAAE,EAAE;IACpC,OAAOC,kBAAe,CAACpU,IAAI,CAAC,CAAC,CAAC,CAACkM,EAAE,CAAC,CAAA;AACpC,GAAA;AACF,CAAA;AAEA,MAAMmI,QAAQ,GAAS,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAA;AACzC,MAAMC,QAAQ,GAAS,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAA;AAExC,SAASX,qBAAqBA,CAC5BjM,QAAuB,EACvB6L,YAA0B,EAC1BJ,UAAkB,EAAA;AAElB,EAAA,IAAII,YAAY,KAAK3W,oBAAY,CAACqX,OAAO,EAAE;AACzC;AACA,IAAA,OAAOf,eAAe,CAACxL,QAAQ,EAAEyL,UAAU,CAAC,CAAA;AAC9C,GAAA;AAEA,EAAA,IAAII,YAAY,KAAK3W,oBAAY,CAACuX,EAAE,EAAE;AACpC;AACA;AACA;AACA,IAAA,OAAOI,mBAAc,CACnBC,QAAQ,CAAC9M,QAAQ,EAAE2M,QAAQ,CAAC,CAAC3M,QAAQ,CAACW,WAEtB,EAChB8K,UAAU,EACV,IAAI,CACL,CAACsB,MAAM,CACNF,mBAAc,CACZC,QAAQ,CAAC9M,QAAQ,EAAE4M,QAAQ,CAAC,CAAC5M,QAAQ,CAACW,WAEtB,EAChB8K,UAAU,EACV,IAAI,CACL,CACF,CAAA;AACH,GAAA;AACF,CAAA;AAEA,SAASK,eAAeA,CAACF,eAAgC,EAAA;AACvD,EAAA,QAAQA,eAAe;AACrB,IAAA,KAAK,IAAI;MACP,OAAO1W,oBAAY,CAACuX,EAAE,CAAA;AACxB,IAAA,KAAK,SAAS;MACZ,OAAOvX,oBAAY,CAACqX,OAAO,CAAA;AAC7B,IAAA;AACE,MAAA,MAAM,IAAIpV,KAAK,CAAC,8BAA8B,CAAC,CAAA;AACnD,GAAA;AACF;;ACtHA;;;AAGG;AAGH;AACO,MAAM6V,gBAAgB,GAAG,KAAK,CAAA;AAErC;AACO,MAAMC,kBAAkB,GAAG,MAAM,CAAA;AAExC;;;AAGG;AACI,MAAMC,sBAAsB,GAAG,IAAI,CAAA;AAE1C;AACO,MAAMC,uBAAuB,GAAG,GAAG,CAAA;AAE1C;;;AAGG;AACI,MAAMC,gCAAgC,GAAG,CAAC,CAAA;AAEjD;;;AAGG;AACI,MAAMC,qCAAqC,GAAG,CAAC;;ACPtD;AACM,SAAUC,YAAYA,CAAAzT,IAAA,EAQb;EAAA,IARc;IAC3B+H,KAAK;IACLhG,aAAa;IACbC,gBAAgB;IAChBgG,UAAU;AACV8J,IAAAA,iBAAiB,GAAGsB,kBAAkB;IACtCrB,eAAe;AACf9J,IAAAA,OAAO,GAAG,EAAA;AACG,GAAA,GAAAjI,IAAA,CAAA;EACb,IAAI+R,eAAe,KAAK,KAAK,EAAE;AAC7B,IAAA,OAAOF,wBAAwB,CAAC;AAC9B9J,MAAAA,KAAK,EAAEA,KAA2B;MAClChG,aAAa;MACb+P,iBAAiB;AACjBC,MAAAA,eAAAA;AACD,KAAA,CAAC,CAAA;AACJ,GAAA;AACA,EAAA,OAAOjK,sBAAsB,CAAC;IAC5BC,KAAK;IACLC,UAAU;IACVjG,aAAa;IACbC,gBAAgB;AAChBiG,IAAAA,OAAAA;AACD,GAAA,CAAC,CAAA;AACJ;;ACvCA;;;;;;;AAOG;AACH,MAAMyL,mBAAmB,GAAG,CAAC,CAAA;AAS7B;;;;;;;;;;;;;;;;;AAiBG;AACa,SAAAC,2BAA2BA,CACzCzU,OAAgB,EAChBE,sBAA8C,EAAA;EAE9C,MAAM;IAACwU,sBAAsB;IAAEC,UAAU;AAAEC,IAAAA,UAAAA;AAAW,GAAA,GACpDC,gBAAgB,CAAC7U,OAAO,CAAC,CAAA;EAC3B,OAAO;AACL8U,IAAAA,WAAW,EAAEC,cAAc,CAACH,UAAU,EAAEJ,mBAAmB,CAAC;IAC5DQ,cAAc,EAAEC,iBAAiB,CAC/BP,sBAAsB,EACtBC,UAAU,EACVC,UAAU,CACX;IACDM,cAAc,EAAEA,cAAc,CAC5BR,sBAAsB,EACtBC,UAAU,EACVC,UAAU,EACVJ,mBAAmB,EACnBtU,sBAAsB,CAAA;GAEzB,CAAA;AACH,CAAA;AAEA;AACA,SAAS2U,gBAAgBA,CAAC7U,OAAgB,EAAA;EACxC,MAAM0U,sBAAsB,GAAY,EAAE,CAAA;EAE1C,IAAIC,UAAU,GAAkB,IAAI,CAAA;EACpC,IAAIC,UAAU,GAAsB,IAAI,CAAA;AAExC,EAAA,KAAK,MAAM,CAACxU,MAAM,EAAE+U,UAAU,CAAC,IAAI5U,MAAM,CAACiC,OAAO,CAACxC,OAAO,CAAC,EAAE;AAC1D,IAAA,KAAK,MAAM,CAACe,IAAI,EAAEqU,QAAQ,CAAC,IAAI7U,MAAM,CAACiC,OAAO,CAAC2S,UAAU,CAGrD,EAAE;AACH,MAAA,IAAIpU,IAAI,KAAKhF,kBAAU,CAACmB,IAAI,EAAE;AAC5ByX,QAAAA,UAAU,GAAGvU,MAAM,CAAA;AACnBwU,QAAAA,UAAU,GAAGQ,QAAsB,CAAA;AACrC,OAAC,MAAM;QACLV,sBAAsB,CAACtU,MAAM,CAAC,GAAG;AAAC,UAAA,CAACW,IAAI,GAAGqU,QAAAA;SAAS,CAAA;AACrD,OAAA;AACF,KAAA;AACF,GAAA;EAEA,OAAO;IACLV,sBAAsB;IACtBC,UAAU;AACVC,IAAAA,UAAAA;GACD,CAAA;AACH,CAAA;AAEA;AACA,SAASG,cAAcA,CACrBH,UAA6B,EAC7BS,UAAkB,EAAA;AAElB,EAAA,MAAM7J,MAAM,GAAGnI,KAAK,CAACgS,UAAU,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AAC7C;AACA;EACA9J,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AAClB,EAAA,IAAIoJ,UAAU,EAAE;IACd,MAAMW,QAAQ,GAAGX,UAAU,CAACvW,MAAM,EAAEkX,QAAQ,IAAI,CAAC,CAAA;AACjD/J,IAAAA,MAAM,CAAC,CAAC,CAAC,GAAGoJ,UAAU,CAAChU,MAAM,CAAC,CAAC,CAAC,CAACrE,GAAG,CAAEiZ,CAAC,IAAKA,CAAC,GAAGD,QAAQ,CAAC,CAAA;AAC3D,GAAA;AACA,EAAA,OAAO/J,MAAM,CAAA;AACf,CAAA;AAEA;AACA,SAASyJ,iBAAiBA,CACxBP,sBAA+B,EAC/BC,UAAyB,EACzBC,UAA6B,EAAA;AAE7B,EAAA,MAAMpJ,MAAM,GAA2B;IAAC,GAAGkJ,sBAAAA;GAAuB,CAAA;AAElE;AACA;AACA;EACA,IAAIC,UAAU,IAAIC,UAAU,EAAE;IAC5BpJ,MAAM,CAACmJ,UAAU,CAAC,GAAG;MACnB,GAAGnJ,MAAM,CAACmJ,UAAU,CAAC;AACrBY,MAAAA,QAAQ,EAAEX,UAAU,CAACvW,MAAM,EAAEkX,QAAQ;AACrC,MAAA,CAACxZ,kBAAU,CAACmB,IAAI,GAAG,EAAE;KACtB,CAAA;AACH,GAAA;EACA,OAAO;AACLgY,IAAAA,cAAc,EAAEO,IAAI,CAACC,SAAS,CAAClK,MAAM,CAAA;GACtC,CAAA;AACH,CAAA;AAEA;AACA,SAAS0J,cAAcA,CACrBR,sBAA+B,EAC/BC,UAAyB,EACzBC,UAA6B,EAC7BS,UAAkB,EAClBnV,sBAA8C,EAAA;EAE9C,MAAMsL,MAAM,GAAGnI,KAAK,CAACgS,UAAU,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAA;EACxC,MAAMK,aAAa,GAAG9U,mBAAmB,CAAC;AACxCb,IAAAA,OAAO,EAAE0U,sBAAsB;AAC/B3T,IAAAA,IAAI,EAAE,QAAQ;AACdb,IAAAA,sBAAAA;AACD,GAAA,CAAC,CAAA;AAEF;AACA;AACA;AACA,EAAA,OAAQD,OAA8B,IAAI;AACxCuL,IAAAA,MAAM,CAAC,CAAC,CAAC,GAAGmK,aAAa,CAAC1V,OAAO,CAAC,CAAA;IAElC,IAAI0U,UAAU,IAAIC,UAAU,EAAE;MAC5B,MAAMW,QAAQ,GAAGX,UAAU,CAACvW,MAAM,EAAEkX,QAAQ,IAAI,CAAC,CAAA;AACjD,MAAA,MAAMtU,CAAC,GAAIhB,OAAO,CAACiB,UAAU,IAAIjB,OAAmC,CAAA;MACpEuL,MAAM,CAAC,CAAC,CAAC,GAAIvK,CAAC,CAAC0T,UAAU,CAAY,GAAGY,QAAQ,CAAA;AAClD,KAAA;AACA,IAAA,OAAO/J,MAAM,CAAA;GACd,CAAA;AACH;;AChKA,MAAMoK,YAAY,GAAG,IAAIxC,GAAG,CAAC7S,MAAM,CAACK,MAAM,CAAC7E,kBAAU,CAAC,CAAC,CAAA;AACvD,MAAM8Z,YAAY,GAAI9U,IAAY,IAChC6U,YAAY,CAAC1S,GAAG,CAACnC,IAAkB,CAAC,CAAA;AAEtC;;;AAGG;AACa,SAAA+U,oBAAoBA,CAClCC,KAAc,EACd/V,OAAgC,EAAA;AAEhC,EAAA,IAAI,CAACA,OAAO,EAAE,OAAO,EAAE,CAAA;EAEvB,MAAMgW,iBAAiB,GAA2B,EAAE,CAAA;AAEpD,EAAA,KAAK,MAAM5V,MAAM,IAAIJ,OAAO,EAAE;AAC5B,IAAA,KAAK,MAAMe,IAAI,IAAIf,OAAO,CAACI,MAAM,CAAC,EAAE;AAClC,MAAA,IAAI,CAACyV,YAAY,CAAC9U,IAAI,CAAC,EAAE,SAAA;MAEzB,MAAML,MAAM,GAAGV,OAAO,CAACI,MAAM,CAAC,CAACW,IAAI,CAAC,CAAA;AACpC,MAAA,MAAMkV,YAAY,GAAG,CAACF,KAAK,IAAI,CAACrV,MAAM,EAAEqV,KAAK,IAAIrV,MAAM,EAAEqV,KAAK,KAAKA,KAAK,CAAA;MACxE,IAAIrV,MAAM,IAAIuV,YAAY,EAAE;AAC1BD,QAAAA,iBAAiB,CAAC5V,MAAM,CAAC,KAAK,EAAE,CAAA;AAC/B4V,QAAAA,iBAAiB,CAAC5V,MAAM,CAAC,CAACW,IAAI,CAAmB,GAAGL,MAAM,CAAA;AAC7D,OAAA;AACF,KAAA;AACF,GAAA;AAEA,EAAA,OAAOsV,iBAAiB,CAAA;AAC1B,CAAA;AAIA;;;;;;AAMG;AACG,SAAUE,mBAAmBA,CAAsBC,EAAK,EAAA;AAC5D,EAAA,IAAI9S,KAAK,CAACa,OAAO,CAACiS,EAAE,CAAC,EAAE;IACrB,OAAOA,EAAE,CAAC5Z,GAAG,CAAE8C,KAAK,IAAK6W,mBAAmB,CAAC7W,KAAK,CAAC,CAAM,CAAA;AAC3D,GAAC,MAAM,IAAI,OAAO8W,EAAE,KAAK,QAAQ,EAAE;AACjC,IAAA,OAAOA,EAAE,CAAA;AACX,GAAA;AAEA,EAAA,OAAO5V,MAAM,CAACiC,OAAO,CAAC2T,EAAuB,CAAC,CAACC,MAAM,CACnD,CAACC,GAAG,EAAAvV,IAAA,KAAkB;AAAA,IAAA,IAAhB,CAAC4K,GAAG,EAAErM,KAAK,CAAC,GAAAyB,IAAA,CAAA;IAChBuV,GAAG,CAAC3K,GAAG,CAAC4K,WAAW,EAAE,CAAC,GACpB,OAAOjX,KAAK,KAAK,QAAQ,IAAIA,KAAK,GAAG6W,mBAAmB,CAAC7W,KAAK,CAAC,GAAGA,KAAK,CAAA;AACzE,IAAA,OAAOgX,GAAG,CAAA;GACX,EACD,EAAuB,CACnB,CAAA;AACR,CAAA;AAEA;AACgB,SAAAzR,MAAMA,CAACC,SAAkB,EAAEC,OAAe,EAAA;EACxD,IAAI,CAACD,SAAS,EAAE;AACd,IAAA,MAAM,IAAIzG,KAAK,CAAC0G,OAAO,CAAC,CAAA;AAC1B,GAAA;AACF,CAAA;AAEA;;;AAGG;AACG,MAAOyR,kBAAmB,SAAQnY,KAAK,CAAA;EAG3CkO,WAAAA,CAAYxH,OAAe,EAAA;IACzB,KAAK,CAAC,GAAGyR,kBAAkB,CAACC,IAAI,CAAK1R,EAAAA,EAAAA,OAAO,EAAE,CAAC,CAAA;AAC/C,IAAA,IAAI,CAAC2R,IAAI,GAAGF,kBAAkB,CAACC,IAAI,CAAA;AACrC,GAAA;EAEA,OAAOE,EAAEA,CAACC,KAAc,EAAA;AACtB,IAAA,OACEA,KAAK,YAAYJ,kBAAkB,IAClCI,KAAe,CAAC7R,OAAO,EAAEpH,QAAQ,CAAC6Y,kBAAkB,CAACC,IAAI,CAAC,CAAA;AAE/D,GAAA;;AAbWD,kBAAmB,CACJC,IAAI,GAAG,oBAAoB,CAAA;AAejD,SAAUI,aAAaA,CAACC,MAAc,EAAA;AAC1C,EAAA,KAAK,MAAMC,CAAC,IAAID,MAAM,EAAE;AACtB,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;AACA,EAAA,OAAO,IAAI,CAAA;AACb,CAAA;AAEA;AACO,MAAME,QAAQ,GAA6BpR,CAAC,IACjDA,CAAC,KAAK,IAAI,IAAI,OAAOA,CAAC,KAAK,QAAQ,CAAA;AAErC;AACO,MAAMqR,YAAY,GAAyBrR,CAAC,IACjDoR,QAAQ,CAACpR,CAAC,CAAC,IAAIA,CAAC,CAAC2G,WAAW,KAAK,EAAE,CAACA,WAAW;;ACrFjD;;;AAGG;AACa,SAAA2K,SAASA,CACvBjX,OAA+B,EAAAc,IAAA,EACgB;EAAA,IAA/C;IAACV,MAAM;IAAEW,IAAI;IAAEH,MAAM;AAAEmV,IAAAA,KAAAA;AAAwB,GAAA,GAAAjV,IAAA,CAAA;AAE/C,EAAA,IAAI,CAACd,OAAO,CAACI,MAAM,CAAC,EAAE;AACpBJ,IAAAA,OAAO,CAACI,MAAM,CAAC,GAAG,EAAE,CAAA;AACtB,GAAA;AAEA,EAAA,MAAMM,MAAM,GAAG;IAACE,MAAM;AAAEmV,IAAAA,KAAAA;GAAwC,CAAA;AAC/D/V,EAAAA,OAAO,CAACI,MAAM,CAAC,CAACW,IAAI,CAAoC,GAAGL,MAAM,CAAA;AAElE,EAAA,OAAOV,OAAO,CAAA;AAChB,CAAA;AAOA;;;;;AAKG;AACG,SAAUkX,YAAYA,CAC1BlX,OAA+B,EAAAuB,KAAA,EACK;EAAA,IAApC;IAACnB,MAAM;AAAE2V,IAAAA,KAAAA;AAA2B,GAAA,GAAAxU,KAAA,CAAA;AAEpC,EAAA,MAAMb,MAAM,GAAGV,OAAO,CAACI,MAAM,CAAC,CAAA;EAC9B,IAAI,CAACM,MAAM,EAAE;AACX,IAAA,OAAOV,OAAO,CAAA;AAChB,GAAA;AAEA,EAAA,IAAI+V,KAAK,EAAE;IACT,KAAK,MAAMhV,IAAI,IAAIR,MAAM,CAACK,MAAM,CAAC7E,kBAAU,CAAC,EAAE;MAC5C,IAAIga,KAAK,KAAKrV,MAAM,CAACK,IAAkB,CAAC,EAAEgV,KAAK,EAAE;QAC/C,OAAOrV,MAAM,CAACK,IAAkB,CAAC,CAAA;AACnC,OAAA;AACF,KAAA;AACF,GAAA;AAEA,EAAA,IAAI,CAACgV,KAAK,IAAIa,aAAa,CAAClW,MAAM,CAAC,EAAE;IACnC,OAAOV,OAAO,CAACI,MAAM,CAAC,CAAA;AACxB,GAAA;AAEA,EAAA,OAAOJ,OAAO,CAAA;AAChB,CAAA;AAEA;;AAEG;AACG,SAAUmX,YAAYA,CAC1BnX,OAA+B,EAAA;EAE/B,KAAK,MAAMI,MAAM,IAAIG,MAAM,CAACC,IAAI,CAACR,OAAO,CAAC,EAAE;IACzC,OAAOA,OAAO,CAACI,MAAM,CAAC,CAAA;AACxB,GAAA;AACA,EAAA,OAAOJ,OAAO,CAAA;AAChB,CAAA;AAOM,SAAUoX,SAASA,CACvBpX,OAA+B,EAAA4B,KAAA,EACE;EAAA,IAAjC;IAACxB,MAAM;AAAE2V,IAAAA,KAAAA;AAAwB,GAAA,GAAAnU,KAAA,CAAA;AAEjC,EAAA,MAAMlB,MAAM,GAAGV,OAAO,CAACI,MAAM,CAAC,CAAA;EAC9B,IAAI,CAACM,MAAM,EAAE;AACX,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;EAEA,IAAI,CAACqV,KAAK,EAAE;AACV,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;EAEA,KAAK,MAAMhV,IAAI,IAAIR,MAAM,CAACK,MAAM,CAAC7E,kBAAU,CAAC,EAAE;IAC5C,IAAIga,KAAK,KAAKrV,MAAM,CAACK,IAAkB,CAAC,EAAEgV,KAAK,EAAE;AAC/C,MAAA,OAAO,IAAI,CAAA;AACb,KAAA;AACF,GAAA;AAEA,EAAA,OAAO,KAAK,CAAA;AACd,CAAA;AAQM,SAAUsB,SAASA,CACvBrX,OAA+B,EAAA+B,KAAA,EACW;EAAA,IAA1C;IAAC3B,MAAM;IAAEW,IAAI;AAAEgV,IAAAA,KAAAA;AAA2B,GAAA,GAAAhU,KAAA,CAAA;AAE1C,EAAA,MAAMrB,MAAM,GAAGV,OAAO,CAACI,MAAM,CAAC,CAAA;EAC9B,IAAI,CAACM,MAAM,EAAE;AACX,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;EAEA,IAAI,CAACqV,KAAK,IAAIA,KAAK,KAAKrV,MAAM,CAACK,IAAI,CAAC,EAAEgV,KAAK,EAAE;AAC3C,IAAA,OAAOrV,MAAM,CAACK,IAAI,CAAC,IAAI,IAAI,CAAA;AAC7B,GAAA;AAEA,EAAA,OAAO,IAAI,CAAA;AACb;;ACxHA;;;;;;;;AAQG;AACG,SAAUuW,2BAA2BA,CACzCC,QAAc,EAAA;AAEd,EAAA,IAAIC,iBAAiB,CAACD,QAAQ,CAAC,EAAE;AAC/B,IAAA,OAAA;AACF,GAAA;EACA,OAAOE,0BAA0B,CAACtO,WAAW,CAACoO,QAAQ,CAAC,CAACtQ,QAAQ,CAAC,CAAA;AACnE,CAAA;AAEA;;;;;AAKG;AACG,SAAUwQ,0BAA0BA,CACxC5U,aAAqC,EAAA;AAErC,EAAA,OAAQA,aAAa,IAAI6U,kBAAkB,CAAC7U,aAAa,CAAC,IAAKpG,SAAS,CAAA;AAC1E,CAAA;AAEA;;;;;AAKG;AACH,SAAS+a,iBAAiBA,CAACD,QAAc,EAAA;EACvC,MAAM,CAACI,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAC,GAAGP,QAAQ,CAAA;AACzC,EAAA,OAAOM,IAAI,GAAGF,IAAI,GAAG,KAAK,GAAG,CAAC,IAAIG,IAAI,GAAGF,IAAI,GAAG,KAAK,GAAG,CAAC,CAAA;AAC3D,CAAA;AAEA;;;;;;;;AAQG;AACH,SAASF,kBAAkBA,CACzBzQ,QAAgC,EAAA;AAEhC,EAAA,MAAM8Q,KAAK,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAS,CAAA;AAC5C,EAAA,MAAMC,SAAS,GAAGC,MAAM,CACtBlE,QAAQ,CAAC9M,QAAQ,EAAE8Q,KAAK,CAAC,CAAC9Q,QAAkC,CAC7D,CAAA;AAED,EAAA,MAAMiR,cAAc,GAAGC,GAAG,CAAClR,QAAQ,EAAE,GAAG,CAAC,CAAA;EACzC,MAAMmR,cAAc,GAAGD,GAAG,CAAClR,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAA;EAE1C,IAAIuE,MAAM,GAAkCwM,SAAS,CAAA;EAErD,IAAIxM,MAAM,IAAI0M,cAAc,EAAE;AAC5B,IAAA,MAAMG,aAAa,GAAGJ,MAAM,CAC1BlE,QAAQ,CAACmE,cAAc,EAAEH,KAAK,CAAC,CAAC9Q,QAAkC,CACnE,CAAA;AACD,IAAA,IAAIoR,aAAa,EAAE;AACjB,MAAA,MAAMC,UAAU,GAAG7O,yBAAiB,CAAC,CACnCxJ,eAAO,CAACuL,MAAM,CAAC,EACfvL,eAAO,CAACoY,aAAa,CAAC,CACvB,CAAC,CAAA;AACF,MAAA,MAAME,MAAM,GAAGC,KAAK,CAACF,UAAU,CAAC,CAAA;MAChC9M,MAAM,GAAG+M,MAAM,GAAGN,MAAM,CAACM,MAAM,CAACtR,QAAQ,CAAC,GAAGuE,MAAM,CAAA;AACpD,KAAA;AACF,GAAA;EAEA,IAAIA,MAAM,IAAI4M,cAAc,EAAE;AAC5B,IAAA,MAAMK,aAAa,GAAGR,MAAM,CAC1BlE,QAAQ,CAACqE,cAAc,EAAEL,KAAK,CAAC,CAAC9Q,QAAkC,CACnE,CAAA;AACD,IAAA,IAAIwR,aAAa,EAAE;AACjB,MAAA,MAAMH,UAAU,GAAG7O,yBAAiB,CAAC,CACnCxJ,eAAO,CAACuL,MAAM,CAAC,EACfvL,eAAO,CAACwY,aAAa,CAAC,CACvB,CAAC,CAAA;AACF,MAAA,MAAMF,MAAM,GAAGC,KAAK,CAACF,UAAU,CAAC,CAAA;MAChC9M,MAAM,GAAG+M,MAAM,GAAGN,MAAM,CAACM,MAAM,CAACtR,QAAQ,CAAC,GAAGuE,MAAM,CAAA;AACpD,KAAA;AACF,GAAA;AAEA,EAAA,OAAOA,MAAM,CAAA;AACf,CAAA;AAEA;AACA,SAASkN,mBAAmBA,CAACC,EAAgB,EAAA;AAC3C,EAAA,MAAMxJ,MAAM,GAAGwJ,EAAE,CAACjY,MAAM,CAAE5E,CAAC,IAAKA,CAAC,CAACkF,MAAM,GAAG,CAAC,CAAC,CAAA;EAC7C,OAAOmO,MAAM,CAACnO,MAAM,GAAG,CAAC,GAAGmO,MAAM,GAAG,IAAI,CAAA;AAC1C,CAAA;AAEA;AACA,SAASyJ,wBAAwBA,CAACC,GAAmB,EAAA;AACnD,EAAA,MAAM1J,MAAM,GAAG0J,GAAG,CAACtc,GAAG,CAACmc,mBAAmB,CAAC,CAAChY,MAAM,CAAEiY,EAAE,IAAKA,EAAE,CAAC,CAAA;EAC9D,OAAOxJ,MAAM,CAACnO,MAAM,GAAG,CAAC,GAAGmO,MAAM,GAAG,IAAI,CAAA;AAC1C,CAAA;AAEA;AACA,SAAS8I,MAAMA,CACbhR,QAAuC,EAAA;EAEvC,IAAI,CAACA,QAAQ,EAAE;AACb,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AAEA,EAAA,IAAI6R,UAAU,CAAC7R,QAAQ,CAAC,EAAE;AACxB,IAAA,MAAMkI,MAAM,GAAGuJ,mBAAmB,CAACzR,QAAQ,CAACW,WAAW,CAAC,CAAA;IACxD,OAAOuH,MAAM,GAAG7G,eAAO,CAAC6G,MAAM,CAAC,CAAClI,QAAQ,GAAG,IAAI,CAAA;AACjD,GAAA;AAEA,EAAA,IAAI8R,eAAe,CAAC9R,QAAQ,CAAC,EAAE;AAC7B,IAAA,MAAMkI,MAAM,GAAGyJ,wBAAwB,CAAC3R,QAAQ,CAACW,WAAW,CAAC,CAAA;IAC7D,OAAOuH,MAAM,GAAG3G,oBAAY,CAAC2G,MAAwB,CAAC,CAAClI,QAAQ,GAAG,IAAI,CAAA;AACxE,GAAA;AAEA,EAAA,OAAO,IAAI,CAAA;AACb,CAAA;AAEA;AACA,SAAS+R,gBAAgBA,CAACL,EAAc,EAAEM,QAAgB,EAAA;AACxD,EAAA,OAAON,EAAE,CAACpc,GAAG,CAAET,CAAC,IAAK,CAACA,CAAC,CAAC,CAAC,CAAC,GAAGmd,QAAQ,EAAEnd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC/C,CAAA;AAEA;AACA,SAASod,gBAAgBA,CAACL,GAAiB,EAAEI,QAAgB,EAAA;AAC3D,EAAA,OAAOJ,GAAG,CAACtc,GAAG,CAAEoc,EAAE,IAAKK,gBAAgB,CAACL,EAAE,EAAEM,QAAQ,CAAC,CAAC,CAAA;AACxD,CAAA;AAEA;AACA,SAASE,qBAAqBA,CAACC,IAAoB,EAAEH,QAAgB,EAAA;AACnE,EAAA,OAAOG,IAAI,CAAC7c,GAAG,CAAEsc,GAAG,IAAKK,gBAAgB,CAACL,GAAG,EAAEI,QAAQ,CAAC,CAAC,CAAA;AAC3D,CAAA;AAEA;AACA,SAASd,GAAGA,CAAClR,QAAgC,EAAEgS,QAAgB,EAAA;EAC7D,IAAIhS,QAAQ,IAAIoS,iBAAO,CAACpS,QAAQ,CAAC,KAAK,SAAS,EAAE;IAC/C,MAAMkI,MAAM,GAAG+J,gBAAgB,CAC5BjS,QAAoB,CAACW,WAAW,EACjCqR,QAAQ,CACT,CAAA;AACD,IAAA,OAAO3Q,eAAO,CAAC6G,MAAM,CAAC,CAAClI,QAAQ,CAAA;GAChC,MAAM,IAAIA,QAAQ,IAAIoS,iBAAO,CAACpS,QAAQ,CAAC,KAAK,cAAc,EAAE;IAC3D,MAAMkI,MAAM,GAAGgK,qBAAqB,CACjClS,QAAyB,CAACW,WAAW,EACtCqR,QAAQ,CACT,CAAA;AACD,IAAA,OAAOzQ,oBAAY,CAAC2G,MAAM,CAAC,CAAClI,QAAQ,CAAA;AACtC,GAAC,MAAM;AACL,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AACF,CAAA;AAEA,SAAS6R,UAAUA,CAAC7R,QAAkB,EAAA;AACpC,EAAA,OAAOoS,iBAAO,CAACpS,QAAQ,CAAC,KAAK,SAAS,CAAA;AACxC,CAAA;AAEA,SAAS8R,eAAeA,CAAC9R,QAAkB,EAAA;AACzC,EAAA,OAAOoS,iBAAO,CAACpS,QAAQ,CAAC,KAAK,cAAc,CAAA;AAC7C;;AC/KA;AACA;AACA;AAMA,SAASqS,QAAQA,GAAkB;AACjC,EAAA,OAAO,EAAAC,CAAAA,KAAA,CAAAC,IAAA,CAAAC,SAAA,CAAA,CACJld,GAAG,CAAEmd,IAAI,IAAMA,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC,GAAGD,IAAI,CAACH,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGG,IAAK,CAAC,CAC9D1a,IAAI,CAAC,GAAG,CAAC,CAAA;AACd,CAAA;AAEA,SAAS4a,WAAWA,CAClBC,UAAkB,EAClBC,OAAa,EACbC,QAAoB,EACH;AAEjB,EAAA,OAAOT,QAAQ,CAACO,UAAU,EAAEC,OAAO,EAAEC,QAAQ,EAAE,GAAA,EAAA,CAAAR,KAAA,CAAAC,IAAA,CAAAC,SAAA,IAAO,CAAC,CAAA;AACzD,CAAA;AAEA;SACgBO,iBAAiBA,CAAAlZ,IAAA,EAMhC;EAAA,IANiC;IAChC+Y,UAAU;AACVI,IAAAA,UAAAA;AAID,GAAA,GAAAnZ,IAAA,CAAA;EACC,OAAO8Y,WAAW,CAACC,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAEI,UAAU,CAAC,CAAA;AACpE,CAAA;AAEA;AACgB,SAAAC,aAAaA,CAAA3Y,KAAA,EAY5B;EAAA,IAZ6B;IAC5B4Y,SAAS;IACTN,UAAU;IACVO,cAAc;IACdC,MAAM;AACNtZ,IAAAA,IAAAA;AAOD,GAAA,GAAAQ,KAAA,CAAA;EACC,IAAIR,IAAI,KAAK,OAAO,EAAE;IACpB,OAAO6Y,WAAW,CAACC,UAAU,EAAE,IAAI,EAAE,OAAO,EAAEO,cAAc,EAAED,SAAS,CAAC,CAAA;AAC1E,GAAA;AAEA;AACA,EAAA,OAAOP,WAAW,CAChBC,UAAU,EACV,IAAI,EACJ,OAAO,EACPO,cAAc,EACdC,MAAM,EACNF,SAAS,CACV,CAAA;AACH,CAAA;AAEM,SAAUG,cAAcA,CAAA1Y,KAAA,EAQ7B;EAAA,IAR8B;IAC7BiY,UAAU;IACVO,cAAc;AACdL,IAAAA,QAAAA;AAKD,GAAA,GAAAnY,KAAA,CAAA;EACC,OAAOgY,WAAW,CAACC,UAAU,EAAE,IAAI,EAAE,MAAM,EAAEO,cAAc,EAAEL,QAAQ,CAAC,CAAA;AACxE,CAAA;SAEgBQ,aAAaA,CAAAxY,KAAA,EAM5B;EAAA,IAN6B;IAC5B8X,UAAU;AACVO,IAAAA,cAAAA;AAID,GAAA,GAAArY,KAAA,CAAA;EACC,OAAO6X,WAAW,CAACC,UAAU,EAAE,IAAI,EAAE,KAAK,EAAEO,cAAc,EAAE,OAAO,CAAC,CAAA;AACtE;;ACnFA;AACA;AACA;AAoBA;;;;;AAKG;AACG,MAAOI,aAAc,SAAQpc,KAAK,CAAA;EAatCkO,WAAAA,CACEqK,KAAY,EACZ8D,YAA6B,EAC7BC,QAAmB,EACnBC,YAAkB,EAAA;IAElB,IAAIC,cAAc,GAAG,mBAAmB,CAAA;AACxC,IAAA,IAAIF,QAAQ,EAAE;AACZE,MAAAA,cAAc,GAAG,mBAAmB,CAAA;AACpC,MAAA,IAAIF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;AAC3BD,QAAAA,cAAc,IAAI,aAAa,CAAA;AACjC,OAAC,MAAM,IAAIF,QAAQ,CAACG,MAAM,KAAK,GAAG,IAAIH,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;AAC7DD,QAAAA,cAAc,IAAI,qBAAqB,CAAA;AACzC,OAAC,MAAM,IAAIF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;AAClCD,QAAAA,cAAc,IAAI,WAAW,CAAA;AAC/B,OAAC,MAAM;AACLA,QAAAA,cAAc,IAAI,OAAO,CAAA;AAC3B,OAAA;AAEAA,MAAAA,cAAc,IAAI,CAAA,EAAA,EAAKF,QAAQ,CAACG,MAAM,CAAI,EAAA,CAAA,CAAA;AAC5C,KAAA;AACAD,IAAAA,cAAc,IAAI,CAAIjE,CAAAA,EAAAA,KAAK,CAAC7R,OAAO,IAAI6R,KAAK,CAAE,CAAA,CAAA;AAE9C,IAAA,IAAI7R,OAAO,GAAG,CAAA,EAAG2V,YAAY,CAACK,WAAW,CAAqB,mBAAA,CAAA,CAAA;IAC9DhW,OAAO,IAAI,CAAK8V,EAAAA,EAAAA,cAAc,CAAE,CAAA,CAAA;IAChC,KAAK,MAAMlP,GAAG,IAAInL,MAAM,CAACC,IAAI,CAACia,YAAY,CAAC,EAAE;MAC3C,IAAI/O,GAAG,KAAK,aAAa,EAAE,SAAA;MAC3B5G,OAAO,IAAI,CAAKiW,EAAAA,EAAAA,cAAc,CAACrP,GAAG,CAAC,CAAA,EAAA,EAAM+O,YAAoB,CAAC/O,GAAG,CAAC,CAAE,CAAA,CAAA;AACtE,KAAA;AACA5G,IAAAA,OAAO,IAAI,IAAI,CAAA;IAEf,KAAK,CAACA,OAAO,CAAC,CAAA;AA3ChB;AAAA,IAAA,IAAA,CACA6R,KAAK,GAAA,KAAA,CAAA,CAAA;AAEL;AAAA,IAAA,IAAA,CACA8D,YAAY,GAAA,KAAA,CAAA,CAAA;AAEZ;AAAA,IAAA,IAAA,CACAC,QAAQ,GAAA,KAAA,CAAA,CAAA;AAER;AAAA,IAAA,IAAA,CACAC,YAAY,GAAA,KAAA,CAAA,CAAA;IAmCV,IAAI,CAAClE,IAAI,GAAG,eAAe,CAAA;IAC3B,IAAI,CAACiE,QAAQ,GAAGA,QAAQ,CAAA;IACxB,IAAI,CAACC,YAAY,GAAGA,YAAY,CAAA;IAChC,IAAI,CAAChE,KAAK,GAAGA,KAAK,CAAA;IAClB,IAAI,CAAC8D,YAAY,GAAGA,YAAY,CAAA;AAClC,GAAA;AACD,CAAA;AAED;;AAEG;AACH,SAASM,cAAcA,CAACrP,GAAW,EAAA;EACjC,OAAOA,GAAG,CAACpM,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAACA,OAAO,CAAC,IAAI,EAAGuN,CAAC,IAAKA,CAAC,CAACmO,WAAW,EAAE,CAAC,CAAA;AAC7E;;ACvFA;AACA;AACA;AAgBsBC,MAAAA,qBAAqB,GAAAA,UAAAna,IAAA,EAAA;EAAA,IAAU;IACnDoa,OAAO;IACPC,UAAU,GAAG,EAAE;AACfC,IAAAA,OAAO,EAAEC,aAAa,GAAG,EAAE;IAC3BZ,YAAY;AACZa,IAAAA,YAAY,GAAGnH,sBAAsB;AACrCoH,IAAAA,UAAAA;AAQD,GAAA,GAAAza,IAAA,CAAA;EAAA,IAAA;AACC;AACA;AACA;AACAqa,IAAAA,UAAU,GAAG;AACX3F,MAAAA,CAAC,EAAEvB,gBAAgB;MACnBtY,MAAM,EAAEC,SAAS,EAAE;MACnB,IAAI,OAAO4f,IAAI,KAAK,WAAW,IAC7BA,IAAI,CAACC,OAAO,IAAI;QAACC,aAAa,EAAEF,IAAI,CAACC,OAAAA;AAAO,OAAC,CAAC;MAChD,GAAGN,UAAAA;KACJ,CAAA;IAEDD,OAAO,GAAGS,oBAAoB,CAACT,OAAO,EAAE3a,MAAM,CAACC,IAAI,CAAC2a,UAAU,CAAC,CAAC,CAAA;IAChE,MAAMzP,GAAG,GAAGkQ,cAAc,CAACV,OAAO,EAAEC,UAAU,EAAEE,aAAa,CAAC,CAAA;IAE9D,MAAM;AACJQ,MAAAA,KAAK,EAAEC,aAAa;MACpBC,YAAY;AACZC,MAAAA,eAAAA;AAAe,KAChB,GAAGC,gBAAgB,CAACV,UAAU,CAAC,CAAA;IAEhC,IAAIQ,YAAY,IAAID,aAAa,CAAC5Y,GAAG,CAACwI,GAAG,CAAC,EAAE;MAC1C,OAAAwQ,OAAA,CAAAC,OAAA,CAAOL,aAAa,CAACM,GAAG,CAAC1Q,GAAG,CAAe,CAAA,CAAA;AAC7C,KAAA;AAEA,IAAA,MAAM2Q,GAAG,GAAGC,uBAAuB,CAACpB,OAAO,EAAEC,UAAU,CAAC,CAAA;AACxD,IAAA,MAAMC,OAAO,GAAG;AAAC,MAAA,GAAGmB,eAAe;MAAE,GAAGlB,aAAAA;KAAc,CAAA;AAEtD;IACA,MAAMmB,YAAY,GAChBH,GAAG,CAACrb,MAAM,GAAGsa,YAAY,GACrBmB,KAAK,CAACvB,OAAO,EAAE;AACb/a,MAAAA,MAAM,EAAE,MAAM;AACduc,MAAAA,IAAI,EAAEjH,IAAI,CAACC,SAAS,CAACyF,UAAU,CAAC;AAChCC,MAAAA,OAAAA;KACD,CAAC,GACFqB,KAAK,CAACJ,GAAG,EAAE;AAACjB,MAAAA,OAAAA;AAAQ,KAAA,CAAC,CAAA;AAE3B,IAAA,IAAIV,QAA8B,CAAA;AAClC,IAAA,IAAIC,YAAqB,CAAA;AACzB,IAAA,MAAMgC,WAAW,GAAeH,YAAY,CACzCI,IAAI,CAAEC,SAAmB,IAAI;AAC5BnC,MAAAA,QAAQ,GAAGmC,SAAS,CAAA;AACpB,MAAA,OAAOnC,QAAQ,CAACoC,IAAI,EAAE,CAAA;AACxB,KAAC,CAAC,CACDF,IAAI,CAAEE,IAAS,IAAI;AAClBnC,MAAAA,YAAY,GAAGmC,IAAI,CAAA;AACnB,MAAA,IAAI,CAACpC,QAAQ,IAAI,CAACA,QAAQ,CAACqC,EAAE,EAAE;AAC7B,QAAA,MAAM,IAAI3e,KAAK,CAAC0e,IAAI,CAACnG,KAAK,CAAC,CAAA;AAC7B,OAAA;AACA,MAAA,OAAOmG,IAAI,CAAA;AACb,KAAC,CAAC,CACDE,KAAK,CAAErG,KAAY,IAAI;AACtB,MAAA,IAAIqF,eAAe,EAAE;AACnBF,QAAAA,aAAa,CAACmB,MAAM,CAACvR,GAAG,CAAC,CAAA;AAC3B,OAAA;MACA,MAAM,IAAI8O,aAAa,CAAC7D,KAAK,EAAE8D,YAAY,EAAEC,QAAQ,EAAEC,YAAY,CAAC,CAAA;AACtE,KAAC,CAAC,CAAA;AAEJ,IAAA,IAAIqB,eAAe,EAAE;AACnBF,MAAAA,aAAa,CAAC1Y,GAAG,CAACsI,GAAG,EAAEiR,WAAW,CAAC,CAAA;AACrC,KAAA;AACA,IAAA,OAAAT,OAAA,CAAAC,OAAA,CAAOQ,WAAW,CAAA,CAAA;AACpB,GAAC,QAAAjQ,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA;AApFD,MAAM6P,eAAe,GAAG;AACtBY,EAAAA,MAAM,EAAE,kBAAkB;AAC1B,EAAA,cAAc,EAAE,kBAAA;CACjB,CAAA;AAED,MAAMC,qBAAqB,GAAG,IAAIpa,GAAG,EAA4B,CAAA;AAiFjE,SAASiZ,gBAAgBA,CAACV,UAAyC,EAAA;AACjE,EAAA,MAAMQ,YAAY,GAAGR,UAAU,EAAE8B,YAAY,EAAE3f,QAAQ,CAAC,UAAU,CAAC,GAC/D,KAAK,GACL,IAAI,CAAA;AACR,EAAA,MAAMse,eAAe,GAAGT,UAAU,EAAE8B,YAAY,EAAE3f,QAAQ,CAAC,UAAU,CAAC,GAClE,KAAK,GACL,IAAI,CAAA;AACR,EAAA,MAAMme,KAAK,GAAGN,UAAU,EAAEM,KAAK,IAAIuB,qBAAqB,CAAA;EAExD,OAAO;IACLvB,KAAK;IACLE,YAAY;AACZC,IAAAA,eAAAA;GACD,CAAA;AACH,CAAA;AAEA,SAASJ,cAAcA,CACrBV,OAAe,EACfC,UAAmC,EACnCC,OAA+B,EAAA;AAE/B,EAAA,MAAMkC,gBAAgB,GAAG/c,MAAM,CAACiC,OAAO,CAAC2Y,UAAU,CAAC,CAACxK,IAAI,CAAC,CAAApP,KAAA,EAAAK,KAAA,KAAA;AAAA,IAAA,IAAC,CAAC2C,CAAC,CAAC,GAAAhD,KAAA,CAAA;AAAA,IAAA,IAAE,CAACiD,CAAC,CAAC,GAAA5C,KAAA,CAAA;AAAA,IAAA,OAChE2C,CAAC,GAAGC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;GACf,CAAA,CAAA;AACD,EAAA,MAAM+Y,aAAa,GAAGhd,MAAM,CAACiC,OAAO,CAAC4Y,OAAO,CAAC,CAACzK,IAAI,CAAC,CAAA5O,KAAA,EAAAU,KAAA,KAAA;AAAA,IAAA,IAAC,CAAC8B,CAAC,CAAC,GAAAxC,KAAA,CAAA;AAAA,IAAA,IAAE,CAACyC,CAAC,CAAC,GAAA/B,KAAA,CAAA;AAAA,IAAA,OAC1D8B,CAAC,GAAGC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;GACf,CAAA,CAAA;EACD,OAAOiR,IAAI,CAACC,SAAS,CAAC;IACpBwF,OAAO;AACPC,IAAAA,UAAU,EAAEmC,gBAAgB;AAC5BlC,IAAAA,OAAO,EAAEmC,aAAAA;AACV,GAAA,CAAC,CAAA;AACJ,CAAA;AAEA;;;;AAIG;AACH,SAASjB,uBAAuBA,CAC9BkB,aAAqB,EACrBrC,UAAmC,EAAA;AAEnC,EAAA,MAAMD,OAAO,GAAG,IAAIuC,GAAG,CAACD,aAAa,CAAC,CAAA;AACtC,EAAA,KAAK,MAAM,CAAC9R,GAAG,EAAErM,KAAK,CAAC,IAAIkB,MAAM,CAACiC,OAAO,CAAC2Y,UAAU,CAAC,EAAE;IACrD,IAAInE,YAAY,CAAC3X,KAAK,CAAC,IAAIgE,KAAK,CAACa,OAAO,CAAC7E,KAAK,CAAC,EAAE;AAC/C6b,MAAAA,OAAO,CAACwC,YAAY,CAACta,GAAG,CAACsI,GAAG,EAAE+J,IAAI,CAACC,SAAS,CAACrW,KAAK,CAAC,CAAC,CAAA;AACtD,KAAC,MAAM;AACL6b,MAAAA,OAAO,CAACwC,YAAY,CAACta,GAAG,CACtBsI,GAAG,EACFrM,KAAmC,CAAC+O,QAAQ,EAAE,CAChD,CAAA;AACH,KAAA;AACF,GAAA;AACA,EAAA,OAAO8M,OAAO,CAAC9M,QAAQ,EAAE,CAAA;AAC3B,CAAA;AAEA;;AAEG;AACH,SAASuN,oBAAoBA,CAAC6B,aAAqB,EAAErC,UAAoB,EAAA;AACvE,EAAA,MAAMD,OAAO,GAAG,IAAIuC,GAAG,CAACD,aAAa,CAAC,CAAA;AACtC,EAAA,KAAK,MAAMG,KAAK,IAAIxC,UAAU,EAAE;IAC9B,IAAID,OAAO,CAACwC,YAAY,CAACxa,GAAG,CAACya,KAAK,CAAC,EAAE;AACnCzC,MAAAA,OAAO,CAACwC,YAAY,CAACT,MAAM,CAACU,KAAK,CAAC,CAAA;AACpC,KAAA;AACF,GAAA;AACA,EAAA,OAAOzC,OAAO,CAAC9M,QAAQ,EAAE,CAAA;AAC3B;;ACrKA;AACA;AACA;AAyBA,MAAsBwP,UAAU,GAAAA,UAC9B7D,QAAiB,EACjBhR,OAA+D,EAC/D8U,aAA4B,EAAA;EAAA,IAAA;IAE5B,MAAM;MAACC,WAAW;MAAE1D,cAAc;MAAEyB,KAAK;MAAE,GAAGkC,eAAAA;AAAe,KAAC,GAAGhV,OAAO,CAAA;AACxE,IAAA,MAAMiV,aAAa,GAAG;AACpB,MAAA,GAAGC,eAAe;MAClBC,QAAQ,EAAEtiB,SAAS,EAAE;MACrBkiB,WAAW;MACX1D,cAAc;AACdL,MAAAA,QAAAA;KACD,CAAA;AACD,IAAA,KAAK,MAAMrO,GAAG,IAAIqS,eAAe,EAAE;AACjC,MAAA,IAAIA,eAAe,CAACrS,GAAmC,CAAC,EAAE;AACvDsS,QAAAA,aAAqB,CAACtS,GAAG,CAAC,GACzBqS,eAAe,CAACrS,GAAmC,CAAC,CAAA;AACxD,OAAA;AACF,KAAA;AACA,IAAA,MAAMwP,OAAO,GAAGZ,cAAc,CAAC0D,aAAa,CAAC,CAAA;IAC7C,MAAM;MAACE,QAAQ;MAAE5C,YAAY;MAAE6C,MAAM;AAAE5C,MAAAA,UAAAA;AAAU,KAAC,GAAGyC,aAAa,CAAA;AAClE,IAAA,MAAM5C,OAAO,GAAG;AACdgD,MAAAA,aAAa,EAAE,CAAA,OAAA,EAAUrV,OAAO,CAAC+U,WAAW,CAAE,CAAA;AAC9C,MAAA,GAAG/U,OAAO,CAACqS,OAAAA;KACZ,CAAA;AACD,IAAA,MAAMD,UAAU,GAAG;AAACxf,MAAAA,MAAM,EAAEuiB,QAAQ;MAAE,GAAGL,aAAAA;KAAc,CAAA;AAEvD,IAAA,MAAMpD,YAAY,GAAoB;AACpCK,MAAAA,WAAW,EAAE,mBAAmB;MAChCuD,UAAU,EAAEtV,OAAO,CAACqR,cAAc;AAClCrZ,MAAAA,IAAI,EAAEgZ,QAAQ;MACdM,MAAM,EAAE5E,IAAI,CAACC,SAAS,CAACyF,UAAU,EAAE1e,SAAS,EAAE,CAAC,CAAA;KAChD,CAAA;AAAC,IAAA,OAAAyf,OAAA,CAAAC,OAAA,CAEMlB,qBAAqB,CAA2B;MACpDC,OAAO;MACPC,UAAU;MACVC,OAAO;MACPX,YAAY;MACZa,YAAY;AACZC,MAAAA,UAAAA;AACD,KAAA,CAAC,CAAA,CAAAqB,IAAA,CAAA,UARE0B,gBAAgB,EAAA;AAAA,MAAA,IAAAC,KAAA,CAAA;AAAA,MAAA,SAAAC,OAAAC,OAAA,EAAA;QAAA,OAAAF,KAAA,GAAAE,OAAA,GAAAvC,OAAA,CAAAC,OAAA,CAkCTlB,qBAAqB,CAA6B;AAC7DC,UAAAA,OAAO,EAAEwD,OAAO;AAChBvD,UAAAA,UAAU,EAAE;AAACxf,YAAAA,MAAM,EAAEuiB,QAAAA;WAAS;UAC9B9C,OAAO;UACPX,YAAY;UACZa,YAAY;AACZC,UAAAA,UAAAA;AACD,SAAA,CAAC,CAAA,CAAA;AAAA,OAAA;MA/BF,MAAMmD,OAAO,GAAGJ,gBAAgB,CAACH,MAAM,CAAC,CAAC9B,GAAG,CAAC,CAAC,CAAC,CAAA;AAC/C,MAAA,IAAIR,KAAK,EAAE;QACTA,KAAK,CAACxc,KAAK,GAAGsf,QAAQ,CACpB,IAAIlB,GAAG,CAACiB,OAAO,CAAC,CAAChB,YAAY,CAACtB,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,EAChD,EAAE,CACH,CAAA;AACH,OAAA;MACA3B,YAAY,CAACK,WAAW,GAAG,UAAU,CAAA;AAAC,MAAA,MAAA8D,KAAA,GAAA,YAAA;QAAA,IAElCT,MAAM,KAAK,UAAU,EAAA;AAAA,UAAA,OAAAjC,OAAA,CAAAC,OAAA,CACJlB,qBAAqB,CAAiB;AACvDC,YAAAA,OAAO,EAAEwD,OAAO;AAChBvD,YAAAA,UAAU,EAAE;AAACxf,cAAAA,MAAM,EAAEuiB,QAAAA;aAAS;YAC9B9C,OAAO;YACPX,YAAY;YACZa,YAAY;AACZC,YAAAA,UAAAA;AACD,WAAA,CAAC,CAAA,CAAAqB,IAAA,CAAA,UAPIE,IAAI,EAAA;AAQV,YAAA,IAAIgB,WAAW,EAAE;cACfhB,IAAI,CAACgB,WAAW,GAAGA,WAAW,CAAA;AAChC,aAAA;YAACS,KAAA,GAAA,CAAA,CAAA;AAAA,YAAA,OACMzB,IAAI,CAAA;AAAA,WAAA,CAAA,CAAA;AAAA,SAAA;AAAA,OAAA,EAAA,CAAA;AAAA,MAAA,OAAA8B,KAAA,IAAAA,KAAA,CAAAhC,IAAA,GAAAgC,KAAA,CAAAhC,IAAA,CAAA4B,MAAA,CAAAA,GAAAA,MAAA,CAAAI,KAAA,CAAA,CAAA;AAAA,KAAA,CAAA,CAAA;AAWf,GAAC,QAAAlS,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA,CAAA,CAAA;AAlFM,MAAMuR,eAAe,GAA4C;AACtEpE,EAAAA,UAAU,EAAE5d,oBAAoB;AAChCkiB,EAAAA,MAAM,EAAE,UAAU;EAClB/C,OAAO,EAAE,EAAE;AACXE,EAAAA,YAAY,EAAEnH,sBAAAA;;;ACxBhB;AACA;AACA;AAuBa0K,MAAAA,mBAAmB,GAAAA,UAC9B9V,OAAmC,EAAA;EAAA,IAAA;IAEnC,MAAM;MACJhJ,OAAO;MACPC,OAAO;MACP8e,gBAAgB;MAChBC,kBAAkB;AAClBC,MAAAA,eAAAA;AACD,KAAA,GAAGjW,OAAO,CAAA;AACX,IAAA,MAAM8U,aAAa,GAAkB;MACnCiB,gBAAgB;AAChBC,MAAAA,kBAAAA;KACD,CAAA;AAED,IAAA,IAAIhf,OAAO,EAAE;MACX8d,aAAa,CAAC9d,OAAO,GAAGA,OAAO,CAACf,IAAI,CAAC,GAAG,CAAC,CAAA;AAC3C,KAAA;AACA,IAAA,IAAIgB,OAAO,EAAE;MACX6d,aAAa,CAAC7d,OAAO,GAAGA,OAAO,CAAA;AACjC,KAAA;AACA,IAAA,IAAIgf,eAAe,EAAE;MACnBnB,aAAa,CAACmB,eAAe,GAAGA,eAAe,CAAA;AACjD,KAAA;IAEA,OAAA9C,OAAA,CAAAC,OAAA,CAAOyB,UAAU,CACf,UAAU,EACV7U,OAAO,EACP8U,aAAa,CAC0B,CAAA,CAAA;AAC3C,GAAC,QAAAnR,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;ACvDD;AACA;AACA;AAoBauS,MAAAA,mBAAmB,GAAAA,UAC9BlW,OAAmC,EAAA;EAAA,IAAA;IAEnC,MAAM;MAAC/I,OAAO;MAAE8e,gBAAgB;MAAE/e,OAAO;AAAEmf,MAAAA,mBAAAA;AAAmB,KAAC,GAAGnW,OAAO,CAAA;AACzE,IAAA,MAAM8U,aAAa,GAAkB;MACnCiB,gBAAgB;AAChBI,MAAAA,mBAAAA;KACD,CAAA;AAED,IAAA,IAAInf,OAAO,EAAE;MACX8d,aAAa,CAAC9d,OAAO,GAAGA,OAAO,CAACf,IAAI,CAAC,GAAG,CAAC,CAAA;AAC3C,KAAA;AACA,IAAA,IAAIgB,OAAO,EAAE;MACX6d,aAAa,CAAC7d,OAAO,GAAGA,OAAO,CAAA;AACjC,KAAA;IAEA,OAAAkc,OAAA,CAAAC,OAAA,CAAOyB,UAAU,CACf,UAAU,EACV7U,OAAO,EACP8U,aAAa,CAC0B,CAAA,CAAA;AAC3C,GAAC,QAAAnR,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;ACXD;;;;AAIG;MACmByS,YAAY,CAAA;EAWhC7S,WAAAA,CAAY8S,KAAY,EAAA;AAAA,IAAA,IAAA,CAVfA,KAAK,GAAA,KAAA,CAAA,CAAA;IAWZ,IAAI,CAACA,KAAK,GAAG;MACX,GAAGD,YAAY,CAACE,YAAY;MAC5BnB,QAAQ,EAAEtiB,SAAS,EAAE;AAAE;MACvB,GAAGwjB,KAAAA;KACJ,CAAA;AACH,GAAA;AAaUE,EAAAA,eAAeA,CACvBtf,OAA4B,EAC5Buf,WAAoB,EAAA;AAEpB,IAAA,MAAMH,KAAK,GAAG,IAAI,CAACA,KAAK,CAAA;IACxB,OAAO;MACLI,UAAU,EAAEJ,KAAK,CAACI,UAAwB;MAC1C3F,UAAU,EAAEuF,KAAK,CAACvF,UAAoB;MACtCqE,QAAQ,EAAEkB,KAAK,CAAClB,QAAkB;MAClCJ,WAAW,EAAEsB,KAAK,CAACtB,WAAW;MAC9B1D,cAAc,EAAEgF,KAAK,CAAChF,cAAc;MACpCpa,OAAO,EAAE8V,oBAAoB,CAACyJ,WAAW,EAAEvf,OAAO,IAAIof,KAAK,CAACpf,OAAO,CAAC;MACpEE,sBAAsB,EAAEkf,KAAK,CAAClf,sBAAsB;MACpD2S,eAAe,EAAEuM,KAAK,CAACvM,eAAe;MACtCD,iBAAiB,EAAEwM,KAAK,CAACxM,iBAAiB;MAC1C6M,cAAc,EAAGL,KAAqC,CAACK,cAAAA;KACxD,CAAA;AACH,GAAA;;AAsEF;;;AAGG;AAxHmBN,YAAY,CAGzBE,YAAY,GAA+B;EAChDG,UAAU,EAAExjB,kBAAU,CAAC0jB,EAAE;AACzB7F,EAAAA,UAAU,EAAE5d,oBAAoB;EAChCiiB,QAAQ,EAAEtiB,SAAS,EAAE;EACrBoE,OAAO,EAAE,EAAE;AACXE,EAAAA,sBAAsB,EAAE,KAAA;CACzB,CAAA;AAgHI,MAAMyf,gBAAgB,GAAGR;;AC7IhC;;;AAGG;;AAiCH;;;;;;;;;;;;;AACsBS,MAAAA,QAAQ,GAAAA,UAAAre,KAAA,EAAA;EAAA,IAAC;IAC7B8a,GAAG;IACHyB,WAAW;AACX+B,IAAAA,IAAAA;AAKD,GAAA,GAAAte,KAAA,CAAA;EAAA,IAAA;AAAA,IAAA,IAAAgd,KAAA,CAAA;AAAA,IAAA,SAAAC,OAAAC,OAAA,EAAA;MAAA,IAAAF,KAAA,GAAA;AAyBC,MAAA,IAAI,CAAC7D,QAAQ,CAACqC,EAAE,EAAE;AAChB+C,QAAAA,gBAAgB,CAAC;UAACpF,QAAQ;AAAEnb,UAAAA,IAAAA;AAAI,SAAC,CAAC,CAAA;AACpC,OAAA;AAEA,MAAA,OAAOA,IAAI,CAAA;AAAC,KAAA;AA5BZ,IAAA,IAAImb,QAAQ,CAAA;AACZ,IAAA,IAAInb,IAAI,CAAA;AACR,IAAA,MAAMwgB,MAAM,GAAGF,IAAI,EAAE1f,MAAM,KAAK,MAAM,CAAA;IAAC,MAAAye,KAAA,GAAAoB,MAAA,CACnC,YAAA;MAAA,OAAA9D,OAAA,CAAAC,OAAA,CACeM,KAAK,CAACJ,GAAG,CAACjO,QAAQ,EAAE,EAAE;AACrCgN,QAAAA,OAAO,EAAE;UACPgD,aAAa,EAAE,CAAUN,OAAAA,EAAAA,WAAW,CAAE,CAAA;AACtC,UAAA,IAAIiC,MAAM,IAAI;AAAC,YAAA,cAAc,EAAE,kBAAA;WAAmB,CAAC;AACnD,UAAA,GAAGF,IAAI,CAACzE,OAAAA;SACT;AACD,QAAA,IAAI2E,MAAM,IAAI;UACZ5f,MAAM,EAAE0f,IAAI,EAAE1f,MAAM;UACpBuc,IAAI,EAAEmD,IAAI,EAAEnD,IAAAA;SACb,CAAC;QACFuD,MAAM,EAAEJ,IAAI,EAAEI,MAAM;AACpB,QAAA,GAAGJ,IAAI,EAAEK,YAAAA;AACV,OAAA,CAAC,CAAA,CAAAtD,IAAA,CAAA,UAAAuD,MAAA,EAAA;AAZFzF,QAAAA,QAAQ,GAAAyF,MAYN,CAAA;AAAC,QAAA,OAAAjE,OAAA,CAAAC,OAAA,CACUzB,QAAQ,CAACoC,IAAI,EAAE,CAAA,CAAAF,IAAA,CAAA,UAAAwD,cAAA,EAAA;AAA5B7gB,UAAAA,IAAI,GAAA6gB,cAAwB,CAAA;AAAC,SAAA,CAAA,CAAA;AAAA,OAAA,CAAA,CAAA;KAC9B,EAAA,UAAQzJ,KAAK,EAAE;AACd,MAAA,IAAKA,KAAe,CAACF,IAAI,KAAK,YAAY,EAAE,MAAME,KAAK,CAAA;AAEvD,MAAA,MAAM,IAAIvY,KAAK,CAAC,CAAmBuY,gBAAAA,EAAAA,KAAc,EAAE,CAAC,CAAA;KACrD,CAAA,CAAA;AAAA,IAAA,OAAAuF,OAAA,CAAAC,OAAA,CAAAyC,KAAA,IAAAA,KAAA,CAAAhC,IAAA,GAAAgC,KAAA,CAAAhC,IAAA,CAAA4B,MAAA,CAAAA,GAAAA,MAAA,CAAAI,KAAA,CAAA,CAAA,CAAA;AAOH,GAAC,QAAAlS,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA,CAAA,CAAA;SAvEeoT,gBAAgBA,CAAAhf,IAAA,EAM/B;EAAA,IANgC;IAC/B4Z,QAAQ;AACRnb,IAAAA,IAAAA;AAID,GAAA,GAAAuB,IAAA,CAAA;AACC,EAAA,IAAIvB,IAAI,CAACoX,KAAK,KAAK,kBAAkB,EAAE;AACrC,IAAA,MAAM,IAAIJ,kBAAkB,CAAC,CAAA,EAAGhX,IAAI,CAACoX,KAAK,CAAA,CAAA,EAAIpX,IAAI,CAAC8gB,WAAW,CAAA,CAAE,CAAC,CAAA;AACnE,GAAA;AAEA,EAAA,IACE,OAAO9gB,IAAI,CAACoX,KAAK,KAAK,QAAQ,IAC9BpX,IAAI,CAACoX,KAAK,EAAEjZ,QAAQ,CAAC,iBAAiB,CAAC,EACvC;AACA,IAAA,MAAM,IAAI6Y,kBAAkB,CAAChX,IAAI,CAACoX,KAAK,CAAC,CAAA;AAC1C,GAAA;EAEA,QAAQ+D,QAAQ,CAACG,MAAM;AACrB,IAAA,KAAK,GAAG;AACN,MAAA,MAAM,IAAIzc,KAAK,CAAC,0CAA0C,CAAC,CAAA;AAC7D,IAAA,KAAK,GAAG;AACN,MAAA,MAAM,IAAIA,KAAK,CAAC,wCAAwC,CAAC,CAAA;AAC3D,IAAA;AACE,MAAA,MAAM,IAAIA,KAAK,CACbmB,IAAI,IAAIA,IAAI,CAACoX,KAAK,IAAI,OAAOpX,IAAI,CAACoX,KAAK,KAAK,QAAQ,GAChDpX,IAAI,CAACoX,KAAK,GACVlB,IAAI,CAACC,SAAS,CAACnW,IAAI,EAAE+gB,IAAI,IAAI/gB,IAAI,CAACoX,KAAK,GAAG,CAAC,CAAC,CAAC,CAClD,CAAA;AACL,GAAA;AACF;;ACtCA;AACA,MAAM4J,gBAAgB,GAAG,CACvB,UAAU,EACV,WAAW,EACX,SAAS,EACT,MAAM,EACN,YAAY,EACZ,OAAO,EACP,aAAa,EACb,OAAO,CACC,CAAA;AAuBV,MAAM;AAACb,EAAAA,EAAAA;AAAG,CAAA,GAAG1jB,kBAAU,CAAA;AACvB,MAAMwkB,0BAA0B,GAAG,IAAI,CAAA;AAEvC;;;AAGG;AACG,SAAUC,YAAYA,CAACrB,KAK5B,EAAA;AACCxa,EAAAA,MAAM,CAACwa,KAAK,CAAC/E,MAAM,EAAE,8BAA8B,CAAC,CAAA;AACpDzV,EAAAA,MAAM,CAACwa,KAAK,CAACsB,KAAK,EAAE,6BAA6B,CAAC,CAAA;AAClD9b,EAAAA,MAAM,CAACwa,KAAK,CAAC/gB,MAAM,EAAE,8BAA8B,CAAC,CAAA;AAEpDuG,EAAAA,MAAM,CACJ2b,gBAAgB,CAAC7iB,QAAQ,CAAC0hB,KAAK,CAACsB,KAAK,CAAC,EACtC,CAAA,4DAAA,EAA+DH,gBAAgB,CAACvhB,IAAI,CAClF,IAAI,CACL,EAAE,CACJ,CAAA;EAED,MAAM;IAAC0hB,KAAK;IAAErG,MAAM;IAAEhc,MAAM;AAAEwhB,IAAAA,IAAAA;AAAI,GAAC,GAAGT,KAAK,CAAA;EAC3C,MAAM;IAACre,IAAI;IAAEye,UAAU;IAAE3F,UAAU;IAAEiE,WAAW;IAAE1D,cAAc;AAAE8D,IAAAA,QAAAA;AAAS,GAAA,GACzE7D,MAAM,CAAA;AAERzV,EAAAA,MAAM,CAACiV,UAAU,EAAE,kCAAkC,CAAC,CAAA;AACtDjV,EAAAA,MAAM,CAACkZ,WAAW,EAAE,mCAAmC,CAAC,CAAA;AACxDlZ,EAAAA,MAAM,CAAC4a,UAAU,KAAKE,EAAE,EAAE,+CAA+C,CAAC,CAAA;AAC1E9a,EAAAA,MAAM,CAAC7D,IAAI,KAAK,SAAS,EAAE,sCAAsC,CAAC,CAAA;EAElE,IAAIsb,GAAG,GAAG,CAAGxC,EAAAA,UAAU,WAAWO,cAAc,CAAA,OAAA,EAAUsG,KAAK,CAAE,CAAA,CAAA;EAEjE,MAAM;IACJnhB,IAAI;IACJS,OAAO;AACPE,IAAAA,sBAAsB,GAAG,KAAK;AAC9B2S,IAAAA,eAAe,GAAG,KAAK;AACvB8N,IAAAA,kBAAkB,GAAG,YAAA;AACtB,GAAA,GAAGtG,MAAM,CAAA;AAEV,EAAA,MAAMuG,WAAW,GAA4B;IAC3C7f,IAAI;AACJpF,IAAAA,MAAM,EAAEuiB,QAAQ;AAChB7D,IAAAA,MAAM,EAAE9a,IAAI;IACZlB,MAAM;AACN2gB,IAAAA,eAAe,EAAE3E,MAAM,CAAC2E,eAAe,IAAI,EAAE;IAC7Chf,OAAO;AACPE,IAAAA,sBAAAA;GACD,CAAA;AAED,EAAA,MAAM0S,iBAAiB,GAAGyH,MAAM,CAACzH,iBAAiB,IAAIsB,kBAAkB,CAAA;AAExE;EACA,IAAIwM,KAAK,KAAK,MAAM,EAAE;IACpBE,WAAW,CAAChO,iBAAiB,GAAGA,iBAAiB,CAAA;AACnD,GAAA;AAEA;AACA,EAAA,MAAMiO,cAAc,GAAGxG,MAAM,CAACxX,aAAa,GACvC;IAAC,CAAC+P,iBAAiB,GAAGyH,MAAM,CAACxX,aAAAA;AAAc,GAAA,GAC3CpG,SAAS,CAAA;AAEb,EAAA,IAAIokB,cAAc,EAAE;IAClBD,WAAW,CAACC,cAAc,GAAGA,cAAc,CAAA;IAC3CD,WAAW,CAAChO,iBAAiB,GAAGA,iBAAiB,CAAA;IACjDgO,WAAW,CAAC/N,eAAe,GAAGA,eAAe,CAAA;AAC/C,GAAA;EAEA,IAAIA,eAAe,KAAK,KAAK,EAAE;IAC7B+N,WAAW,CAACD,kBAAkB,GAAGA,kBAAkB,CAAA;AACrD,GAAA;AAEA,EAAA,MAAMG,mBAAmB,GACvBzE,GAAG,GAAG,GAAG,GAAG0E,uBAAuB,CAACH,WAAW,CAAC,CAACxS,QAAQ,EAAE,CAAA;AAC7D,EAAA,MAAM4S,KAAK,GAAGF,mBAAmB,CAAC9f,MAAM,IAAIwf,0BAA0B,CAAA;AACtE,EAAA,IAAIQ,KAAK,EAAE;AACT3E,IAAAA,GAAG,GAAGyE,mBAAmB,CAAA;AAC3B,GAAA;AACA,EAAA,OAAOlB,QAAQ,CAAC;IACdvD,GAAG;IACHyB,WAAW,EAAEzD,MAAM,CAACyD,WAAW;AAC/B+B,IAAAA,IAAI,EAAE;AACJ,MAAA,GAAGA,IAAI;AACP1f,MAAAA,MAAM,EAAE6gB,KAAK,GAAG,KAAK,GAAG,MAAM;MAC9B,IAAI,CAACA,KAAK,IAAI;AAACtE,QAAAA,IAAI,EAAEjH,IAAI,CAACC,SAAS,CAACkL,WAAW,CAAA;OAAE,CAAA;AAClD,KAAA;AACF,GAAA,CAAC,CAAA;AACJ,CAAA;AAEA,SAASG,uBAAuBA,CAAClK,MAA+B,EAAA;AAC9D,EAAA,MAAMxY,MAAM,GAAG,IAAI4iB,eAAe,EAAE,CAAA;AACpC,EAAA,KAAK,MAAMvV,GAAG,IAAImL,MAAM,EAAE;AACxB,IAAA,IAAIG,YAAY,CAACH,MAAM,CAACnL,GAAG,CAAC,CAAC,EAAE;AAC7BrN,MAAAA,MAAM,CAAC6iB,MAAM,CAACxV,GAAG,EAAE+J,IAAI,CAACC,SAAS,CAACmB,MAAM,CAACnL,GAAG,CAAC,CAAC,CAAC,CAAA;KAChD,MAAM,IAAIrI,KAAK,CAACa,OAAO,CAAC2S,MAAM,CAACnL,GAAG,CAAC,CAAC,EAAE;AACrCrN,MAAAA,MAAM,CAAC6iB,MAAM,CAACxV,GAAG,EAAE+J,IAAI,CAACC,SAAS,CAACmB,MAAM,CAACnL,GAAG,CAAC,CAAC,CAAC,CAAA;KAChD,MAAM,IAAImL,MAAM,CAACnL,GAAG,CAAC,KAAK,IAAI,EAAE;AAC/BrN,MAAAA,MAAM,CAAC6iB,MAAM,CAACxV,GAAG,EAAE,MAAM,CAAC,CAAA;KAC3B,MAAM,IAAImL,MAAM,CAACnL,GAAG,CAAC,KAAKjP,SAAS,EAAE;AACpC4B,MAAAA,MAAM,CAAC6iB,MAAM,CAACxV,GAAG,EAAEjM,MAAM,CAACoX,MAAM,CAACnL,GAAG,CAAY,CAAC,CAAC,CAAA;AACpD,KAAA;AACF,GAAA;AACA,EAAA,OAAOrN,MAAM,CAAA;AACf;;AC/HA;;;;AAIG;AACG,MAAgB8iB,kBAEpB,SAAQhC,YAAmB,CAAA;AACrBiC,EAAAA,aAAaA,CACjBrY,OAA+B,EAAA;IAAA,IAAA;MAAA,MAAAsY,KAAA,GAInB,IAAI,CAAA;MAFhB,MAAM;QACJpB,MAAM;AACNjgB,QAAAA,OAAO,GAAGqhB,KAAA,CAAKjC,KAAK,CAACpf,OAAO;QAC5Buf,WAAW;QACX1c,aAAa;QACb8d,kBAAkB;QAClB,GAAGtiB,MAAAA;AAAM,OACV,GAAG0K,OAAO,CAAA;MACX,MAAM;QAAC3I,MAAM;QAAEkhB,SAAS;AAAEC,QAAAA,eAAAA;AAAe,OAAC,GAAGljB,MAAM,CAAA;AAInD,MAAA,OAAA6d,OAAA,CAAAC,OAAA,CAAOsE,YAAY,CAAC;AAClBC,QAAAA,KAAK,EAAE,UAAU;AACjBrG,QAAAA,MAAM,EAAE;AACN,UAAA,GAAGgH,KAAA,CAAKG,cAAc,CAACxhB,OAAO,EAAEuf,WAAW,CAAC;UAC5CoB,kBAAkB;AAClB9d,UAAAA,aAAAA;SACD;AACDxE,QAAAA,MAAM,EAAE;UACN+B,MAAM;UACNkhB,SAAS;UACTC,eAAe,EAAEA,eAAe,IAAInhB,MAAAA;SACrC;AACDyf,QAAAA,IAAI,EAAE;UAACI,MAAM;AAAE7E,UAAAA,OAAO,EAAEiG,KAAA,CAAKjC,KAAK,CAAChE,OAAAA;AAAQ,SAAA;AAC5C,OAAA,CAAC,CAACwB,IAAI,CAAE6E,GAA4B,IAAKvL,mBAAmB,CAACuL,GAAG,CAACC,IAAI,CAAC,CAAC,CAAA,CAAA;AAC1E,KAAC,QAAAhV,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAEKiV,EAAAA,WAAWA,CACf5Y,OAA+B,EAAA;IAAA,IAAA;MAAA,MAAA6Y,MAAA,GAKnB,IAAI,CAAA;MAHhB,MAAM;QACJC,eAAe;QACf5B,MAAM,GAAG4B,eAAe,EAAE5B,MAAM;AAChCjgB,QAAAA,OAAO,GAAG4hB,MAAA,CAAKxC,KAAK,CAACpf,OAAO;QAC5Buf,WAAW;QACX1c,aAAa;QACb8d,kBAAkB;QAClB,GAAGtiB,MAAAA;AAAM,OACV,GAAG0K,OAAO,CAAA;MACX,MAAM;QAAChJ,OAAO;QAAE+hB,QAAQ;QAAE7f,UAAU;QAAEiL,CAAC;QAAE6U,KAAK;AAAEC,QAAAA,cAAAA;AAAe,OAAA,GAAG3jB,MAAM,CAAA;AAIxE,MAAA,OAAA6d,OAAA,CAAAC,OAAA,CAAOsE,YAAY,CAAC;AAClBC,QAAAA,KAAK,EAAE,MAAM;AACbrG,QAAAA,MAAM,EAAE;AACN,UAAA,GAAGuH,MAAA,CAAKJ,cAAc,CAACxhB,OAAO,EAAEuf,WAAW,CAAC;UAC5CoB,kBAAkB;AAClB9d,UAAAA,aAAAA;SACD;AACDxE,QAAAA,MAAM,EAAE;UACN0B,OAAO;UACP+hB,QAAQ;UACR7f,UAAU;UACViL,CAAC;UACD6U,KAAK,EAAEA,KAAK,IAAI,IAAI;UACpBC,cAAc,EAAEA,cAAc,IAAI5N,uBAAAA;SACnC;AACDyL,QAAAA,IAAI,EAAE;UAACI,MAAM;AAAE7E,UAAAA,OAAO,EAAEwG,MAAA,CAAKxC,KAAK,CAAChE,OAAAA;AAAQ,SAAA;AAC3C;AACD,OAAA,CAAC,CAACwB,IAAI,CAAC9b,IAAA,IAAA;QAAA,IAAC;AAAC4gB,UAAAA,IAAAA;AAA4B,SAAA,GAAA5gB,IAAA,CAAA;QAAA,OAAM;AAAC4gB,UAAAA,IAAAA;SAAK,CAAA;AAAA,OAAC,CAAC,CAAA,CAAA;AACtD,KAAC,QAAAhV,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAEKuV,EAAAA,UAAUA,CAAClZ,OAA8B,EAAA;IAAA,IAAA;MAAA,MAAAmZ,MAAA,GAIjC,IAAI,CAAA;MAHhB,MAAM;QACJL,eAAe;QACf5B,MAAM,GAAG4B,eAAe,EAAE5B,MAAM;AAChCjgB,QAAAA,OAAO,GAAGkiB,MAAA,CAAK9C,KAAK,CAACpf,OAAO;QAC5Buf,WAAW;QACX1c,aAAa;QACb8d,kBAAkB;QAClBwB,YAAY;QACZ,GAAG9jB,MAAAA;AACJ,OAAA,GAAG0K,OAAO,CAAA;MACX,MAAM;QAAC3I,MAAM;AAAEkhB,QAAAA,SAAAA;AAAU,OAAA,GAAGjjB,MAAM,CAAA;AAIlC,MAAA,OAAA6d,OAAA,CAAAC,OAAA,CAAOsE,YAAY,CAAC;AAClBC,QAAAA,KAAK,EAAE,SAAS;AAChBrG,QAAAA,MAAM,EAAE;AACN,UAAA,GAAG6H,MAAA,CAAKV,cAAc,CAACxhB,OAAO,EAAEuf,WAAW,CAAC;UAC5CoB,kBAAkB;AAClB9d,UAAAA,aAAAA;SACD;AACDxE,QAAAA,MAAM,EAAE;UACN+B,MAAM,EAAEA,MAAM,IAAI,GAAG;UACrBkhB,SAAS,EAAEA,SAAS,IAAI,OAAO;AAC/Ba,UAAAA,YAAAA;SACD;AACDtC,QAAAA,IAAI,EAAE;UAACI,MAAM;AAAE7E,UAAAA,OAAO,EAAE8G,MAAA,CAAK9C,KAAK,CAAChE,OAAAA;AAAQ,SAAA;AAC5C,OAAA,CAAC,CAACwB,IAAI,CAAE6E,GAAyB,IAAKvL,mBAAmB,CAACuL,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,CAAA;AAC1E,KAAC,QAAAhV,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAEK0V,EAAAA,YAAYA,CAChBrZ,OAAgC,EAAA;IAAA,IAAA;MAAA,MAAAsZ,MAAA,GAKpB,IAAI,CAAA;MAHhB,MAAM;QACJR,eAAe;QACf5B,MAAM,GAAG4B,eAAe,EAAE5B,MAAM;AAChCjgB,QAAAA,OAAO,GAAGqiB,MAAA,CAAKjD,KAAK,CAACpf,OAAO;QAC5Buf,WAAW;QACX1c,aAAa;QACb8d,kBAAkB;QAClB,GAAGtiB,MAAAA;AAAM,OACV,GAAG0K,OAAO,CAAA;MACX,MAAM;QAAC3I,MAAM;QAAEkhB,SAAS;AAAEgB,QAAAA,KAAAA;AAAK,OAAC,GAAGjkB,MAAM,CAAA;AAAC,MAAA,OAAA6d,OAAA,CAAAC,OAAA,CAIvBsE,YAAY,CAAC;AAC9BC,QAAAA,KAAK,EAAE,WAAW;AAClBrG,QAAAA,MAAM,EAAE;AACN,UAAA,GAAGgI,MAAA,CAAKb,cAAc,CAACxhB,OAAO,EAAEuf,WAAW,CAAC;UAC5CoB,kBAAkB;AAClB9d,UAAAA,aAAAA;SACD;AACDxE,QAAAA,MAAM,EAAE;UAAC+B,MAAM;UAAEkhB,SAAS;AAAEgB,UAAAA,KAAAA;SAAM;AAClCzC,QAAAA,IAAI,EAAE;UAACI,MAAM;AAAE7E,UAAAA,OAAO,EAAEiH,MAAA,CAAKjD,KAAK,CAAChE,OAAAA;AAAQ,SAAA;AAC5C,OAAA,CAAC,CAACwB,IAAI,CAAE6E,GAA2B,IAAKvL,mBAAmB,CAACuL,GAAG,CAACC,IAAI,CAAC,CAAC,CAAA9E,CAAAA,IAAA,WATjErd,IAAI,EAAA;QAWV,IAAIA,IAAI,CAACyB,MAAM,EAAE;AACf;AACA;AACA,UAAA,MAAMwK,MAAM,GAAGnI,KAAK,CAACif,KAAK,CAACthB,MAAM,GAAG,CAAC,CAAC,CAACsU,IAAI,CAAC,CAAC,CAAC,CAAA;UAC9C/V,IAAI,CAAC8T,OAAO,CACV9R,KAAA,IAAA;YAAA,IAAC;cAACghB,IAAI;AAAEljB,cAAAA,KAAAA;AAAqC,aAAA,GAAAkC,KAAA,CAAA;AAAA,YAAA,OAAMiK,MAAM,CAAC+W,IAAI,CAAC,GAAGljB,KAAK,CAAA;AAAA,WAAC,CACzE,CAAA;AACD,UAAA,OAAOmM,MAAM,CAAA;AACf,SAAA;AAEA,QAAA,OAAO,EAAE,CAAA;AAAC,OAAA,CAAA,CAAA;AACZ,KAAC,QAAAkB,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAEK8V,EAAAA,QAAQA,CAACzZ,OAA4B,EAAA;IAAA,IAAA;MAAA,MAAA0Z,MAAA,GAI7B,IAAI,CAAA;MAHhB,MAAM;QACJZ,eAAe;QACf5B,MAAM,GAAG4B,eAAe,EAAE5B,MAAM;AAChCjgB,QAAAA,OAAO,GAAGyiB,MAAA,CAAKrD,KAAK,CAACpf,OAAO;QAC5Buf,WAAW;QACX1c,aAAa;QACb8d,kBAAkB;QAClB,GAAGtiB,MAAAA;AAAM,OACV,GAAG0K,OAAO,CAAA;MACX,MAAM;AAAC3I,QAAAA,MAAAA;AAAO,OAAA,GAAG/B,MAAM,CAAA;AAIvB,MAAA,OAAA6d,OAAA,CAAAC,OAAA,CAAOsE,YAAY,CAAC;AAClBC,QAAAA,KAAK,EAAE,OAAO;AACdrG,QAAAA,MAAM,EAAE;AACN,UAAA,GAAGoI,MAAA,CAAKjB,cAAc,CAACxhB,OAAO,EAAEuf,WAAW,CAAC;UAC5CoB,kBAAkB;AAClB9d,UAAAA,aAAAA;SACD;AACDxE,QAAAA,MAAM,EAAE;AAAC+B,UAAAA,MAAAA;SAAO;AAChByf,QAAAA,IAAI,EAAE;UAACI,MAAM;AAAE7E,UAAAA,OAAO,EAAEqH,MAAA,CAAKrD,KAAK,CAAChE,OAAAA;AAAQ,SAAA;AAC5C,OAAA,CAAC,CAACwB,IAAI,CAAE6E,GAAuB,IAAKvL,mBAAmB,CAACuL,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,CAAA;AACxE,KAAC,QAAAhV,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAEKgW,EAAAA,UAAUA,CAAC3Z,OAA8B,EAAA;IAAA,IAAA;MAAA,MAAA4Z,MAAA,GAIjC,IAAI,CAAA;MAHhB,MAAM;QACJd,eAAe;QACf5B,MAAM,GAAG4B,eAAe,EAAE5B,MAAM;AAChCjgB,QAAAA,OAAO,GAAG2iB,MAAA,CAAKvD,KAAK,CAACpf,OAAO;QAC5Buf,WAAW;QACX1c,aAAa;QACb8d,kBAAkB;QAClB,GAAGtiB,MAAAA;AAAM,OACV,GAAG0K,OAAO,CAAA;MACX,MAAM;QAAC6Z,WAAW;QAAEC,kBAAkB;QAAEC,WAAW;AAAEC,QAAAA,kBAAAA;AAAkB,OAAC,GACtE1kB,MAAM,CAAA;AAER;MACA,MAAM2kB,UAAU,GAAG,GAAG,CAAA;AAItB,MAAA,OAAA9G,OAAA,CAAAC,OAAA,CAAOsE,YAAY,CAAC;AAClBC,QAAAA,KAAK,EAAE,aAAa;AACpBrG,QAAAA,MAAM,EAAE;AACN,UAAA,GAAGsI,MAAA,CAAKnB,cAAc,CAACxhB,OAAO,EAAEuf,WAAW,CAAC;UAC5CoB,kBAAkB;AAClB9d,UAAAA,aAAAA;SACD;AACDxE,QAAAA,MAAM,EAAE;UACNukB,WAAW;UACXC,kBAAkB;UAClBC,WAAW;UACXC,kBAAkB;AAClBhB,UAAAA,KAAK,EAAEiB,UAAAA;SACR;AACDnD,QAAAA,IAAI,EAAE;UAACI,MAAM;AAAE7E,UAAAA,OAAO,EAAEuH,MAAA,CAAKvD,KAAK,CAAChE,OAAAA;AAAQ,SAAA;OAC5C,CAAC,CACCwB,IAAI,CAAE6E,GAAyB,IAAKvL,mBAAmB,CAACuL,GAAG,CAACC,IAAI,CAAC,CAAC,CAClE9E,IAAI,CAAE6E,GAAG,IAAKA,GAAG,CAACllB,GAAG,CAACqF,KAAA,IAAA;QAAA,IAAC;UAAC+D,CAAC;AAAEC,UAAAA,CAAAA;AAAC,SAAyB,GAAAhE,KAAA,CAAA;AAAA,QAAA,OAAK,CAAC+D,CAAC,EAAEC,CAAC,CAAC,CAAA;AAAA,OAAA,CAAC,CAAC,CAAA,CAAA;AACvE,KAAC,QAAA8G,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAEKuW,EAAAA,QAAQA,CAACla,OAA4B,EAAA;IAAA,IAAA;MAAA,MAAAma,MAAA,GAI7B,IAAI,CAAA;MAHhB,MAAM;QACJrB,eAAe;QACf5B,MAAM,GAAG4B,eAAe,EAAE5B,MAAM;AAChCjgB,QAAAA,OAAO,GAAGkjB,MAAA,CAAK9D,KAAK,CAACpf,OAAO;QAC5Buf,WAAW;QACX1c,aAAa;QACb8d,kBAAkB;QAClB,GAAGtiB,MAAAA;AAAM,OACV,GAAG0K,OAAO,CAAA;MACX,MAAM;QAAChJ,OAAO;QAAEojB,MAAM;QAAEC,aAAa;AAAEC,QAAAA,MAAM,GAAG,CAAC;AAAEtB,QAAAA,KAAK,GAAG,EAAA;AAAG,OAAA,GAAG1jB,MAAM,CAAA;AAOvE,MAAA,OAAA6d,OAAA,CAAAC,OAAA,CAAOsE,YAAY,CAAC;AAClBC,QAAAA,KAAK,EAAE,OAAO;AACdrG,QAAAA,MAAM,EAAE;AACN,UAAA,GAAG6I,MAAA,CAAK1B,cAAc,CAACxhB,OAAO,EAAEuf,WAAW,CAAC;UAC5CoB,kBAAkB;AAClB9d,UAAAA,aAAAA;SACD;AACDxE,QAAAA,MAAM,EAAE;AACN+B,UAAAA,MAAM,EAAEL,OAAO;UACfojB,MAAM;UACNC,aAAa;UACbrB,KAAK;AACLsB,UAAAA,MAAAA;SACD;AACDxD,QAAAA,IAAI,EAAE;UAACI,MAAM;AAAE7E,UAAAA,OAAO,EAAE8H,MAAA,CAAK9D,KAAK,CAAChE,OAAAA;AAAQ,SAAA;OAC5C,CAAC,CAACwB,IAAI,CAAE6E,GAAuB,KAAM;AACpC;AACAC,QAAAA,IAAI,EAAED,GAAG,CAACC,IAAI,IAAKD,GAAW,CAAC6B,IAAI;QACnCC,UAAU,EAAE9B,GAAG,CAAC+B,QAAQ,EAAEC,KAAK,IAAKhC,GAAW,CAACiC,QAAQ,EAAEC,KAAAA;AAC3D,OAAA,CAAC,CAAC,CAAA,CAAA;AACL,KAAC,QAAAjX,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAEKkX,EAAAA,aAAaA,CACjB7a,OAAiC,EAAA;IAAA,IAAA;MAAA,MAAA8a,MAAA,GAKrB,IAAI,CAAA;MAHhB,MAAM;QACJhC,eAAe;QACf5B,MAAM,GAAG4B,eAAe,EAAE5B,MAAM;AAChCjgB,QAAAA,OAAO,GAAG6jB,MAAA,CAAKzE,KAAK,CAACpf,OAAO;QAC5Buf,WAAW;QACX1c,aAAa;QACb8d,kBAAkB;QAClB,GAAGtiB,MAAAA;AAAM,OACV,GAAG0K,OAAO,CAAA;MACX,MAAM;QACJ3I,MAAM;QACNmhB,eAAe;QACfuC,aAAa;QACbxC,SAAS;QACTyC,QAAQ;QACRC,cAAc;QACdC,eAAe;QACfC,oBAAoB;AACpBC,QAAAA,qBAAAA;AAAqB,OACtB,GAAG9lB,MAAM,CAAA;AAOV,MAAA,OAAA6d,OAAA,CAAAC,OAAA,CAAOsE,YAAY,CAAC;AAClBC,QAAAA,KAAK,EAAE,YAAY;AACnBrG,QAAAA,MAAM,EAAE;AACN,UAAA,GAAGwJ,MAAA,CAAKrC,cAAc,CAACxhB,OAAO,EAAEuf,WAAW,CAAC;UAC5CoB,kBAAkB;AAClB9d,UAAAA,aAAAA;SACD;AACDxE,QAAAA,MAAM,EAAE;UACN+B,MAAM;UACN2jB,QAAQ;UACRC,cAAc;UACdzC,eAAe,EAAEA,eAAe,IAAInhB,MAAM;UAC1C0jB,aAAa;UACbxC,SAAS;UACT2C,eAAe;UACfC,oBAAoB;AACpBC,UAAAA,qBAAAA;SACD;AACDtE,QAAAA,IAAI,EAAE;UAACI,MAAM;AAAE7E,UAAAA,OAAO,EAAEyI,MAAA,CAAKzE,KAAK,CAAChE,OAAAA;AAAQ,SAAA;OAC5C,CAAC,CAACwB,IAAI,CAAE6E,GAA4B,KAAM;AACzCC,QAAAA,IAAI,EAAExL,mBAAmB,CAACuL,GAAG,CAACC,IAAI,CAAC;AACnC0C,QAAAA,UAAU,EAAE3C,GAAG,CAAC+B,QAAQ,EAAEY,UAAAA;AAC3B,OAAA,CAAC,CAAC,CAAA,CAAA;AACL,KAAC,QAAA1X,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AACF;;ACpTD;;;;;;;;;;;;;;;;;;;;;AAqBG;AACG,MAAO2X,iBAAkB,SAAQlD,kBAEtC,CAAA;AACoBK,EAAAA,cAAcA,CAC/BxhB,OAA4B,EAC5Buf,WAAoB,EAAA;IAEpB,OAAO;AACL,MAAA,GAAG,KAAK,CAACD,eAAe,CAACtf,OAAO,EAAEuf,WAAW,CAAC;AAC9Cxe,MAAAA,IAAI,EAAE,OAAO;AACbxB,MAAAA,IAAI,EAAE,IAAI,CAAC6f,KAAK,CAACkF,QAAQ;AACzBtF,MAAAA,eAAe,EAAE,IAAI,CAACI,KAAK,CAACJ,eAAAA;KAC7B,CAAA;AACH,GAAA;AACD;;ACpCD;;;;;;;;;;;;;;;;;;;;;AAqBG;AACG,MAAOuF,iBAAkB,SAAQpD,kBAEtC,CAAA;AACoBK,EAAAA,cAAcA,CAC/BxhB,OAA4B,EAC5Buf,WAAoB,EAAA;IAEpB,OAAO;AACL,MAAA,GAAG,KAAK,CAACD,eAAe,CAACtf,OAAO,EAAEuf,WAAW,CAAC;AAC9Cxe,MAAAA,IAAI,EAAE,OAAO;AACbxB,MAAAA,IAAI,EAAE,IAAI,CAAC6f,KAAK,CAACoF,SAAAA;KAClB,CAAA;AACH,GAAA;AACD;;AC5CD;AACO,MAAMC,oBAAoB,GAG7B;AACFC,EAAAA,KAAK,EAAG9jB,MAAM,IAAKA,MAAM,CAACI,MAAM;EAChCyN,GAAG,EAAE,YAAA;IAAA,OAAakW,wBAAwB,CAAClW,GAAG,EAAE,GAAA,EAAA,CAAA8K,KAAA,CAAAC,IAAA,CAAAC,SAAA,CAAO,CAAC,CAAA;AAAA,GAAA;EACxD/K,GAAG,EAAE,YAAA;IAAA,OAAaiW,wBAAwB,CAACjW,GAAG,EAAE,GAAA,EAAA,CAAA6K,KAAA,CAAAC,IAAA,CAAAC,SAAA,CAAO,CAAC,CAAA;AAAA,GAAA;EACxDmL,GAAG,EAAE,YAAA;IAAA,OAAaD,wBAAwB,CAACC,GAAG,EAAE,GAAA,EAAA,CAAArL,KAAA,CAAAC,IAAA,CAAAC,SAAA,CAAO,CAAC,CAAA;AAAA,GAAA;EACxDoL,GAAG,EAAE,YAAA;IAAA,OAAaF,wBAAwB,CAACE,GAAG,EAAE,GAAA,EAAA,CAAAtL,KAAA,CAAAC,IAAA,CAAAC,SAAA,CAAO,CAAC,CAAA;AAAA,GAAA;EACzD;AAED;SACgBqL,SAASA,CACvB7kB,OAAoB,EACpBO,IAAe,EACf8gB,SAA2B,EAAA;AAE3B,EAAA,IAAI,CAAC9gB,IAAI,EAAEQ,MAAM,EAAE;AACjB,IAAA,MAAM,IAAI5C,KAAK,CAAC,gDAAgD,CAAC,CAAA;AACnE,GAAC,MAAM,IAAIoC,IAAI,CAACQ,MAAM,KAAK,CAAC,EAAE;IAC5B,MAAM3B,KAAK,GAAGY,OAAO,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;IAC9B,OAAOukB,wBAAwB,CAAC1lB,KAAK,CAAC,GAAG3C,MAAM,CAAC2C,KAAK,CAAC,GAAGA,KAAK,CAAA;AAChE,GAAA;AAEA,EAAA,MAAM2lB,aAAa,GACjBP,oBAAoB,CAACnD,SAA+C,CAAC,CAAA;EAEvE,IAAI,CAAC0D,aAAa,EAAE;AAClB,IAAA,MAAM,IAAI5mB,KAAK,CAAC,CAAGkjB,EAAAA,SAAS,qCAAqC,CAAC,CAAA;AACpE,GAAA;AAEA,EAAA,OAAO0D,aAAa,CAClBxkB,IAAI,CAACjE,GAAG,CAAE6D,MAAM,IAAI;AAClB,IAAA,MAAMf,KAAK,GAAGY,OAAO,CAACG,MAAM,CAAC,CAAA;IAC7B,OAAO2kB,wBAAwB,CAAC1lB,KAAK,CAAC,GAAG3C,MAAM,CAAC2C,KAAK,CAAC,GAAGA,KAAK,CAAA;AAChE,GAAC,CAAC,CACH,CAAA;AACH,CAAA;AAEA;;;AAGG;AACH,SAAS0lB,wBAAwBA,CAAC1lB,KAAc,EAAA;AAC9C,EAAA,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAAC4lB,IAAI,EAAE,CAACjkB,MAAM,GAAG,CAAC,CAAA;AAC7D,CAAA;AAEA,MAAM2jB,wBAAwB,GAAGA,CAC/BO,KAA0B,EAC1BtkB,MAAiC,EACjCJ,IAAwB,EACxB8gB,SAA2B,KACzB;AACF,EAAA,MAAM6D,cAAc,GAAGC,aAAa,CAAC5kB,IAAI,CAAC,CAAA;EAC1C,MAAM6kB,QAAQ,GACZ,CAACF,cAAc,EAAEnkB,MAAM,IAAI,CAAC,KAAK,CAAC,GAC9BskB,mBAAmB,CAAC1kB,MAAmB,EAAEukB,cAAc,IAAI,EAAE,CAAC,GAC9DvkB,MAAM,CAAA;AACZ,EAAA,OAAOskB,KAAK,CAACG,QAAQ,EAAE7kB,IAAI,EAAE8gB,SAAS,CAAC,CAAA;AACzC,CAAC,CAAA;AAED,SAASgE,mBAAmBA,CAC1B1kB,MAAiC,EACjCJ,IAAc,EAAA;EAEd,MAAMkC,QAAQ,GAAIrD,KAAc,IAAKA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK5C,SAAS,CAAA;AAE1E,EAAA,IAAI,CAAC+D,IAAI,EAAEQ,MAAM,EAAE;AACjB,IAAA,OAAOJ,MAAM,CAACF,MAAM,CAACgC,QAAQ,CAAC,CAAA;AAChC,GAAA;AAEA,EAAA,OAAQ9B,MAAwB,CAACF,MAAM,CAAE8U,CAAC,IAAK9S,QAAQ,CAAC8S,CAAC,CAAChV,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AACtE,CAAA;AAEA;AACA,SAASqkB,GAAGA,CACVjkB,MAAiC,EACjCJ,IAAwB,EACxBsjB,aAA+B,EAAA;AAE/B,EAAA,OAAOc,GAAG,CAAChkB,MAAM,EAAEJ,IAAI,EAAEsjB,aAAa,CAAC,IAAIljB,MAAM,CAACI,MAAM,IAAI,CAAC,CAAC,CAAA;AAChE,CAAA;AAEA,SAAS4jB,GAAGA,CACVhkB,MAAiC,EACjCJ,IAAwB,EACxBsjB,aAA+B,EAAA;AAE/B,EAAA,MAAMqB,cAAc,GAAGC,aAAa,CAAC5kB,IAAI,CAAC,CAAA;AAE1C,EAAA,IAAI2kB,cAAc,EAAE;IAClB,OAAQvkB,MAAwB,CAACwV,MAAM,CACrC,CAAC7R,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAIugB,SAAS,CAACtgB,CAAC,EAAE2gB,cAAc,EAAErB,aAAa,CAAY,EACrE,CAAC,CACF,CAAA;AACH,GAAA;AAEA,EAAA,OAAOljB,MAAM,CAACwV,MAAM,CAAC,CAAC7R,CAAS,EAAEC,CAAU,KAAKD,CAAC,GAAIC,CAAY,EAAE,CAAC,CAAC,CAAA;AACvE,CAAA;AAEA,SAASiK,GAAGA,CACV7N,MAAiC,EACjCJ,IAAwB,EACxBsjB,aAA+B,EAAA;AAE/B,EAAA,MAAMqB,cAAc,GAAGC,aAAa,CAAC5kB,IAAI,CAAC,CAAA;AAC1C,EAAA,IAAI2kB,cAAc,EAAE;IAClB,OAAQvkB,MAAwB,CAACwV,MAAM,CACrC,CAAC7R,CAAC,EAAEC,CAAC,KACHQ,IAAI,CAACyJ,GAAG,CAAClK,CAAC,EAAEugB,SAAS,CAACtgB,CAAC,EAAE2gB,cAAc,EAAErB,aAAa,CAAW,CAAC,EACpEpS,QAAQ,CACT,CAAA;AACH,GAAA;AACA,EAAA,OAAO1M,IAAI,CAACyJ,GAAG,CAAC,GAAI7N,MAAmB,CAAC,CAAA;AAC1C,CAAA;AAEA,SAAS8N,GAAGA,CACV9N,MAAiC,EACjCJ,IAAwB,EACxBsjB,aAA+B,EAAA;AAE/B,EAAA,MAAMqB,cAAc,GAAGC,aAAa,CAAC5kB,IAAI,CAAC,CAAA;AAC1C,EAAA,IAAI2kB,cAAc,EAAE;IAClB,OAAQvkB,MAAwB,CAACwV,MAAM,CACrC,CAAC7R,CAAC,EAAEC,CAAC,KACHQ,IAAI,CAAC0J,GAAG,CAACnK,CAAC,EAAEugB,SAAS,CAACtgB,CAAC,EAAE2gB,cAAc,EAAErB,aAAa,CAAW,CAAC,EACpE,CAACpS,QAAQ,CACV,CAAA;AACH,GAAA;AACA,EAAA,OAAO1M,IAAI,CAAC0J,GAAG,CAAC,GAAI9N,MAAmB,CAAC,CAAA;AAC1C,CAAA;AAEA;AAEA;AACA;AACA,SAASwkB,aAAaA,CAAC5kB,IAAa,EAAA;AAClC,EAAA,OAAO6C,KAAK,CAACa,OAAO,CAAC1D,IAAI,CAAC,GACtBA,IAAI,GACJ,OAAOA,IAAI,KAAK,QAAQ,GACtB,CAACA,IAAI,CAAC,GACN/D,SAAS,CAAA;AACjB;;;;;;;;;;;;;;;;;AC1IA,IAAc8oB,aAAA,GAAI,YAAW;EAEzB,SAASC,QAAQA,CAAChQ,CAAC,EAAC;AAAC,IAAA,OAAOA,CAAC,CAAA;AAAC,GAAA;EAE9B,SAASiQ,UAAUA,CAACjQ,CAAC,EAAC;IAAC,OAAO,OAAOA,CAAE,KAAG,QAAQ,GAAGA,CAAC,CAACc,WAAW,EAAE,GAAGd,CAAC,CAAA;AAAC,GAAA;AAEzE,EAAA,SAASkQ,mBAAmBA,CAACzkB,CAAC,EAAE0kB,GAAG,EAAC;AAChCA,IAAAA,GAAG,GAAG,OAAOA,GAAI,KAAG,QAAQ,GAAGA,GAAG,GAAG;AAACC,MAAAA,SAAS,EAACD,GAAAA;KAAI,CAAA;AAEpD,IAAA,IAAG,OAAO1kB,CAAE,IAAE,UAAU,EAAC;MACrB,IAAI4kB,IAAI,GAAG5kB,CAAC,CAAA;AACxB;AACYA,MAAAA,CAAC,GAAG,UAAS6kB,EAAE,EAAC;AAAC,QAAA,OAAO,CAAC,CAACA,EAAE,CAACD,IAAI,CAAC,GAAGC,EAAE,CAACD,IAAI,CAAC,GAAG,EAAE,CAAA;OAAE,CAAA;AACvD,KAAA;AACD,IAAA,IAAG5kB,CAAC,CAACD,MAAM,KAAK,CAAC,EAAE;AAC3B;MACY,IAAI+kB,EAAE,GAAG9kB,CAAC,CAAA;MACV,IAAI+kB,UAAU,GAAGL,GAAG,CAACF,UAAU,GAACA,UAAU,GAACD,QAAQ,CAAA;MACnD,IAAIS,GAAG,GAAGN,GAAG,CAACM,GAAG,IAAI,UAASH,EAAE,EAACI,EAAE,EAAE;AAAC,QAAA,OAAOJ,EAAE,GAAGI,EAAE,GAAG,CAAC,CAAC,GAAGJ,EAAE,GAAGI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAA;OAAE,CAAA;AAC7EjlB,MAAAA,CAAC,GAAG,UAAS6kB,EAAE,EAACI,EAAE,EAAE;AAAC,QAAA,OAAOD,GAAG,CAACD,UAAU,CAACD,EAAE,CAACD,EAAE,CAAC,CAAC,EAAEE,UAAU,CAACD,EAAE,CAACG,EAAE,CAAC,CAAC,CAAC,CAAA;OAAE,CAAA;AAC5E,KAAA;AACD,IAAA,MAAMC,UAAU,GAAG;AAAC,MAAA,IAAI,EAAC,EAAE;AAAEC,MAAAA,IAAI,EAAC,EAAA;KAAG,CAAA;IACrC,IAAGT,GAAG,CAACC,SAAS,IAAIO,UAAU,EAAE,OAAO,UAASL,EAAE,EAACI,EAAE,EAAC;AAAC,MAAA,OAAO,CAACjlB,CAAC,CAAC6kB,EAAE,EAACI,EAAE,CAAC,CAAA;KAAC,CAAA;AACxE,IAAA,OAAOjlB,CAAC,CAAA;AACX,GAAA;;AAEL;AACA;AACA;AACI,EAAA,SAASolB,EAAEA,CAACC,IAAI,EAAEX,GAAG,EAAE;AAC3B;AACA;AACA;AACQ,IAAA,IAAIhgB,CAAC,GAAI,OAAO,IAAK,IAAI,UAAU,IAAI,CAAC,IAAI,CAAC4gB,OAAO,GAAI,IAAI,GAAG,KAAK,CAAA;AACpE,IAAA,IAAI3gB,CAAC,GAAG8f,mBAAmB,CAACY,IAAI,EAAEX,GAAG,CAAC,CAAA;IACtC,IAAI1kB,CAAC,GAAG0E,CAAC,GAAG,UAASpB,CAAC,EAAEC,CAAC,EAAE;AACX,MAAA,OAAOmB,CAAC,CAACpB,CAAC,EAACC,CAAC,CAAC,IAAIoB,CAAC,CAACrB,CAAC,EAACC,CAAC,CAAC,CAAA;AAC1B,KAAA,GACDoB,CAAC,CAAA;IACb3E,CAAC,CAACulB,MAAM,GAAGH,EAAE,CAAA;AACb,IAAA,OAAOplB,CAAC,CAAA;AACX,GAAA;EACDolB,EAAE,CAACE,OAAO,GAAGF,EAAE,CAAA;AACf,EAAA,OAAOA,EAAE,CAAA;AACb,CAAC,EAAG;;AC9CJ;;;;;;;;;AASG;SACaI,YAAYA,CAC1BplB,QAAuB,EAAAud,KAAA,EAKJ;EAAA,IAJnB;IACEuE,MAAM;AACNuD,IAAAA,eAAe,GAAG,KAAK;AACvBC,IAAAA,gBAAgB,GAAG,QAAA;yBACJ,EAAE,GAAA/H,KAAA,CAAA;AAEnB;EACA,IAAIuE,MAAM,KAAK1mB,SAAS,EAAE;AACxB,IAAA,OAAO4E,QAAQ,CAAA;AACjB,GAAA;AAEA;EACA,MAAMulB,aAAa,GAChBvjB,KAAK,CAACa,OAAO,CAACif,MAAM,CAAC,IAAIA,MAAM,CAACniB,MAAM;AAAK;AAC5C,EAAA,OAAOmiB,MAAM,KAAK,QAAQ,CAAC;EAE7B,IAAI,CAACyD,aAAa,EAAE;AAClB,IAAA,MAAM,IAAIxoB,KAAK,CAAC,mCAAmC,CAAC,CAAA;AACtD,GAAA;EACA,MAAMyoB,MAAM,GAAGC,YAAY,CAAC;IAC1B3D,MAAM;IACNuD,eAAe;IACfC,gBAAgB,EAAEA,gBAAgB,IAAI,QAAA;AACvC,GAAA,CAAC,CAAA;AACF,EAAA,OAAOtlB,QAAQ,CAACsP,IAAI,CAACkW,MAAM,CAAC,CAAA;AAC9B,CAAA;AAEA;AACA,SAASC,YAAYA,CAAAhmB,IAAA,EAIG;EAAA,IAJF;IACpBqiB,MAAM;IACNuD,eAAe;AACfC,IAAAA,gBAAAA;AACsB,GAAA,GAAA7lB,IAAA,CAAA;EACtB,MAAM,CAACimB,eAAe,EAAE,GAAGC,iBAAiB,CAAC,GAAGC,sBAAsB,CAAC;IACrE9D,MAAM;IACNuD,eAAe;AACfC,IAAAA,gBAAAA;AACD,GAAA,CAAiC,CAAA;AAElC,EAAA,IAAIE,MAAM,GAAGN,qBAAO,CAAC,GAAGQ,eAAe,CAAC,CAAA;AACxC,EAAA,KAAK,MAAMG,WAAW,IAAIF,iBAAiB,EAAE;AAC3CH,IAAAA,MAAM,GAAGA,MAAM,CAACL,MAAM,CAAC,GAAGU,WAAW,CAAC,CAAA;AACxC,GAAA;AAEA,EAAA,OAAOL,MAAM,CAAA;AACf,CAAA;AAEA,SAASI,sBAAsBA,CAAA1lB,KAAA,EAIP;EAAA,IAJQ;IAC9B4hB,MAAM;IACNuD,eAAe;AACfC,IAAAA,gBAAAA;AACsB,GAAA,GAAAplB,KAAA,CAAA;AACtB,EAAA,MAAM4lB,YAAY,GAAGR,gBAAgB,KAAK,QAAQ,IAAI;AACpDV,IAAAA,GAAG,EAAEA,CAAC1hB,CAAS,EAAEC,CAAS,KAAKD,CAAC,GAAGC,CAAAA;GACpC,CAAA;AACD,EAAA,IAAI,CAACnB,KAAK,CAACa,OAAO,CAACif,MAAM,CAAC,EAAE;IAC1BA,MAAM,GAAG,CAACA,MAAM,CAAC,CAAA;AACnB,GAAA;AACA,EAAA,OAAOA,MAAM,CAAC5mB,GAAG,CAAE6qB,QAAQ,IAAI;AAC7B;AACA,IAAA,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;MAChC,OAAO,CAACA,QAAQ,EAAE;AAACxB,QAAAA,SAAS,EAAEc,eAAe;QAAE,GAAGS,YAAAA;AAAa,OAAA,CAAC,CAAA;AAClE,KAAA;AAEA,IAAA,IAAI9jB,KAAK,CAACa,OAAO,CAACkjB,QAAQ,CAAC,EAAE;AAC3B;AACA,MAAA,IAAIA,QAAQ,CAAC,CAAC,CAAC,KAAK3qB,SAAS,EAAE;QAC7B,OAAO,CAAC2qB,QAAQ,EAAE;AAACxB,UAAAA,SAAS,EAAEc,eAAe;UAAE,GAAGS,YAAAA;AAAa,SAAA,CAAC,CAAA;AAClE,OAAA;AAEA;AACA,MAAA,IAAI,OAAOC,QAAQ,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;QACnC,MAAMJ,iBAAiB,GAAGG,YAAY,GAClC;AAAC,UAAA,GAAGA,YAAY;UAAE,GAAGC,QAAQ,CAAC,CAAC,CAAA;AAAE,SAAA,GACjCA,QAAQ,CAAC,CAAC,CAAC,CAAA;AACf,QAAA,OAAO,CACLA,QAAQ,CAAC,CAAC,CAAC,EACX;AAACxB,UAAAA,SAAS,EAAEc,eAAe;UAAE,GAAGM,iBAAAA;AAAkB,SAAA,CACnD,CAAA;AACH,OAAA;AACF,KAAA;AACA,IAAA,OAAOI,QAAQ,CAAA;AACjB,GAAC,CAAC,CAAA;AACJ;;AClGA;AACgB,SAAAC,mBAAmBA,CAAAvmB,IAAA,EAYlC;EAAA,IAZmC;IAClCvB,IAAI;IACJ+nB,aAAa;IACbxD,aAAa;IACbyD,UAAU;AACVjG,IAAAA,SAAAA;AAOD,GAAA,GAAAxgB,IAAA,CAAA;AACC,EAAA,IAAIuC,KAAK,CAACa,OAAO,CAAC3E,IAAI,CAAC,IAAIA,IAAI,CAACyB,MAAM,KAAK,CAAC,EAAE;AAC5C,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;EACA,MAAMwmB,MAAM,GAAGjoB,IAAI,CAAC6W,MAAM,CAAC,CAACqR,WAAW,EAAEC,IAAI,KAAI;AAC/C,IAAA,MAAMC,KAAK,GAAGD,IAAI,CAACH,UAAU,CAAC,CAAA;IAE9B,MAAM3mB,MAAM,GAAG6mB,WAAW,CAACrL,GAAG,CAACuL,KAAK,CAAC,IAAI,EAAE,CAAA;AAC3CF,IAAAA,WAAW,CAACrkB,GAAG,CAACukB,KAAK,EAAE/mB,MAAM,CAAC,CAAA;IAE9B,MAAMgnB,eAAe,GAAG9C,SAAS,CAAC4C,IAAI,EAAEJ,aAAa,EAAExD,aAAa,CAAC,CAAA;AAErE,IAAA,MAAM+D,OAAO,GACX,CAACvG,SAAS,KAAK,OAAO,GAAG,IAAI,GAAGsG,eAAe,KAAK,IAAI,KACxDA,eAAe,KAAKnrB,SAAS,CAAA;AAE/B,IAAA,IAAIorB,OAAO,EAAE;AACXjnB,MAAAA,MAAM,CAACqL,IAAI,CAAC2b,eAAe,CAAC,CAAA;AAC5BH,MAAAA,WAAW,CAACrkB,GAAG,CAACukB,KAAK,EAAE/mB,MAAM,CAAC,CAAA;AAChC,KAAA;AAEA,IAAA,OAAO6mB,WAAW,CAAA;AACpB,GAAC,EAAE,IAAIzkB,GAAG,EAAE,CAAC,CAAC;AAEd,EAAA,MAAM8kB,eAAe,GACnBrD,oBAAoB,CAACnD,SAA+C,CAAC,CAAA;AAEvE,EAAA,IAAIwG,eAAe,EAAE;IACnB,OAAOzkB,KAAK,CAACC,IAAI,CAACkkB,MAAM,CAAC,CAACjrB,GAAG,CAACgF,KAAA,IAAA;AAAA,MAAA,IAAC,CAACkV,IAAI,EAAEpX,KAAK,CAAC,GAAAkC,KAAA,CAAA;MAAA,OAAM;QAChDkV,IAAI;QACJpX,KAAK,EAAEyoB,eAAe,CAACzoB,KAAK,CAAA;OAC7B,CAAA;AAAA,KAAC,CAAC,CAAA;AACL,GAAA;AAEA,EAAA,OAAO,EAAE,CAAA;AACX;;AC1DA;;;AAGG;AAUH;;;AAGG;AACG,SAAU0oB,YAAYA,CAACC,IAAmB,EAAA;AAC9C,EAAA,MAAMC,MAAM,GAAG,IAAIhqB,IAAI,CAAC+pB,IAAI,CAAC,CAAA;AAC7B,EAAA,MAAME,GAAG,GAAGD,MAAM,CAACE,SAAS,EAAE,CAAA;AAC9B,EAAA,MAAMC,IAAI,GAAGH,MAAM,CAACI,UAAU,EAAE,GAAGH,GAAG,IAAIA,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACxDD,EAAAA,MAAM,CAACK,UAAU,CAACF,IAAI,CAAC,CAAA;EACvB,OAAOnqB,IAAI,CAACsqB,GAAG,CACbN,MAAM,CAACO,cAAc,EAAE,EACvBP,MAAM,CAACQ,WAAW,EAAE,EACpBR,MAAM,CAACI,UAAU,EAAE,CACpB,CAAA;AACH;;ACtBA,MAAMK,oBAAoB,GAAkD;AAC1EC,EAAAA,IAAI,EAAGX,IAAU,IAAK/pB,IAAI,CAACsqB,GAAG,CAACP,IAAI,CAACQ,cAAc,EAAE,CAAC;AACrDI,EAAAA,KAAK,EAAGZ,IAAU,IAAK/pB,IAAI,CAACsqB,GAAG,CAACP,IAAI,CAACQ,cAAc,EAAE,EAAER,IAAI,CAACS,WAAW,EAAE,CAAC;AAC1EI,EAAAA,IAAI,EAAGb,IAAU,IAAKD,YAAY,CAACC,IAAI,CAAC;EACxCE,GAAG,EAAGF,IAAU,IACd/pB,IAAI,CAACsqB,GAAG,CAACP,IAAI,CAACQ,cAAc,EAAE,EAAER,IAAI,CAACS,WAAW,EAAE,EAAET,IAAI,CAACK,UAAU,EAAE,CAAC;AACxES,EAAAA,IAAI,EAAGd,IAAU,IACf/pB,IAAI,CAACsqB,GAAG,CACNP,IAAI,CAACQ,cAAc,EAAE,EACrBR,IAAI,CAACS,WAAW,EAAE,EAClBT,IAAI,CAACK,UAAU,EAAE,EACjBL,IAAI,CAACe,WAAW,EAAE,CACnB;AACHC,EAAAA,MAAM,EAAGhB,IAAU,IACjB/pB,IAAI,CAACsqB,GAAG,CACNP,IAAI,CAACQ,cAAc,EAAE,EACrBR,IAAI,CAACS,WAAW,EAAE,EAClBT,IAAI,CAACK,UAAU,EAAE,EACjBL,IAAI,CAACe,WAAW,EAAE,EAClBf,IAAI,CAACiB,aAAa,EAAE,CACrB;AACHC,EAAAA,MAAM,EAAGlB,IAAU,IACjB/pB,IAAI,CAACsqB,GAAG,CACNP,IAAI,CAACQ,cAAc,EAAE,EACrBR,IAAI,CAACS,WAAW,EAAE,EAClBT,IAAI,CAACK,UAAU,EAAE,EACjBL,IAAI,CAACe,WAAW,EAAE,EAClBf,IAAI,CAACiB,aAAa,EAAE,EACpBjB,IAAI,CAACmB,aAAa,EAAE,CAAA;CAEzB,CAAA;AAED;AACgB,SAAAC,uBAAuBA,CAAAtoB,IAAA,EActC;EAAA,IAduC;IACtCvB,IAAI;IACJ+nB,aAAa;IACbxD,aAAa;IACbyD,UAAU;IACV8B,SAAS;AACT/H,IAAAA,SAAAA;AAQD,GAAA,GAAAxgB,IAAA,CAAA;AACC,EAAA,IAAIuC,KAAK,CAACa,OAAO,CAAC3E,IAAI,CAAC,IAAIA,IAAI,CAACyB,MAAM,KAAK,CAAC,EAAE;AAC5C,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AAEA,EAAA,MAAMsoB,UAAU,GAAGZ,oBAAoB,CAACW,SAAS,CAAC,CAAA;EAElD,IAAI,CAACC,UAAU,EAAE;AACf,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;EAEA,MAAM9B,MAAM,GAAGjoB,IAAI,CAAC6W,MAAM,CAAC,CAACC,GAAG,EAAEqR,IAAI,KAAI;AACvC,IAAA,MAAMroB,KAAK,GAAGqoB,IAAI,CAACH,UAAU,CAAC,CAAA;AAC9B,IAAA,MAAMgC,cAAc,GAAG,IAAItrB,IAAI,CAACoB,KAAe,CAAC,CAAA;AAChD,IAAA,MAAMmqB,QAAQ,GAAGF,UAAU,CAACC,cAAc,CAAC,CAAA;AAE3C,IAAA,IAAI,CAACE,KAAK,CAACD,QAAQ,CAAC,EAAE;AACpB,MAAA,IAAIE,aAAa,GAAGrT,GAAG,CAAC+F,GAAG,CAACoN,QAAQ,CAAC,CAAA;MACrC,IAAI,CAACE,aAAa,EAAE;AAClBA,QAAAA,aAAa,GAAG,EAAE,CAAA;AAClBrT,QAAAA,GAAG,CAACjT,GAAG,CAAComB,QAAQ,EAAEE,aAAa,CAAC,CAAA;AAClC,OAAA;MAEA,MAAM9B,eAAe,GAAG9C,SAAS,CAAC4C,IAAI,EAAEJ,aAAa,EAAExD,aAAa,CAAC,CAAA;MAErE,MAAM+D,OAAO,GAAGD,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAKnrB,SAAS,CAAA;AAEzE,MAAA,IAAIorB,OAAO,EAAE;AACX6B,QAAAA,aAAa,CAACzd,IAAI,CAAC2b,eAAe,CAAC,CAAA;AACnCvR,QAAAA,GAAG,CAACjT,GAAG,CAAComB,QAAQ,EAAEE,aAAa,CAAC,CAAA;AAClC,OAAA;AACF,KAAA;AAEA,IAAA,OAAOrT,GAAG,CAAA;AACZ,GAAC,EAAE,IAAIrT,GAAG,EAAE,CAAC,CAAA;AAEb,EAAA,MAAM8kB,eAAe,GACnBrD,oBAAoB,CAACnD,SAA+C,CAAC,CAAA;EAEvE,OAAO,CAAC,GAAGkG,MAAM,CAAChlB,OAAO,EAAE,CAAC,CACzBjG,GAAG,CAACgF,KAAA,IAAA;AAAA,IAAA,IAAC,CAACkV,IAAI,EAAEpX,KAAK,CAAC,GAAAkC,KAAA,CAAA;IAAA,OAAM;MACvBkV,IAAI;MACJpX,KAAK,EAAEyoB,eAAe,CAACzoB,KAAK,CAAA;KAC7B,CAAA;AAAA,GAAC,CAAC,CACFsR,IAAI,CAAC,CAACpM,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACkS,IAAI,GAAGjS,CAAC,CAACiS,IAAI,CAAC,CAAA;AACpC;;AC7FA;;;AAGG;AACa,SAAAkT,SAASA,CAAA7oB,IAAA,EAYxB;EAAA,IAZyB;IACxBvB,IAAI;IACJ+nB,aAAa;IACbxD,aAAa;IACbxB,KAAK;AACLhB,IAAAA,SAAAA;AAOD,GAAA,GAAAxgB,IAAA,CAAA;AACC,EAAA,IAAIuC,KAAK,CAACa,OAAO,CAAC3E,IAAI,CAAC,IAAIA,IAAI,CAACyB,MAAM,KAAK,CAAC,EAAE;AAC5C,IAAA,OAAO,EAAE,CAAA;AACX,GAAA;AAEA,EAAA,MAAM4oB,aAAa,GAAG,CAACltB,MAAM,CAACC,gBAAgB,EAAE,GAAG2lB,KAAK,CAAC,CAAC/lB,GAAG,CAC3D,CAACgmB,IAAI,EAAErU,KAAK,EAAE2b,GAAG,MAAM;AACrBC,IAAAA,GAAG,EAAE5b,KAAK;AACV6C,IAAAA,KAAK,EAAEwR,IAAI;AACXwH,IAAAA,GAAG,EAAE7b,KAAK,KAAK2b,GAAG,CAAC7oB,MAAM,GAAG,CAAC,GAAGtE,MAAM,CAACE,gBAAgB,GAAGitB,GAAG,CAAC3b,KAAK,GAAG,CAAC,CAAC;AACxEtN,IAAAA,MAAM,EAAE,EAAA;AACT,GAAA,CAAC,CACH,CAAA;AAEDrB,EAAAA,IAAI,CAAC8T,OAAO,CAAEpT,OAAO,IAAI;IACvB,MAAMxC,YAAY,GAAGqnB,SAAS,CAC5B7kB,OAAO,EACPqnB,aAAa,EACbxD,aAAa,CACJ,CAAA;IAEX,MAAM+D,OAAO,GAAGpqB,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAKhB,SAAS,CAAA;IAEnE,IAAI,CAACorB,OAAO,EAAE;AACZ,MAAA,OAAA;AACF,KAAA;AAEA,IAAA,MAAMmC,YAAY,GAAGJ,aAAa,CAACrW,IAAI,CACpCuW,GAAG,IAAKA,GAAG,CAAC/Y,KAAK,IAAItT,YAAY,IAAIqsB,GAAG,CAACC,GAAG,GAAGtsB,YAAY,CAC7D,CAAA;IAED,IAAI,CAACusB,YAAY,EAAE;AACjB,MAAA,OAAA;AACF,KAAA;AAEAA,IAAAA,YAAY,CAACppB,MAAM,CAACqL,IAAI,CAACxO,YAAY,CAAC,CAAA;AACxC,GAAC,CAAC,CAAA;AAEF,EAAA,MAAMqqB,eAAe,GAAGrD,oBAAoB,CAACnD,SAAS,CAAC,CAAA;EACvD,MAAM2I,eAAe,GAAGL,aAAa,CAACrtB,GAAG,CACtCytB,YAAY,IAAKA,YAAY,CAACppB,MAAM,CACtC,CAAA;AACD,EAAA,OAAOqpB,eAAe,CAAC1tB,GAAG,CAAEqE,MAAM,IAChCA,MAAM,CAACI,MAAM,GAAG8mB,eAAe,CAAClnB,MAAM,CAAC,GAAG,CAAC,CAC5C,CAAA;AACH;;AC3DA;;;AAGG;AACa,SAAAspB,WAAWA,CAAAppB,IAAA,EAY1B;EAAA,IAZ2B;IAC1BvB,IAAI;IACJ4qB,YAAY;IACZtH,kBAAkB;IAClBuH,YAAY;AACZrH,IAAAA,kBAAAA;AAOD,GAAA,GAAAjiB,IAAA,CAAA;EACC,OAAOvB,IAAI,CAAC6W,MAAM,CAChB,CAACC,GAAG,EAAEpW,OAAO,KAAI;IACf,MAAMoqB,MAAM,GAAGvF,SAAS,CACtB7kB,OAAO,EACPkqB,YAAY,EACZtH,kBAAkB,CACT,CAAA;IAEX,MAAMyH,QAAQ,GAAGD,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK5tB,SAAS,CAAA;IAExD,MAAM8tB,MAAM,GAAGzF,SAAS,CACtB7kB,OAAO,EACPmqB,YAAY,EACZrH,kBAAkB,CACT,CAAA;IAEX,MAAMyH,QAAQ,GAAGD,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK9tB,SAAS,CAAA;IAExD,IAAI6tB,QAAQ,IAAIE,QAAQ,EAAE;MACxBnU,GAAG,CAACpK,IAAI,CAAC,CAACoe,MAAM,EAAEE,MAAM,CAAC,CAAC,CAAA;AAC5B,KAAA;AAEA,IAAA,OAAOlU,GAAG,CAAA;GACX,EACD,EAAwB,CACzB,CAAA;AACH;;ACOA;;;;;;;;;;;;;;;;;;;;;AAqBG;AACG,MAAOoU,mBAAoB,SAAQtL,YAAsC,CAAA;EAAA7S,WAAA,GAAA;AAAA,IAAA,KAAA,CAAA,GAAAmN,SAAA,CAAA,CAAA;IAAA,IACrEiR,CAAAA,MAAM,GAAW,EAAE,CAAA;IAAA,IACnBC,CAAAA,SAAS,GAAkB,EAAE,CAAA;IAAA,IAC7BC,CAAAA,0BAA0B,GAA8B,EAAE,CAAA;IAAA,IAC1DC,CAAAA,iCAAiC,GACvC,EAAE,CAAA;AAAA,GAAA;AAEerJ,EAAAA,cAAcA,CAC/BxhB,OAA4B,EAC5Buf,WAAmB,EAAA;IAEnB,OAAO;AACL,MAAA,GAAG,KAAK,CAACD,eAAe,CAACtf,OAAO,EAAEuf,WAAW,CAAC;AAC9Cxe,MAAAA,IAAI,EAAE,SAAS;AACfxB,MAAAA,IAAI,EAAE,IAAI,CAAC6f,KAAK,CAACoF,SAAAA;KAClB,CAAA;AACH,GAAA;AAEA;;;;AAIG;EACHsG,SAASA,CAACjiB,KAAgB,EAAA;IACxB,IAAI,CAAC6hB,MAAM,GAAG7hB,KAAe,CAAA;AAC7B,IAAA,IAAI,CAAC8hB,SAAS,CAAC3pB,MAAM,GAAG,CAAC,CAAA;AAC3B,GAAA;AAEA;EACA+pB,4BAA4BA,CAAChiB,OAAkC,EAAA;IAC7D,IAAI,CAAC6hB,0BAA0B,GAAG7hB,OAAO,CAAA;AACzC,IAAA,IAAI,CAAC4hB,SAAS,CAAC3pB,MAAM,GAAG,CAAC,CAAA;AAC3B,GAAA;EAEUgqB,oBAAoBA,CAACnoB,aAA4B,EAAA;AACzD;AACA;AACA,IAAA,MAAMooB,UAAU,GAAG,IAAI,CAACJ,iCAAiC,CAAA;AACzD,IAAA,IACE,IAAI,CAACF,SAAS,CAAC3pB,MAAM,IACrBiqB,UAAU,CAACpoB,aAAa,IACxBqoB,yBAAY,CAACD,UAAU,CAACpoB,aAAa,EAAEA,aAAa,CAAC,EACrD;AACA,MAAA,OAAA;AACF,KAAA;AAEA,IAAA,IAAI,CAAC8nB,SAAS,GAAGpW,YAAY,CAAC;MAC5B1L,KAAK,EAAE,IAAI,CAAC6hB,MAAM;AAClB5hB,MAAAA,UAAU,EAAE,IAAI,CAACsW,KAAK,CAACtW,UAAU;MACjC,GAAG,IAAI,CAAC8hB,0BAA0B;MAElC/nB,aAAa;AACb+P,MAAAA,iBAAiB,EAAE,IAAI,CAACwM,KAAK,CAACxM,iBAAiB;AAC/CC,MAAAA,eAAe,EAAE,IAAI,CAACuM,KAAK,CAACvM,eAAAA;AAC7B,KAAA,CAAC,CAAA;IAEFoY,UAAU,CAACpoB,aAAa,GAAGA,aAAa,CAAA;AAC1C,GAAA;AAEA;;;;AAIG;EACHsoB,WAAWA,CAAArqB,IAAA,EAMV;IAAA,IANW;MACV8B,OAAO;AACPC,MAAAA,aAAAA;AAID,KAAA,GAAA/B,IAAA,CAAA;AACC,IAAA,IAAI,CAAC6pB,SAAS,GAAGhoB,eAAe,CAAC;MAC/BC,OAAO;MACPC,aAAa;AACb,MAAA,GAAG,IAAI,CAAC+nB,0BAAAA;AACT,KAAA,CAAC,CAAA;AACF,IAAA,IAAI,CAACC,iCAAiC,CAAChoB,aAAa,GAAGA,aAAa,CAAA;AACtE,GAAA;AAEe8e,EAAAA,WAAWA,GAAA;IAAA,IAAA;AACxB,MAAA,MAAM,IAAIvjB,KAAK,CAAC,wCAAwC,CAAC,CAAA;MAAC,OAAA8d,OAAA,CAAAC,OAAA,EAAA,CAAA;AAC5D,KAAC,QAAAzP,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAEKuV,EAAAA,UAAUA,CAAA1gB,KAAA,EAAA;IAAA,IAAC;AACfnB,MAAAA,MAAM,GAAG,GAAG;AACZkhB,MAAAA,SAAS,GAAG,OAAO;MACnBwC,aAAa;MACb9jB,OAAO;MACPuf,WAAW;AACX1c,MAAAA,aAAAA;AACsB,KAAA,GAAAtB,KAAA,CAAA;IAAA,IAAA;MAAA,MAAA8f,KAAA,GAOP,IAAI,CAAA;MANnB,IAAIC,SAAS,KAAK,QAAQ,EAAE;AAC1B,QAAA,MAAM,IAAIljB,KAAK,CAAC,+CAA+C,CAAC,CAAA;AAClE,OAAA;AAEA;MACA,IAAKgC,MAAM,IAAIA,MAAM,KAAK,GAAG,IAAKkhB,SAAS,KAAK,OAAO,EAAE;AACvD8J,QAAAA,YAAY,CAAC/J,KAAA,CAAKsJ,SAAS,EAAEvqB,MAAM,CAAC,CAAA;AACtC,OAAA;MAEA,MAAMirB,gBAAgB,GAAGhK,KAAA,CAAKiK,oBAAoB,CAChDzoB,aAAa,EACb7C,OAAO,EACPuf,WAAW,CACZ,CAAA;MAED,IAAI8L,gBAAgB,CAACrqB,MAAM,KAAK,CAAC,IAAIsgB,SAAS,KAAK,OAAO,EAAE;QAC1D,OAAApF,OAAA,CAAAC,OAAA,CAAO;AAAC9c,UAAAA,KAAK,EAAE,IAAA;SAAK,CAAA,CAAA;AACtB,OAAA;AAEA,MAAA,MAAMyoB,eAAe,GAAGrD,oBAAoB,CAACnD,SAAS,CAAC,CAAA;MACvD,OAAApF,OAAA,CAAAC,OAAA,CAAO;AACL9c,QAAAA,KAAK,EAAEyoB,eAAe,CAACuD,gBAAgB,EAAEjrB,MAAM,EAAE0jB,aAAa,CAAA;OAC/D,CAAA,CAAA;AACH,KAAC,QAAApX,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAEc0V,EAAAA,YAAYA,CAAAxgB,KAAA,EAAA;IAAA,IAAC;AAC1B0f,MAAAA,SAAS,GAAG,OAAO;MACnBgB,KAAK;MACLliB,MAAM;MACN0jB,aAAa;MACb9jB,OAAO;MACPuf,WAAW;AACX1c,MAAAA,aAAAA;AACwB,KAAA,GAAAjB,KAAA,CAAA;IAAA,IAAA;MAAA,MAAAggB,MAAA,GACC,IAAI,CAAA;MAA7B,MAAMyJ,gBAAgB,GAAGzJ,MAAA,CAAK0J,oBAAoB,CAChDzoB,aAAa,EACb7C,OAAO,EACPuf,WAAW,CACZ,CAAA;AAED6L,MAAAA,YAAY,CAACxJ,MAAA,CAAK+I,SAAS,EAAEvqB,MAAM,CAAC,CAAA;AAEpC,MAAA,IAAI,CAACwhB,MAAA,CAAK+I,SAAS,CAAC3pB,MAAM,EAAE;AAC1B,QAAA,OAAAkb,OAAA,CAAAC,OAAA,CAAO,EAAE,CAAA,CAAA;AACX,OAAA;AAEA,MAAA,OAAAD,OAAA,CAAAC,OAAA,CAAOwN,SAAS,CAAC;AACfpqB,QAAAA,IAAI,EAAE8rB,gBAAgB;AACtB/D,QAAAA,aAAa,EAAEiE,gBAAgB,CAACnrB,MAAM,CAAC;QACvC0jB,aAAa;QACbxB,KAAK;AACLhB,QAAAA,SAAAA;AACD,OAAA,CAAC,CAAA,CAAA;AACJ,KAAC,QAAA5U,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAEc0U,EAAAA,aAAaA,CAAArf,KAAA,EAAA;IAAA,IAAC;MAC3B3B,MAAM;AACNkhB,MAAAA,SAAS,GAAG,OAAO;MACnBC,eAAe;MACfuC,aAAa;MACb9jB,OAAO;MACPuf,WAAW;AACX1c,MAAAA,aAAAA;AACuB,KAAA,GAAAd,KAAA,CAAA;IAAA,IAAA;MAAA,MAAAmgB,MAAA,GACE,IAAI,CAAA;MAA7B,MAAMmJ,gBAAgB,GAAGnJ,MAAA,CAAKoJ,oBAAoB,CAChDzoB,aAAa,EACb7C,OAAO,EACPuf,WAAW,CACZ,CAAA;AAED,MAAA,IAAI,CAAC8L,gBAAgB,CAACrqB,MAAM,EAAE;AAC5B,QAAA,OAAAkb,OAAA,CAAAC,OAAA,CAAO,EAAE,CAAA,CAAA;AACX,OAAA;MAEAiP,YAAY,CAAClJ,MAAA,CAAKyI,SAAS,EAAEvqB,MAAM,EAAEmhB,eAAyB,CAAC,CAAA;MAE/D,MAAMiG,MAAM,GAAGH,mBAAmB,CAAC;AACjC9nB,QAAAA,IAAI,EAAE8rB,gBAAgB;AACtB/D,QAAAA,aAAa,EAAEiE,gBAAgB,CAAChK,eAAe,IAAInhB,MAAM,CAAC;QAC1D0jB,aAAa;AACbyD,QAAAA,UAAU,EAAEnnB,MAAM;AAClBkhB,QAAAA,SAAAA;AACD,OAAA,CAAC,CAAA;AAEF,MAAA,OAAApF,OAAA,CAAAC,OAAA,CAAOqL,MAAM,IAAI,EAAE,CAAA,CAAA;AACrB,KAAC,QAAA9a,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAEcgW,EAAAA,UAAUA,CAAAjgB,KAAA,EAAA;IAAA,IAAC;MACxBmgB,WAAW;MACXE,WAAW;MACXD,kBAAkB;MAClBE,kBAAkB;MAClB/iB,OAAO;MACPuf,WAAW;AACX1c,MAAAA,aAAAA;AACsB,KAAA,GAAAJ,KAAA,CAAA;IAAA,IAAA;MAAA,MAAA4f,MAAA,GACG,IAAI,CAAA;MAA7B,MAAMgJ,gBAAgB,GAAGhJ,MAAA,CAAKiJ,oBAAoB,CAChDzoB,aAAa,EACb7C,OAAO,EACPuf,WAAW,CACZ,CAAA;AAED,MAAA,IAAI,CAAC8L,gBAAgB,CAACrqB,MAAM,EAAE;AAC5B,QAAA,OAAAkb,OAAA,CAAAC,OAAA,CAAO,EAAE,CAAA,CAAA;AACX,OAAA;MAEAiP,YAAY,CAAC/I,MAAA,CAAKsI,SAAS,EAAE/H,WAAW,EAAEE,WAAW,CAAC,CAAA;AAEtD,MAAA,OAAA5G,OAAA,CAAAC,OAAA,CAAO+N,WAAW,CAAC;AACjB3qB,QAAAA,IAAI,EAAE8rB,gBAAgB;AACtBlB,QAAAA,YAAY,EAAEoB,gBAAgB,CAAC3I,WAAW,CAAC;QAC3CC,kBAAkB;AAClBuH,QAAAA,YAAY,EAAEmB,gBAAgB,CAACzI,WAAW,CAAC;AAC3CC,QAAAA,kBAAAA;AACD,OAAA,CAAC,CAAA,CAAA;AACJ,KAAC,QAAArW,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAEcuW,EAAAA,QAAQA,CAAAuI,KAAA,EAAA;IAAA,IAAC;MACtBzrB,OAAO;MACP0rB,kBAAkB;MAClBC,gBAAgB;MAChBvI,MAAM;MACNC,aAAa;MACbuD,gBAAgB;AAChBtD,MAAAA,MAAM,GAAG,CAAC;AACVtB,MAAAA,KAAK,GAAG,EAAE;MACV/hB,OAAO;MACPuf,WAAW;AACX1c,MAAAA,aAAAA;AACoB,KAAA,GAAA2oB,KAAA,CAAA;IAAA,IAAA;MAAA,MAAA/I,MAAA,GAEG,IAAI,CAAA;AAD3B;MACA,IAAI4I,gBAAgB,GAAG5I,MAAA,CAAK6I,oBAAoB,CAC9CzoB,aAAa,EACb7C,OAAO,EACPuf,WAAW,CACZ,CAAA;AAED,MAAA,IAAI,CAAC8L,gBAAgB,CAACrqB,MAAM,EAAE;QAC5B,OAAAkb,OAAA,CAAAC,OAAA,CAAO;AAACuF,UAAAA,IAAI,EAAE,EAAE;AAAE6B,UAAAA,UAAU,EAAE,CAAA;SAAE,CAAA,CAAA;AAClC,OAAA;AAEA;MACA,IAAIkI,kBAAkB,IAAIC,gBAAgB,EAAE;AAC1CL,QAAAA,gBAAgB,GAAGA,gBAAgB,CAAC3qB,MAAM,CACvCirB,GAAG,IACFA,GAAG,CAACF,kBAAkB,CAAC,IACvBhsB,MAAM,CAACksB,GAAG,CAACF,kBAAkB,CAAY,CAAC,CACvCnV,WAAW,EAAE,CACb5Y,QAAQ,CAAC+B,MAAM,CAACisB,gBAAgB,CAAC,CAACpV,WAAW,EAAE,CAAC,CACtD,CAAA;AACH,OAAA;AAEA;AACA,MAAA,IAAIoL,IAAI,GAAG+E,YAAY,CAAC4E,gBAAgB,EAAE;QACxClI,MAAM;AACNuD,QAAAA,eAAe,EAAEtD,aAAa;AAC9BuD,QAAAA,gBAAAA;AACD,OAAA,CAAC,CAAA;AACF,MAAA,MAAMpD,UAAU,GAAG7B,IAAI,CAAC1gB,MAAM,CAAA;AAE9B;MACA0gB,IAAI,GAAGA,IAAI,CAACnI,KAAK,CACfvU,IAAI,CAACyJ,GAAG,CAAC4U,MAAM,EAAEE,UAAU,CAAC,EAC5Bve,IAAI,CAACyJ,GAAG,CAAC4U,MAAM,GAAGtB,KAAK,EAAEwB,UAAU,CAAC,CACrC,CAAA;AAED;AACA7B,MAAAA,IAAI,GAAGA,IAAI,CAACnlB,GAAG,CAAEqvB,MAAmB,IAAI;QACtC,MAAMC,MAAM,GAAgB,EAAE,CAAA;AAC9B,QAAA,KAAK,MAAMzrB,MAAM,IAAIL,OAAO,EAAE;AAC5B8rB,UAAAA,MAAM,CAACzrB,MAAM,CAAC,GAAGwrB,MAAM,CAACxrB,MAAM,CAAC,CAAA;AACjC,SAAA;AACA,QAAA,OAAOyrB,MAAM,CAAA;AACf,OAAC,CAAC,CAAA;MAEF,OAAA3P,OAAA,CAAAC,OAAA,CAAO;QAACuF,IAAI;AAAE6B,QAAAA,UAAAA;OAA4B,CAAA,CAAA;AAC5C,KAAC,QAAA7W,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAEckX,EAAAA,aAAaA,CAAAkI,KAAA,EAAA;IAAA,IAAC;MAC3B1rB,MAAM;MACN2jB,QAAQ;MACRzC,SAAS;MACTC,eAAe;MACfuC,aAAa;MACb9jB,OAAO;MACPuf,WAAW;AACX1c,MAAAA,aAAAA;AACyB,KAAA,GAAAipB,KAAA,CAAA;IAAA,IAAA;MAAA,MAAAnJ,MAAA,GACA,IAAI,CAAA;MAA7B,MAAM0I,gBAAgB,GAAG1I,MAAA,CAAK2I,oBAAoB,CAChDzoB,aAAa,EACb7C,OAAO,EACPuf,WAAW,CACZ,CAAA;AAED,MAAA,IAAI,CAAC8L,gBAAgB,CAACrqB,MAAM,EAAE;QAC5B,OAAAkb,OAAA,CAAAC,OAAA,CAAO;AAACuF,UAAAA,IAAI,EAAE,EAAA;SAAG,CAAA,CAAA;AACnB,OAAA;MAEA0J,YAAY,CAACzI,MAAA,CAAKgI,SAAS,EAAEvqB,MAAM,EAAEmhB,eAAyB,CAAC,CAAA;MAE/D,MAAMG,IAAI,GACR0H,uBAAuB,CAAC;AACtB7pB,QAAAA,IAAI,EAAE8rB,gBAAgB;AACtB/D,QAAAA,aAAa,EAAEiE,gBAAgB,CAAChK,eAAe,IAAInhB,MAAM,CAAC;AAC1DmnB,QAAAA,UAAU,EAAEnnB,MAAM;AAClBipB,QAAAA,SAAS,EAAEtF,QAAQ;QACnBzC,SAAS;AACTwC,QAAAA,aAAAA;OACD,CAAC,IAAI,EAAE,CAAA;MAEV,OAAA5H,OAAA,CAAAC,OAAA,CAAO;AAACuF,QAAAA,IAAAA;OAAK,CAAA,CAAA;AACf,KAAC,QAAAhV,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAEc8V,EAAAA,QAAQA,CAAAuJ,KAAA,EAAA;IAAA,IAAC;MACtB3rB,MAAM;MACNJ,OAAO;MACPuf,WAAW;AACX1c,MAAAA,aAAAA;AACoB,KAAA,GAAAkpB,KAAA,CAAA;IAAA,IAAA;MAAA,MAAA7I,MAAA,GACP,IAAI,CAAA;AAAjBkI,MAAAA,YAAY,CAAClI,MAAA,CAAKyH,SAAS,EAAEvqB,MAAM,CAAC,CAAA;MAEpC,MAAMirB,gBAAgB,GAAGnI,MAAA,CAAKoI,oBAAoB,CAChDzoB,aAAa,EACb7C,OAAO,EACPuf,WAAW,CACZ,CAAA;AAED,MAAA,IAAI,CAAC2D,MAAA,CAAKyH,SAAS,CAAC3pB,MAAM,EAAE;AAC1B;AACA;AACA,QAAA,OAAAkb,OAAA,CAAAC,OAAA,CAAO,IAAI,CAAA,CAAA;AACb,OAAA;MAEA,OAAAD,OAAA,CAAAC,OAAA,CAAO;QACL1N,GAAG,EAAEgW,oBAAoB,CAAChW,GAAG,CAAC4c,gBAAgB,EAAEjrB,MAAM,CAAC;AACvDsO,QAAAA,GAAG,EAAE+V,oBAAoB,CAAC/V,GAAG,CAAC2c,gBAAgB,EAAEjrB,MAAM,CAAA;OACvD,CAAA,CAAA;AACH,KAAC,QAAAsM,CAAA,EAAA;AAAA,MAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,KAAA;AAAA,GAAA;AAED;;AAEG;AAEK4e,EAAAA,oBAAoBA,CAC1BzoB,aAA6B,EAC7B7C,OAAgC,EAChCuf,WAAoB,EAAA;AAEpB3a,IAAAA,MAAM,CAAC/B,aAAa,EAAE,qCAAqC,CAAC,CAAA;AAC5D,IAAA,IAAI,CAACmoB,oBAAoB,CAACnoB,aAAa,CAAC,CAAA;IACxC,OAAOzB,YAAY,CACjB,IAAI,CAACupB,SAAS,EACd7U,oBAAoB,CAACyJ,WAAW,EAAEvf,OAAO,IAAI,IAAI,CAACof,KAAK,CAACpf,OAAO,CAAC,EAChE,IAAI,CAACof,KAAK,CAAClf,sBAAsB,IAAI,KAAK,CAC3C,CAAA;AACH,GAAA;AACD,CAAA;AAED,SAASkrB,YAAYA,CACnB/pB,QAAuB,EACa;AAEpC;AAEA;EACA,MAAMtB,OAAO,GAAGsD,KAAK,CAACC,IAAI,CAAC,IAAI8P,GAAG,CAAC,EAAA,CAAAmG,KAAA,CAAAC,IAAA,CAAAC,SAAA,EAAWld,CAAAA,CAAAA,CAAAA,GAAG,CAACgvB,gBAAgB,CAAC,CAACnpB,IAAI,EAAE,CAAC,CAAC,CAAA;EAE5E,MAAM4pB,WAAW,GAAGzrB,MAAM,CAACC,IAAI,CAACa,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;AAE5C,EAAA,MAAM4qB,cAAc,GAAGlsB,OAAO,CAACW,MAAM,CAClCN,MAAM,IAAK,CAAC4rB,WAAW,CAACtuB,QAAQ,CAAC0C,MAAM,CAAC,CAC1C,CAAA;EAED,IAAI6rB,cAAc,CAACjrB,MAAM,EAAE;IACzB,MAAM,IAAIuV,kBAAkB,CAC1B,CAAsB0V,mBAAAA,EAAAA,cAAc,CAACjtB,IAAI,CAAC,IAAI,CAAC,CAAA,CAAE,CAClD,CAAA;AACH,GAAA;AACF,CAAA;AAEA,SAASusB,gBAAgBA,CAACxrB,OAA0B,EAAA;AAClD,EAAA,OAAOsD,KAAK,CAACa,OAAO,CAACnE,OAAO,CAAC,GACzBA,OAAO,GACP,OAAOA,OAAO,KAAK,QAAQ,GACzB,CAACA,OAAO,CAAC,GACT,EAAE,CAAA;AACV;;ACvcA;AACA;AACA;AAkCamsB,MAAAA,aAAa,GAAAA,UACxBnjB,OAA6B,EAAA;EAAA,IAAA;IAE7B,MAAM;MACJojB,cAAc;AACdC,MAAAA,mBAAmB,GAAG/X,gCAAgC;MACtDiQ,QAAQ;AACR1R,MAAAA,iBAAiB,GAAG,IAAI;MACxBoM,eAAe;AACfhf,MAAAA,OAAAA;AACD,KAAA,GAAG+I,OAAO,CAAA;IAEX,MAAM8J,eAAe,GAAG,IAAI,CAAA;AAE5B,IAAA,MAAMgL,aAAa,GAAkB;MACnCsO,cAAc;MACdvZ,iBAAiB;MACjBC,eAAe;AACfwZ,MAAAA,CAAC,EAAE/H,QAAAA;KACJ,CAAA;AAED,IAAA,IAAI8H,mBAAmB,EAAE;AACvBvO,MAAAA,aAAa,CAACuO,mBAAmB,GAAG3sB,MAAM,CAAC2sB,mBAAmB,CAAC,CAAA;AACjE,KAAA;AACA,IAAA,IAAIpN,eAAe,EAAE;MACnBnB,aAAa,CAACmB,eAAe,GAAGA,eAAe,CAAA;AACjD,KAAA;AACA,IAAA,IAAIhf,OAAO,EAAE;MACX6d,aAAa,CAAC7d,OAAO,GAAGA,OAAO,CAAA;AACjC,KAAA;AAEA,IAAA,OAAAkc,OAAA,CAAAC,OAAA,CAAOyB,UAAU,CAAgB,OAAO,EAAE7U,OAAO,EAAE8U,aAAa,CAAC,CAACjB,IAAI,CACnEpR,MAAM,KAAM;AACX,MAAA,GAAIA,MAAyB;MAC7B8gB,YAAY,EAAE,IAAIjI,iBAAiB,CAAC;AAClC,QAAA,GAAGtb,OAAO;AACV;QACA6J,iBAAiB;AACjBC,QAAAA,eAAAA;OACD,CAAA;AACF,KAAA,CAAC,CACH,CAAA,CAAA;AACH,GAAC,QAAAnG,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;AC9ED;AACA;AACA;AAiCa6f,MAAAA,aAAa,GAAAA,UACxBxjB,OAA6B,EAAA;EAAA,IAAA;IAE7B,MAAM;MACJojB,cAAc;AACdC,MAAAA,mBAAmB,GAAG/X,gCAAgC;AACtDzB,MAAAA,iBAAiB,GAAG,IAAI;MACxB4R,SAAS;AACTxkB,MAAAA,OAAAA;AACD,KAAA,GAAG+I,OAAO,CAAA;IAEX,MAAM8J,eAAe,GAAG,IAAI,CAAA;AAE5B,IAAA,MAAMgL,aAAa,GAAkB;MACnCsO,cAAc;AACd1V,MAAAA,IAAI,EAAE+N,SAAS;MACf5R,iBAAiB;AACjBC,MAAAA,eAAAA;KACD,CAAA;AAED,IAAA,IAAIuZ,mBAAmB,EAAE;AACvBvO,MAAAA,aAAa,CAACuO,mBAAmB,GAAG3sB,MAAM,CAAC2sB,mBAAmB,CAAC,CAAA;AACjE,KAAA;AACA,IAAA,IAAIpsB,OAAO,EAAE;MACX6d,aAAa,CAAC7d,OAAO,GAAGA,OAAO,CAAA;AACjC,KAAA;AAEA,IAAA,OAAAkc,OAAA,CAAAC,OAAA,CAAOyB,UAAU,CAAgB,OAAO,EAAE7U,OAAO,EAAE8U,aAAa,CAAC,CAACjB,IAAI,CACnEpR,MAAM,KAAM;AACX,MAAA,GAAIA,MAAyB;MAC7B8gB,YAAY,EAAE,IAAI/H,iBAAiB,CAAC;AAClC,QAAA,GAAGxb,OAAO;AACV;QACA6J,iBAAiB;AACjBC,QAAAA,eAAAA;OACD,CAAA;AACF,KAAA,CAAC,CACH,CAAA,CAAA;AACH,GAAC,QAAAnG,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;ACzED;AACA;AACA;AAca8f,MAAAA,eAAe,GAAAA,UAC1BzjB,OAA+B,EAAA;EAAA,IAAA;IAE/B,MAAM;AAACyb,MAAAA,SAAAA;AAAU,KAAA,GAAGzb,OAAO,CAAA;AAC3B,IAAA,MAAM8U,aAAa,GAAkB;AAACpH,MAAAA,IAAI,EAAE+N,SAAAA;KAAU,CAAA;IAEtD,OAAAtI,OAAA,CAAAC,OAAA,CAAOyB,UAAU,CACf,SAAS,EACT7U,OAAO,EACP8U,aAAa,CACsB,CAAA,CAAA;AACvC,GAAC,QAAAnR,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;AC3BD;AACA;AACA;AAoBa+f,MAAAA,YAAY,GAAAA,UACvB1jB,OAA4B,EAAA;EAAA,IAAA;IAE5B,MAAM;MAACyb,SAAS;AAAExkB,MAAAA,OAAAA;AAAQ,KAAA,GAAG+I,OAAO,CAAA;AACpC,IAAA,MAAM8U,aAAa,GAAkB;AAACpH,MAAAA,IAAI,EAAE+N,SAAAA;KAAU,CAAA;AACtD,IAAA,IAAIxkB,OAAO,EAAE;MACX6d,aAAa,CAAC7d,OAAO,GAAGA,OAAO,CAAA;AACjC,KAAA;IAEA,OAAAkc,OAAA,CAAAC,OAAA,CAAOyB,UAAU,CACf,QAAQ,EACR7U,OAAO,EACP8U,aAAa,CACmB,CAAA,CAAA;AACpC,GAAC,QAAAnR,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;ACpCD;AACA;AACA;AAmCaggB,MAAAA,kBAAkB,GAAAA,UAC7B3jB,OAAkC,EAAA;EAAA,IAAA;IAElC,MAAM;MACJojB,cAAc;AACdC,MAAAA,mBAAmB,GAAG9X,qCAAqC;MAC3DgQ,QAAQ;AACR1R,MAAAA,iBAAiB,GAAG,SAAS;MAC7BoM,eAAe;AACfhf,MAAAA,OAAAA;AACD,KAAA,GAAG+I,OAAO,CAAA;IAEX,MAAM8J,eAAe,GAAG,SAAS,CAAA;AAEjC,IAAA,MAAMgL,aAAa,GAAkB;MACnCsO,cAAc;AACdE,MAAAA,CAAC,EAAE/H,QAAQ;MACX1R,iBAAiB;AACjBC,MAAAA,eAAAA;KACD,CAAA;AAED,IAAA,IAAIuZ,mBAAmB,EAAE;AACvBvO,MAAAA,aAAa,CAACuO,mBAAmB,GAAG3sB,MAAM,CAAC2sB,mBAAmB,CAAC,CAAA;AACjE,KAAA;AACA,IAAA,IAAIpN,eAAe,EAAE;MACnBnB,aAAa,CAACmB,eAAe,GAAGA,eAAe,CAAA;AACjD,KAAA;AACA,IAAA,IAAIhf,OAAO,EAAE;MACX6d,aAAa,CAAC7d,OAAO,GAAGA,OAAO,CAAA;AACjC,KAAA;AAEA,IAAA,OAAAkc,OAAA,CAAAC,OAAA,CAAOyB,UAAU,CAAgB,OAAO,EAAE7U,OAAO,EAAE8U,aAAa,CAAC,CAACjB,IAAI,CACnEpR,MAAM,KAAM;AACX,MAAA,GAAIA,MAAyB;MAC7B8gB,YAAY,EAAE,IAAIjI,iBAAiB,CAAC;AAClC,QAAA,GAAGtb,OAAO;AACV;QACA6J,iBAAiB;AACjBC,QAAAA,eAAAA;OACD,CAAA;AACF,KAAA,CAAC,CACH,CAAA,CAAA;AACH,GAAC,QAAAnG,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;AC/ED;AACA;AACA;AAkCaigB,MAAAA,kBAAkB,GAAAA,UAC7B5jB,OAAkC,EAAA;EAAA,IAAA;IAElC,MAAM;MACJojB,cAAc;AACdC,MAAAA,mBAAmB,GAAG9X,qCAAqC;AAC3D1B,MAAAA,iBAAiB,GAAG,SAAS;MAC7B4R,SAAS;AACTxkB,MAAAA,OAAAA;AACD,KAAA,GAAG+I,OAAO,CAAA;IAEX,MAAM8J,eAAe,GAAG,SAAS,CAAA;AAEjC,IAAA,MAAMgL,aAAa,GAAkB;MACnCsO,cAAc;AACd1V,MAAAA,IAAI,EAAE+N,SAAS;MACf5R,iBAAiB;AACjBC,MAAAA,eAAAA;KACD,CAAA;AAED,IAAA,IAAIuZ,mBAAmB,EAAE;AACvBvO,MAAAA,aAAa,CAACuO,mBAAmB,GAAG3sB,MAAM,CAAC2sB,mBAAmB,CAAC,CAAA;AACjE,KAAA;AACA,IAAA,IAAIpsB,OAAO,EAAE;MACX6d,aAAa,CAAC7d,OAAO,GAAGA,OAAO,CAAA;AACjC,KAAA;AAEA,IAAA,OAAAkc,OAAA,CAAAC,OAAA,CAAOyB,UAAU,CAAgB,OAAO,EAAE7U,OAAO,EAAE8U,aAAa,CAAC,CAACjB,IAAI,CACnEpR,MAAM,KAAM;AACX,MAAA,GAAIA,MAAyB;MAC7B8gB,YAAY,EAAE,IAAI/H,iBAAiB,CAAC;AAClC,QAAA,GAAGxb,OAAO;AACV;QACA6J,iBAAiB;AACjBC,QAAAA,eAAAA;OACD,CAAA;AACF,KAAA,CAAC,CACH,CAAA,CAAA;AACH,GAAC,QAAAnG,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;AC1ED;AACA;AACA;AAcakgB,MAAAA,oBAAoB,GAAAA,UAC/B7jB,OAAoC,EAAA;EAAA,IAAA;IAEpC,MAAM;AAACyb,MAAAA,SAAAA;AAAU,KAAA,GAAGzb,OAAO,CAAA;AAC3B,IAAA,MAAM8U,aAAa,GAAkB;AAACpH,MAAAA,IAAI,EAAE+N,SAAAA;KAAU,CAAA;IAEtD,OAAAtI,OAAA,CAAAC,OAAA,CAAOyB,UAAU,CACf,SAAS,EACT7U,OAAO,EACP8U,aAAa,CAC2B,CAAA,CAAA;AAC5C,GAAC,QAAAnR,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;AC3BD;AACA;AACA;AAuCamgB,MAAAA,iBAAiB,GAAAA,UAC5B9jB,OAAiC,EAAA;EAAA,IAAA;IAEjC,MAAM;MACJhJ,OAAO;MACPC,OAAO;AACP4S,MAAAA,iBAAiB,GAAGsB,kBAAkB;MACtCoQ,QAAQ;AACRtC,MAAAA,cAAc,GAAG5N,uBAAuB;MACxC4K,eAAe;AACfmN,MAAAA,cAAAA;AAAc,KACf,GAAGpjB,OAAO,CAAA;IAEX,MAAM8J,eAAe,GAAG,KAAK,CAAA;AAE7B,IAAA,MAAMgL,aAAa,GAAkB;MACnCjL,iBAAiB;MACjBC,eAAe;AACfmP,MAAAA,cAAc,EAAEA,cAAc,CAAC5T,QAAQ,EAAE;AACzCie,MAAAA,CAAC,EAAE/H,QAAAA;KACJ,CAAA;AAED,IAAA,IAAIvkB,OAAO,EAAE;MACX8d,aAAa,CAAC9d,OAAO,GAAGA,OAAO,CAACf,IAAI,CAAC,GAAG,CAAC,CAAA;AAC3C,KAAA;AACA,IAAA,IAAIgB,OAAO,EAAE;MACX6d,aAAa,CAAC7d,OAAO,GAAGA,OAAO,CAAA;AACjC,KAAA;AACA,IAAA,IAAIgf,eAAe,EAAE;MACnBnB,aAAa,CAACmB,eAAe,GAAGA,eAAe,CAAA;AACjD,KAAA;AACA,IAAA,IAAImN,cAAc,EAAE;MAClBtO,aAAa,CAACsO,cAAc,GAAGA,cAAc,CAAA;AAC/C,KAAA;AAEA,IAAA,OAAAjQ,OAAA,CAAAC,OAAA,CAAOyB,UAAU,CAAgB,OAAO,EAAE7U,OAAO,EAAE8U,aAAa,CAAC,CAACjB,IAAI,CACnEpR,MAAM,KAAM;AACX,MAAA,GAAIA,MAAyB;MAC7B8gB,YAAY,EAAE,IAAIjI,iBAAiB,CAAC;AAClC,QAAA,GAAGtb,OAAO;AACV;QACA6J,iBAAiB;QACjBC,eAAe;AACfmP,QAAAA,cAAAA;OACD,CAAA;AACF,KAAA,CAAC,CACH,CAAA,CAAA;AACH,GAAC,QAAAtV,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;ACxFD;AACA;AACA;AAsCaogB,MAAAA,iBAAiB,GAAAA,UAC5B/jB,OAAiC,EAAA;EAAA,IAAA;IAEjC,MAAM;MACJhJ,OAAO;MACPC,OAAO;AACP4S,MAAAA,iBAAiB,GAAGsB,kBAAkB;MACtCsQ,SAAS;AACTxC,MAAAA,cAAc,GAAG5N,uBAAuB;AACxC+X,MAAAA,cAAAA;AACD,KAAA,GAAGpjB,OAAO,CAAA;IAEX,MAAM8J,eAAe,GAAG,KAAK,CAAA;AAE7B,IAAA,MAAMgL,aAAa,GAAkB;AACnCpH,MAAAA,IAAI,EAAE+N,SAAS;MACf5R,iBAAiB;MACjBC,eAAe;AACfmP,MAAAA,cAAc,EAAEA,cAAc,CAAC5T,QAAQ,EAAE;KAC1C,CAAA;AAED,IAAA,IAAIrO,OAAO,EAAE;MACX8d,aAAa,CAAC9d,OAAO,GAAGA,OAAO,CAACf,IAAI,CAAC,GAAG,CAAC,CAAA;AAC3C,KAAA;AACA,IAAA,IAAIgB,OAAO,EAAE;MACX6d,aAAa,CAAC7d,OAAO,GAAGA,OAAO,CAAA;AACjC,KAAA;AACA,IAAA,IAAImsB,cAAc,EAAE;MAClBtO,aAAa,CAACsO,cAAc,GAAGA,cAAc,CAAA;AAC/C,KAAA;AAEA,IAAA,OAAAjQ,OAAA,CAAAC,OAAA,CAAOyB,UAAU,CAAgB,OAAO,EAAE7U,OAAO,EAAE8U,aAAa,CAAC,CAACjB,IAAI,CACnEpR,MAAM,KAAM;AACX,MAAA,GAAIA,MAAyB;MAC7B8gB,YAAY,EAAE,IAAI/H,iBAAiB,CAAC;AAClC,QAAA,GAAGxb,OAAO;AACV;QACA6J,iBAAiB;QACjBC,eAAe;AACfmP,QAAAA,cAAAA;OACD,CAAA;AACF,KAAA,CAAC,CACH,CAAA,CAAA;AACH,GAAC,QAAAtV,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;ACnFD;AACA;AACA;AAcaqgB,MAAAA,mBAAmB,GAAAA,UAC9BhkB,OAAmC,EAAA;EAAA,IAAA;IAEnC,MAAM;AAACyb,MAAAA,SAAAA;AAAU,KAAA,GAAGzb,OAAO,CAAA;AAC3B,IAAA,MAAM8U,aAAa,GAAkB;AAACpH,MAAAA,IAAI,EAAE+N,SAAAA;KAAU,CAAA;IAEtD,OAAAtI,OAAA,CAAAC,OAAA,CAAOyB,UAAU,CACf,SAAS,EACT7U,OAAO,EACP8U,aAAa,CAC0B,CAAA,CAAA;AAC3C,GAAC,QAAAnR,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;AC3BD;AACA;AACA;AAgBasgB,MAAAA,KAAK,GAAAA,UAChBjkB,OAAqB,EAAA;EAAA,IAAA;IAErB,MAAM;MACJ8Q,UAAU,GAAGoE,eAAe,CAACpE,UAAU;MACvCyB,YAAY,GAAG2C,eAAe,CAAC3C,YAAY;MAC3C4C,QAAQ,GAAGtiB,SAAS,EAAE;MACtB2f,UAAU;MACVnB,cAAc;MACdkK,QAAQ;AACRtF,MAAAA,eAAAA;AAAe,KAChB,GAAGjW,OAAO,CAAA;AACX,IAAA,MAAM8U,aAAa,GAAkB;AAACwO,MAAAA,CAAC,EAAE/H,QAAAA;KAAS,CAAA;AAElD,IAAA,IAAItF,eAAe,EAAE;MACnBnB,aAAa,CAACmB,eAAe,GAAGvJ,IAAI,CAACC,SAAS,CAACsJ,eAAe,CAAC,CAAA;AACjE,KAAA;IAEA,MAAM9D,OAAO,GAAGX,aAAa,CAAC;MAACV,UAAU;AAAEO,MAAAA,cAAAA;AAAe,KAAA,CAAC,CAAA;AAC3D,IAAA,MAAMgB,OAAO,GAAG;AACdgD,MAAAA,aAAa,EAAE,CAAA,OAAA,EAAUrV,OAAO,CAAC+U,WAAW,CAAE,CAAA;AAC9C,MAAA,GAAG/U,OAAO,CAACqS,OAAAA;KACZ,CAAA;AACD,IAAA,MAAMD,UAAU,GAAG;AAACxf,MAAAA,MAAM,EAAEuiB,QAAQ;MAAE,GAAGL,aAAAA;KAAc,CAAA;AAEvD,IAAA,MAAMpD,YAAY,GAAoB;AACpCK,MAAAA,WAAW,EAAE,KAAK;MAClBuD,UAAU,EAAEtV,OAAO,CAACqR,cAAc;AAClCrZ,MAAAA,IAAI,EAAE,OAAO;MACbsZ,MAAM,EAAE5E,IAAI,CAACC,SAAS,CAACyF,UAAU,EAAE1e,SAAS,EAAE,CAAC,CAAA;KAChD,CAAA;AAAC,IAAA,OAAAyf,OAAA,CAAAC,OAAA,CACWlB,qBAAqB,CAAc;MAC9CC,OAAO;MACPC,UAAU;MACVC,OAAO;MACPX,YAAY;MACZa,YAAY;AACZC,MAAAA,UAAAA;AACD,KAAA,CAAC,CAAA,CAAA;AACJ,GAAC,QAAA7O,CAAA,EAAA;AAAA,IAAA,OAAAwP,OAAA,CAAAgB,MAAA,CAAAxQ,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA;;ACzDD;AACA;AACA,MAAMugB,iBAAiB,GAAG,GAAG,CAAA;AAE7B;AACA,MAAMC,IAAI,GAAG,CAAC,CAAA;AAEd;;;;;;AAMG;AACa,SAAAC,qBAAqBA,CACnC5V,QAA0C,EAC1C6V,QAAgB,EAAA;AAEhB;AACA;EACA,MAAMC,UAAU,GAAGroB,IAAI,CAACsoB,IAAI,CAACF,QAAQ,GAAGH,iBAAiB,CAAC,CAAA;EAC1D,MAAMM,kBAAkB,GAAI,CAAC,GAAG,CAAC,IAAKhW,QAAQ,CAACjH,IAAI,GAAG+c,UAAU,CAAC,CAAA;EACjE,MAAMG,mBAAmB,GAAGxoB,IAAI,CAACa,GAAG,CAClC,CAAC,GAAGb,IAAI,CAACyoB,GAAG,CAAEzoB,IAAI,CAACD,EAAE,GAAGwS,QAAQ,CAACmW,QAAQ,GAAI,GAAG,CAAC,CAClD,CAAA;AAED;AACA,EAAA,OAAO1oB,IAAI,CAAC0J,GAAG,CACb,CAAC,EACD1J,IAAI,CAACuI,KAAK,CAACggB,kBAAkB,GAAGC,mBAAmB,GAAGN,IAAI,CAAC,CAC5D,CAAA;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","x_google_ignoreList":[6,7,8,12,13,14,35]}