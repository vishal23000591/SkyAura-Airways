import { FilterType } from './constants.js';
import { Filter } from './types.js';
type FilterTypeOptions<T extends FilterType> = {
    type: T;
    column: string;
} & Filter[T];
export type AddFilterOptions = FilterTypeOptions<FilterType.IN> | FilterTypeOptions<FilterType.BETWEEN> | FilterTypeOptions<FilterType.CLOSED_OPEN> | FilterTypeOptions<FilterType.TIME> | FilterTypeOptions<FilterType.STRING_SEARCH>;
/**
 * Adds a {@link Filter} to the filter set. Any previous filters with the same
 * `column` and `type` will be replaced.
 */
export declare function addFilter(filters: Record<string, Filter>, { column, type, values, owner }: AddFilterOptions): Record<string, Filter>;
export type RemoveFilterOptions = {
    column: string;
    owner?: string;
};
/**
 * Removes one or more {@link Filter filters} from the filter set. If only
 * `column` is specified, then all filters on that column are removed. If both
 * `column` and `owner` are specified, then only filters for that column
 * associated with the owner are removed.
 */
export declare function removeFilter(filters: Record<string, Filter>, { column, owner }: RemoveFilterOptions): Record<string, Filter>;
/**
 * Clears all {@link Filter filters} from the filter set.
 */
export declare function clearFilters(filters: Record<string, Filter>): Record<string, Filter>;
export type HasFilterOptions = {
    column: string;
    owner?: string;
};
export declare function hasFilter(filters: Record<string, Filter>, { column, owner }: HasFilterOptions): boolean;
export type GetFilterOptions<T extends FilterType> = {
    column: string;
    type: T;
    owner?: string;
};
export declare function getFilter<T extends FilterType>(filters: Record<string, Filter>, { column, type, owner }: GetFilterOptions<T>): Filter[T] | null;
export {};
