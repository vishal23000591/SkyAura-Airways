import { Feature } from 'geojson';
import { FilterLogicalOperator, Filters } from '../types.js';
import { FeatureData } from '../types-internal.js';
/** @experimental Prefer type definition from deck.gl. */
export type _DataFilterExtensionProps = {
    filterRange: number[][];
    updateTriggers: Record<string, string>;
    getFilterValue: (feature: Feature | FeatureData) => number[];
};
/**
 * Creates props for DataFilterExtension, from `@deck.gl/extensions`, given
 * a set of filters. Requires that DataFilterExtension is initialized with
 * filterSize=4, where the CARTO filters will occupy the first two slots.
 *
 * @example To create a deck.gl layer with GPU data filtering:
 * ```typescript
 * import {DataFilterExtension} from '@deck.gl/extensions';
 * import {VectorTileLayer} from '@deck.gl/layers';
 * import {getDataFilterExtensionProps} from '@carto/api-client';
 *
 * const layer = new VectorTileLayer({
 *  data: data,
 *  extensions: [new DataFilterExtension({filterSize: 4})],
 *  ...getDataFilterExtensionProps(filters),
 * });
 * ```
 */
export declare function getDataFilterExtensionProps(filters: Filters, filtersLogicalOperator?: FilterLogicalOperator): _DataFilterExtensionProps;
