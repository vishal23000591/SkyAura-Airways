import { Filter } from './types.js';
/**
 * @privateRemarks Source: @carto/react-widgets
 * @internal
 */
export declare function getApplicableFilters(owner?: string, filters?: Record<string, Filter>): Record<string, Filter>;
type Row<T> = Record<string, T> | Record<string, T>[] | T[] | T;
/**
 * Due to each data warehouse having its own behavior with columns,
 * we need to normalize them and transform every key to lowercase.
 *
 * @privateRemarks Source: @carto/react-widgets
 * @internal
 */
export declare function normalizeObjectKeys<T, R extends Row<T>>(el: R): R;
/** @privateRemarks Source: @carto/react-core */
export declare function assert(condition: unknown, message: string): asserts condition;
/**
 * @privateRemarks Source: @carto/react-core
 * @internal
 */
export declare class InvalidColumnError extends Error {
    protected static readonly NAME = "InvalidColumnError";
    constructor(message: string);
    static is(error: unknown): boolean;
}
export declare function isEmptyObject(object: object): boolean;
/** @internal */
export declare const isObject: (x: unknown) => boolean;
/** @internal */
export declare const isPureObject: (x: any) => boolean;
export {};
