/// <reference types="../../index.d.ts" />
import { PropertyValues } from 'lit';
import { PublicLitElement as LitElement, JsxNode, TargetedEvent } from '@arcgis/lumina';
import { InteractiveComponent } from '../../utils/interactive';
import { ComboboxChildElement } from '../calcite-combobox/interfaces';
import { Scale, SelectionMode } from '../interfaces';
import { IconNameOrString } from '../calcite-icon/interfaces';

/**
 * @slot  - A slot for adding nested `calcite-combobox-item`s.
 * @slot [content-end] - A slot for adding non-actionable elements after the component's content.
 * @slot [content-start] - A slot for adding non-actionable elements before the component's content.
 */
export declare class ComboboxItem extends LitElement {
    /**
     * When `true`, the component is active.
     *
     * @default false
     */
    active: boolean;
    /** Specifies the parent and grandparent items, which are set on `calcite-combobox`. */
    ancestors: ComboboxChildElement[];
    /** A description for the component, which displays below the heading. */
    description: string;
    /**
     * When `true`, interaction is prevented and the component is displayed with lower opacity.
     *
     * @default false
     */
    disabled: boolean;
    /**
     * When `true`, omits the component from the `calcite-combobox` filtered search results.
     *
     * @default false
     */
    filterDisabled: boolean;
    /** The `id` attribute of the component. When omitted, a globally unique identifier is used. */
    guid: string;
    /** The component's text. */
    heading: string;
    /** Specifies an icon to display. */
    icon: IconNameOrString;
    /**
     * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
     *
     * @default false
     */
    iconFlipRtl: boolean;
    /** The component's label. */
    label: any;
    /** Provides additional metadata to the component used in filtering. */
    metadata: Record<string, unknown>;
    /**
     * When `true`, the component is selected.
     *
     * @default false
     */
    get selected(): boolean;
    set selected(value: boolean);
    /**
     * The component's short heading.
     *
     * When provided, the short heading will be displayed in the component's selection.
     *
     * It is recommended to use 5 characters or fewer.
     */
    shortHeading: string;
    /**
     * The component's text.
     *
     * @deprecated Use `heading` instead.
     */
    textLabel: string;
    /**
     * The component's value.
     *
     * @required
     */
    value: any;
    /** Fires whenever the component is selected or unselected. */
    readonly calciteComboboxItemChange: TargetedEvent<this, void>;
}
