{"version":3,"file":"lit-element-renderer.js","sourceRoot":"","sources":["../src/lib/lit-element-renderer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ElementRenderer} from './element-renderer.js';\nimport {LitElement, CSSResult, ReactiveElement} from 'lit';\nimport {_$LE} from 'lit-element/private-ssr-support.js';\nimport {\n  ariaMixinAttributes,\n  HYDRATE_INTERNALS_ATTR_PREFIX,\n} from '@lit-labs/ssr-dom-shim';\nimport {renderValue} from './render-value.js';\nimport type {RenderInfo} from './render-value.js';\nimport type {RenderResult} from './render-result.js';\n\nexport type Constructor<T> = {new (): T};\n\nconst {attributeToProperty, changedProperties} = _$LE;\n\n// We want consumers to be able to implement their own createRenderRoot\n// and to detect whether it breaks during SSR. Due to this, we\n// patch the createRenderRoot method on LitElement.\n// If this method is not patched, the SSR call will fail, as adoptStyles\n// is called, which will in turn call browser native APIs.\n// TODO: Check if we could enable supportsAdoptingStyleSheets during SSR\n// and polyfill CSSStyleSheet.\nLitElement.prototype['createRenderRoot'] = function () {\n  return (\n    this.shadowRoot ??\n    this.attachShadow(\n      (this.constructor as typeof ReactiveElement).shadowRootOptions\n    )\n  );\n};\n\n/**\n * ElementRenderer implementation for LitElements\n */\nexport class LitElementRenderer extends ElementRenderer {\n  override element: LitElement;\n\n  static override matchesClass(ctor: typeof HTMLElement) {\n    // This property needs to remain unminified.\n    return (ctor as unknown as typeof LitElement)['_$litElement$'];\n  }\n\n  constructor(tagName: string) {\n    super(tagName);\n    this.element = new (customElements.get(this.tagName)!)() as LitElement;\n\n    // Reflect internals AOM attributes back to the DOM prior to hydration to\n    // ensure search bots can accurately parse element semantics prior to\n    // hydration. This is called whenever an instance of ElementInternals is\n    // created on an element to wire up the getters/setters for the ARIAMixin\n    // properties.\n    const internals = (\n      this.element as object as {__internals: ElementInternals}\n    ).__internals;\n    if (internals) {\n      for (const [ariaProp, ariaAttribute] of Object.entries(\n        ariaMixinAttributes\n      )) {\n        const value = internals[ariaProp as keyof ARIAMixin];\n        if (value && !this.element.hasAttribute(ariaAttribute)) {\n          this.element.setAttribute(ariaAttribute, value);\n          this.element.setAttribute(\n            `${HYDRATE_INTERNALS_ATTR_PREFIX}${ariaAttribute}`,\n            value\n          );\n        }\n      }\n    }\n  }\n\n  override get shadowRootOptions() {\n    return (\n      (this.element.constructor as typeof LitElement).shadowRootOptions ??\n      super.shadowRootOptions\n    );\n  }\n\n  override connectedCallback() {\n    // Optionally call connectedCallback via setting: `litSsrCallConnectedCallback`\n    // Enable this flag to process events dispatched handled via connectedCallback.\n    if (globalThis.litSsrCallConnectedCallback) {\n      // Prevent enabling asynchronous updating by overriding enableUpdating\n      // with a no-op.\n      this.element['enableUpdating'] = function () {};\n      // We also depend on patching createRenderRoot, which is done above.\n      try {\n        this.element.connectedCallback();\n      } catch (e) {\n        const className = this.element.constructor.name;\n        console.warn(\n          `Calling ${className}.connectedCallback() resulted in a thrown ` +\n            'error. Consider removing `litSsrCallConnectedCallback` to ' +\n            'prevent calling connectedCallback or add isServer checks to ' +\n            'your code to prevent calling browser API during SSR.'\n        );\n        throw e;\n      }\n    }\n\n    const propertyValues = changedProperties(this.element);\n    // Call LitElement's `willUpdate` method.\n    // Note, this method is required not to use DOM APIs.\n    this.element?.['willUpdate'](propertyValues);\n    // We are currently skipping the controller hook `hostUpdate`.\n    // Reflect properties to attributes by calling into ReactiveElement's\n    // update, which _only_ reflects attributes\n    ReactiveElement.prototype['update'].call(this.element, propertyValues);\n  }\n\n  override attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    attributeToProperty(this.element as LitElement, name, value);\n  }\n\n  override *renderShadow(renderInfo: RenderInfo): RenderResult {\n    // Render styles.\n    const styles = (this.element.constructor as typeof LitElement)\n      .elementStyles;\n    if (styles !== undefined && styles.length > 0) {\n      yield '<style>';\n      for (const style of styles) {\n        yield (style as CSSResult).cssText;\n      }\n      yield '</style>';\n    }\n    // Render template\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    yield* renderValue((this.element as any).render(), renderInfo);\n  }\n\n  override *renderLight(renderInfo: RenderInfo): RenderResult {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const value = (this.element as any)?.renderLight();\n    if (value) {\n      yield* renderValue(value, renderInfo);\n    } else {\n      yield '';\n    }\n  }\n}\n"]}