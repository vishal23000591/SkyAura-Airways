/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{_ as t}from"../chunks/tslib.es6.js";import{property as r}from"../core/accessorSupport/decorators/property.js";import"../core/has.js";import"../core/Logger.js";import"../core/RandomLCG.js";import{subclass as e}from"../core/accessorSupport/decorators/subclass.js";import{GoToManager as s}from"./2d/GoToManager.js";import o from"./2d/input/MapViewInputManager.js";import{isSupportedScreenPointEvent as i,createScreenPointFromSupportedEvent as n}from"./support/screenUtils.js";const a=a=>{let p=class extends a{constructor(...t){super(...t),this.goToManager=new s({view:this}),this.inputManager=new o({view:this}),this.addHandles([this.on("resize",(t=>this.stateManager.resize(t.width,t.height)))])}get interacting(){return this.navigating}get stationary(){return!this.animation&&!this.navigating&&!this.resizing&&this.stationaryManager.stationary}on(t,r,e,s){const o=this.inputManager&&this.viewEvents.on(t,r,e,s);return o||super.on(t,r)}hasEventListener(t){return super.hasEventListener(t)||this.viewEvents.hasHandler(t)}goTo(t,r){return this.goToManager.goTo(t,r)}toMap(t){if(!this.ready)return null;const r=i(t)?n(this,t):t;return this.stateManager.toMap(r)}};return t([r()],p.prototype,"goToManager",void 0),t([r({readOnly:!0})],p.prototype,"interacting",null),t([r()],p.prototype,"stationary",null),t([r({readOnly:!0})],p.prototype,"inputManager",void 0),p=t([e("esri.views.Viewport2DMixin")],p),p};export{a as Viewport2DMixin};
