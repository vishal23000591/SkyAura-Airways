/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{_ as o,a as t}from"../../../../../../../../chunks/tslib.es6.js";import{GraphShaderModule as e,FragmentOutput as i,location as p,uniform as r,define as s,option as n,input as l,VertexInput as a,UniformGroup as c,FragmentInput as d}from"../../../GraphShaderModule.js";import{Vec3 as y,Vec4 as u,ifElse as v,texture2D as g,sign as h,Vec2 as x,Sampler2D as m,Mat3 as f,Float as b}from"../../../graph/glsl.js";import{getPixelLocation as j,isOutside as k,getPixel as P,ProjectionConfig as M}from"./projection.js";class w extends a{}o([p(0,x)],w.prototype,"position",void 0);class C extends d{}class _ extends c{}o([r(m)],_.prototype,"texture",void 0),o([r(f)],_.prototype,"dvsMat3",void 0),o([r(x)],_.prototype,"coordScale",void 0),o([r(x)],_.prototype,"srcImageSize",void 0),o([r(b)],_.prototype,"opacity",void 0);class E extends c{}o([r(m)],E.prototype,"maskTexture",void 0);class O extends e{constructor(){super(...arguments),this.applyProjection=!0,this.lookupProjection=!1,this.bilinear=!1,this.bicubic=!1,this.nearestOnEdge=!1,this.applyPixelMask=!1}vertex(o){const t=o.position,{dvsMat3:e,coordScale:i}=this.config,p=e.multiply(new y(t.multiply(i),1));return{uv:t,glPosition:new u(p,1)}}fragment(o){const t=new i,e=j(o.uv,this.applyProjection?this.projectionConfig:void 0,this.lookupProjection),p=v(k(e),new u(0,0,0,0),this._colorize(e));let r=p.a.multiply(this.config.opacity);if(this.applyPixelMask){const t=this._getPixelMask(o.uv);r=r.multiply(t)}return t.fragColor=new u(p.rgb,1).multiply(r),t}_getPixel(o){const{config:t,bicubic:e,bilinear:i,nearestOnEdge:p}=this;return P(o,t,{bicubic:e,bilinear:i,nearestOnEdge:p})}_getPixelMask(o){const{maskTexture:t}=this.pixelMaskConfig,e=g(t,o);return h(e.a)}}o([s],O.prototype,"applyProjection",void 0),o([s],O.prototype,"lookupProjection",void 0),o([s],O.prototype,"bilinear",void 0),o([s],O.prototype,"bicubic",void 0),o([s],O.prototype,"nearestOnEdge",void 0),o([s],O.prototype,"applyPixelMask",void 0),o([r(_)],O.prototype,"config",void 0),o([n(M)],O.prototype,"projectionConfig",void 0),o([n(E)],O.prototype,"pixelMaskConfig",void 0),o([t(0,l(w))],O.prototype,"vertex",null),o([t(0,l(C))],O.prototype,"fragment",null);export{O as BaseRasterColorizerShader,E as PixelMaskConfig,C as RasterColorizerFragmentInput,_ as RasterConfig};
