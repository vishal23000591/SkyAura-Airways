/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{_ as t,a as e}from"../../../../../../../chunks/tslib.es6.js";import{animationDebugFlags as i}from"../../../../../../../symbols/cim/animationDebugFlags.js";import{location as s,input as o,ComputeVertexInput as l}from"../../GraphShaderModule.js";import{Float as r,Vec4 as a,or as n,Bool as d,mix as m,Mat3 as u,ifElse as p,lessThan as h,Vec3 as x,distance as c,greaterThan as y,Vec2 as f,negate as w,step as g}from"../../graph/glsl.js";import{AAnimatedShader as v,getValue as S,AAnimatedVertexInput as b,AAnimatedFragmentInput as _}from"./AAnimatedShader.js";import{AnimationParamIndex as C}from"./enums.js";import{MarkerConstants as V}from"../markers/markerConstants.js";import{distPointTriangle as z,xyToBarycentric as P,inTriangle as M,failHittest as N}from"../shaders/hittestUtils.js";import{getBitBool as k}from"../shaders/utils.js";import{getVisualVariableColor as j,getVisualVariableOpacity as D}from"../shaders/vvUtils.js";class R extends b{}t([s(9,f)],R.prototype,"uv",void 0),t([s(10,r)],R.prototype,"angle",void 0);class F extends l{}t([s(11,f)],F.prototype,"offsetNextVertex1",void 0),t([s(12,f)],F.prototype,"offsetNextVertex2",void 0),t([s(13,f)],F.prototype,"textureUVNextVertex1",void 0),t([s(14,f)],F.prototype,"textureUVNextVertex2",void 0);class T extends _{}function U(t,e,i,s){return e.multiply(t.x).add(i.multiply(t.y)).add(s.multiply(t.z))}class q extends v{constructor(){super(...arguments),this.type="AnimatedMarkerShader",this.computeAttributes={offset:["offsetNextVertex1","offsetNextVertex2"],uv:["textureUVNextVertex1","textureUVNextVertex2"]}}vertex(t,e){const i=t.uv.divide(this.mosaicInfo.size),{position:s,animationPointer:o,evalParams:l,isOutline:p,unscaledDistanceToPx:h,vvScale:x,strokeWidth:c,scaleSymbolsProportionally:y,scale:f,isSDF:w,baseSize:g,clip:v}=this._vertexPreamble(t,t.angle,t.lineLength||new r(0)),b=this._toNdc(s);let _=S(o,C.fromColor,l);_=new a(_.rgb.multiply(_.a),_.a);let z=S(o,C.toColor,l);z=new a(z.rgb.multiply(z.a),z.a);let P=S(o,C.colorMix,l);P=new a(P.rgb.multiply(P.a),P.a);const M=S(o,C.toOpacity,l).a,N=S(o,C.opacityMix,l).a,R=j(this,t.id,_,n(k(t.bitset,V.bitset.colorLocked),new d(p))),F=m(R,z,P),T=D(this,t.id),U=m(T,M,N),q=F.multiply(U),A=this.clip(t.id,t.zoomRange).add(v.multiply(2)),I=h.multiply(x);return{glPosition:new a(b,A,1),uv:i,color:q.multiply(new r(1).subtract(p)),outlineColor:q.multiply(p),distanceToPx:I,strokeWidth:c.multiply(m(new r(1),f,y)),isOutline:p,isSDF:w,...this.maybeRunHittest(t,e,{pos:t.pos,size:g,sizeCorrection:new r(1),isMapAligned:new r(1),vvRotationMat3:new u(1,0,0,0,1,0,0,0,1),placementMat3:new u(1,0,0,0,1,0,0,0,1),outlineSize:new r(1),distanceToPx:I,isSDF:w})}}fragment(t){let e=this._getColor(t.uv,{color:t.color,distanceToPx:t.distanceToPx,isSDF:t.isSDF,outlineColor:t.outlineColor,outlineSize:t.strokeWidth});return i.spotlightAnimatedSymbols&&(e=e.add(new a(0,.3,0,.3))),this.getFragmentOutput(e,t)}hittest(t,e,i){return p(h(i.size,this.hittestRequest.smallSymbolSizeThreshold),this._hittestSmallMarker(t,e,i),this._hittestMarker(t,e,i))}_hittestSmallMarker(t,e,i){const{position:s,distance:o,smallSymbolDistance:l}=this.hittestRequest,r=o.subtract(l),{viewMat3:a,tileMat3:n}=this.view,d=a.multiply(n).multiply(new x(i.pos,1)).xy,m=i.size.multiply(.5);return c(d,s).subtract(m).add(r)}_hittestMarker(t,e,i){const s=this._vertexPreamble({...t},t.angle,new r(0)).position,o=this._vertexPreamble({...t,offset:e.offsetNextVertex1},t.angle,new r(0)).position,l=this._vertexPreamble({...t,offset:e.offsetNextVertex2},t.angle,new r(0)).position,a=this.hittestRequest.position,n=this.hittestRequest.distance,d=z(a,s,o,l);return p(y(d,n),d,this._hittestSamples(s,o,l,t,e,i))}_hittestSamples(t,e,i,s,o,l){const{outlineSize:n,isSDF:d,distanceToPx:m}=l,u=this.hittestRequest.position,p=this.hittestRequest.distance,h=P(u.add(new f(w(p),w(p))),t,e,i),x=P(u.add(new f(0,w(p))),t,e,i),c=P(u.add(new f(p,w(p))),t,e,i),y=P(u.add(new f(w(p),0)),t,e,i),v=P(u,t,e,i),S=P(u.add(new f(p,0)),t,e,i),b=P(u.add(new f(w(p),p)),t,e,i),_=P(u.add(new f(0,p)),t,e,i),C=P(u.add(new f(p,p)),t,e,i),V=s.uv.divide(this.mosaicInfo.size),z=o.textureUVNextVertex1.divide(this.mosaicInfo.size),k=o.textureUVNextVertex2.divide(this.mosaicInfo.size),j={color:new a(1,1,1,1),outlineSize:n,outlineColor:new a(1,1,1,1),isSDF:d,distanceToPx:m};let D=new r(0);return D=D.add(M(h).multiply(this._getColor(U(h,V,z,k),j).a)),D=D.add(M(x).multiply(this._getColor(U(x,V,z,k),j).a)),D=D.add(M(c).multiply(this._getColor(U(c,V,z,k),j).a)),D=D.add(M(y).multiply(this._getColor(U(y,V,z,k),j).a)),D=D.add(M(v).multiply(this._getColor(U(v,V,z,k),j).a)),D=D.add(M(S).multiply(this._getColor(U(S,V,z,k),j).a)),D=D.add(M(b).multiply(this._getColor(U(b,V,z,k),j).a)),D=D.add(M(_).multiply(this._getColor(U(_,V,z,k),j).a)),D=D.add(M(C).multiply(this._getColor(U(C,V,z,k),j).a)),g(D,new r(.05)).multiply(N(this.hittestRequest))}}t([e(0,o(R)),e(1,o(F))],q.prototype,"vertex",null),t([e(0,o(T))],q.prototype,"fragment",null);export{T as AnimatedMarkerFragmentInput,q as AnimatedMarkerShader,R as AnimatedMarkerVertexInput};
