/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{_ as o}from"../../../../../../../../../chunks/tslib.es6.js";import{uniform as t,define as e,UniformGroup as r}from"../../../../GraphShaderModule.js";import{Vec2 as s,Float as i,reduce2D as n,Vec4 as l,clamp as a,texture2D as p,FixedArray2D as c}from"../../../../graph/glsl.js";import{mirror as u}from"../surface.js";import{BaseRasterProcessorShader as d}from"./BaseRasterProcessorShader.js";class m extends r{}o([t(c.ofType(i,5,5,!0))],m.prototype,"kernel",void 0),o([t(s)],m.prototype,"clampRange",void 0);class h extends d{constructor(){super(...arguments),this.type="ConvolutionShader",this.rows=3,this.cols=3}_process(o){const{rows:t,cols:e}=this,r=new s(Math.floor(t/2),Math.floor(e/2)),{texture:c,srcImageSize:d}=this.config,m=new i(1).divide(d),{kernel:h}=this.convolutionConfig,g=n(h,{initialValue:new l(0,0,0,1),xRange:[0,t],yRange:[0,e],callback:(t,e,n,a)=>{const d=new s(new i(n),new i(a)).subtract(r).multiply(m),h=p(c,u(o.add(d))),g=h.rgb.multiply(e).add(t.rgb),f=h.a.multiply(t.a);return new l(g,f)}}),{clampRange:f}=this.convolutionConfig;return new l(a(g.rgb,f.x,f.y),1).multiply(g.a)}}o([e],h.prototype,"rows",void 0),o([e],h.prototype,"cols",void 0),o([t(m)],h.prototype,"convolutionConfig",void 0);export{h as ConvolutionShader};
