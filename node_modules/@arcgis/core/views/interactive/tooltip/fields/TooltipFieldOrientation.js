/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import{formatAngle as r}from"../../../../core/quantityFormatUtils.js";import{createAngle as o}from"../../../../core/quantityUtils.js";import{property as i}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import"../../../../core/RandomLCG.js";import{subclass as s}from"../../../../core/accessorSupport/decorators/subclass.js";import{makeQuantityParser as e,sanitizeAngle as n}from"./parsingAndFormattingUtils.js";import{TooltipField as a}from"./TooltipField.js";import{getNormalizedGeographicOrientation as p}from"../../../support/angularMeasurementUtils.js";let c=class extends a{constructor(t){super(t),this.precision=1}normalizeCtorArgs(t){const i=t=>t.inputUnitInfos.angle.unit;return{name:"orientation",actual:null,parse:e({createQuantity:(t,r)=>o(t,i(r),"geographic"),sanitize:n}),format:t=>{const o=p(t);return r(o,"geographic",this.precision)},formatForInputMode:(t,r)=>{const o=p(t);return r.formatters.scalar(o)},suffix:t=>t.inputUnitInfos.angle.abbreviation,title:t=>t.messages.sketch.orientation,...t}}};t([i()],c.prototype,"precision",void 0),c=t([s("esri.views.interactive.tooltip.fields.TooltipFieldOrientation")],c);export{c as TooltipFieldOrientation};
