/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{neverReached as e}from"../../../../../../core/compilerUtils.js";import{NormalType as a}from"../attributes/NormalAttribute.glsl.js";import{VertexNormal as r}from"../attributes/VertexNormal.glsl.js";import{VertexPosition as o}from"../attributes/VertexPosition.glsl.js";import{NormalsDoubleSidedMode as i}from"./Normals.glsl.js";import{glsl as d}from"../../shaderModules/glsl.js";function l(l,m){const t=l.fragment;switch(m.doubleSidedMode){case i.None:t.code.add(d`vec3 _adjustDoublesided(vec3 normal) {
return normal;
}`);break;case i.View:l.include(o,m),t.code.add(d`vec3 _adjustDoublesided(vec3 normal) {
return dot(normal, vPositionWorldCameraRelative) > 0.0 ? -normal : normal;
}`);break;case i.WindingOrder:t.code.add(d`vec3 _adjustDoublesided(vec3 normal) {
return gl_FrontFacing ? normal : -normal;
}`);break;default:e(m.doubleSidedMode);case i.COUNT:}switch(m.normalType){case a.Attribute:case a.Compressed:l.include(r,m),t.main.add(d`vec3 fragmentFaceNormal = _adjustDoublesided(normalize(vNormalWorld));
vec3 fragmentFaceNormalView = gl_FrontFacing ? normalize(vNormalView) : -normalize(vNormalView);`);break;case a.ScreenDerivative:l.include(o,m),t.main.add(d`vec3 fragmentFaceNormal = normalize(cross(dFdx(vPositionWorldCameraRelative), dFdy(vPositionWorldCameraRelative)));
vec3 fragmentFaceNormalView = normalize(cross(dFdx(vPosition_view), dFdy(vPosition_view)));`);default:case a.COUNT:}m.shadeNormals?t.main.add(d`vec3 fragmentShadingNormal = fragmentFaceNormal;`):m.spherical?(l.include(o,m),t.main.add(d`vec3 fragmentShadingNormal = normalize(positionWorld());`)):t.main.add(d`vec3 fragmentShadingNormal = vec3(0.0, 0.0, 1.0);`)}export{l as computeFragmentNormals};
