/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{IDENTITY as r}from"../../../../../../core/libs/gl-matrix-2/factories/mat3f64.js";import{TextureCoordinateType as e}from"../attributes/TextureCoordinateAttribute.glsl.js";import{glsl as o}from"../../shaderModules/glsl.js";import{Matrix3PassUniform as a}from"../../shaderModules/Matrix3PassUniform.js";function s(e,s){s.hasColorTextureTransform?(e.varyings.add("colorUV","vec2"),e.vertex.uniforms.add(new a("colorTextureTransformMatrix",(e=>e.colorTextureTransformMatrix??r))).code.add(o`void forwardColorUV(){
colorUV = (colorTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`)):e.vertex.code.add(o`void forwardColorUV(){}`)}function i(s,i){i.hasNormalTextureTransform&&i.textureCoordinateType!==e.None?(s.varyings.add("normalUV","vec2"),s.vertex.uniforms.add(new a("normalTextureTransformMatrix",(e=>e.normalTextureTransformMatrix??r))).code.add(o`void forwardNormalUV(){
normalUV = (normalTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`)):s.vertex.code.add(o`void forwardNormalUV(){}`)}function t(s,i){i.hasEmissionTextureTransform&&i.textureCoordinateType!==e.None?(s.varyings.add("emissiveUV","vec2"),s.vertex.uniforms.add(new a("emissiveTextureTransformMatrix",(e=>e.emissiveTextureTransformMatrix??r))).code.add(o`void forwardEmissiveUV(){
emissiveUV = (emissiveTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`)):s.vertex.code.add(o`void forwardEmissiveUV(){}`)}function d(s,i){i.hasOcclusionTextureTransform&&i.textureCoordinateType!==e.None?(s.varyings.add("occlusionUV","vec2"),s.vertex.uniforms.add(new a("occlusionTextureTransformMatrix",(e=>e.occlusionTextureTransformMatrix??r))).code.add(o`void forwardOcclusionUV(){
occlusionUV = (occlusionTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`)):s.vertex.code.add(o`void forwardOcclusionUV(){}`)}function n(s,i){i.hasMetallicRoughnessTextureTransform&&i.textureCoordinateType!==e.None?(s.varyings.add("metallicRoughnessUV","vec2"),s.vertex.uniforms.add(new a("metallicRoughnessTextureTransformMatrix",(e=>e.metallicRoughnessTextureTransformMatrix??r))).code.add(o`void forwardMetallicRoughnessUV(){
metallicRoughnessUV = (metallicRoughnessTextureTransformMatrix * vec3(vuv0, 1.0)).xy;
}`)):s.vertex.code.add(o`void forwardMetallicRoughnessUV(){}`)}export{s as colorTextureUV,t as emissiveTextureUV,n as metallicRoughnessTextureUV,i as normalTextureUV,d as occlusionTextureUV};
