/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import{neverReached as s}from"../../../core/compilerUtils.js";import{lerp as i}from"../../../core/mathUtils.js";import{destroyMaybe as r,disposeMaybe as o}from"../../../core/maybe.js";import{watch as a,initial as n}from"../../../core/reactiveUtils.js";import{signal as h}from"../../../core/signal.js";import{property as l}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/Logger.js";import"../../../core/RandomLCG.js";import{subclass as c}from"../../../core/accessorSupport/decorators/subclass.js";import{fromMat4 as u}from"../../../core/libs/gl-matrix-2/math/mat3.js";import{targetTo as d}from"../../../core/libs/gl-matrix-2/math/mat4.js";import{create as p}from"../../../core/libs/gl-matrix-2/factories/mat4f64.js";import{equals as m,copy as _,set as f}from"../../../core/libs/gl-matrix-2/math/vec2.js";import{clone as g,ZEROS as x,zeros as y}from"../../../core/libs/gl-matrix-2/factories/vec2f64.js";import{fromValues as T}from"../../../core/libs/gl-matrix-2/factories/vec3f32.js";import{zeros as b}from"../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{getReferenceEllipsoid as v}from"../../../geometry/ellipsoidUtils.js";import{CubeMapState as S,CloudsTextureChannels as C}from"./Clouds.js";import{C as w,c as j}from"../../../chunks/Clouds.glsl.js";import{cloudPresets as P}from"./CloudsPresets.js";import{CloudsTechnique as z}from"./CloudsTechnique.js";import{CloudsTechniqueConfiguration as I,RayMarchingSteps as R}from"./CloudsTechniqueConfiguration.js";import{NoiseTextureAtlas as M}from"./NoiseTextureAtlas.js";import{TaskPriority as U}from"../../support/Scheduler.js";import{Yield as H}from"../../support/Yield.js";import{TextureType as q,TextureWrapMode as D,ColorAttachment0 as E}from"../../webgl/enums.js";import{FramebufferObject as A}from"../../webgl/FramebufferObject.js";import{TextureDescriptor as O}from"../../webgl/TextureDescriptor.js";let N=class extends t{constructor(e){super(e),this._state=h(S.Idle),this._passParameters=new w,this._weatherTileCount=128,this._sliceIndex=0,this._tileIndex=0,this._tilesPerSlice=1,this.coverage=i(P.default.coverage[0],P.default.coverage[1],.5),this.density=i(P.default.density[0],P.default.density[1],.5),this.absorption=i(P.default.absorption[0],P.default.absorption[1],.5),this.cloudSize=i(P.default.cloudSize[0],P.default.cloudSize[1],.5),this.detailSize=i(P.default.detailSize[0],P.default.detailSize[1],.5),this.smoothness=i(P.default.smoothness[0],P.default.smoothness[1],.5),this.cloudHeight=i(P.default.cloudHeight[0],P.default.cloudHeight[1],.5),this.raymarchingSteps=P.default.raymarchingSteps,this._viewMatrix=p(),this._dirty=!0,this.running=!0,this._configuration=new I}initialize(){const e=v(this.view.spatialReference);this._passParameters.cloudRadius=.5*e.radius;const t=()=>this.setDirty();this.addHandles([this.view.resourceController.scheduler.registerTask(U.CLOUDS_GENERATOR,this),a((()=>this.coverage),t,n),a((()=>this.density),t,n),a((()=>this.absorption),t,n),a((()=>this.cloudSize),t,n),a((()=>this.detailSize),t,n),a((()=>this.smoothness),t,n),a((()=>this.cloudHeight),t,n),a((()=>this.raymarchingSteps),t,n)]);const s=g(this._computeWeatherTile());let i=0;this.addHandles(a((()=>{const e=this._computeWeatherTile();return m(s,e)||(++i,_(s,e)),i}),t))}destroy(){this.destroyCubeMap(),this._passParameters.noiseTexture=r(this._passParameters.noiseTexture)}_precompileTechniques(){this._configuration.steps=this.raymarchingSteps,this._configuration.writeTextureChannels=C.RG,this.context.techniques.precompile(z,this._configuration),this._configuration.writeTextureChannels=C.BA,this.context.techniques.precompile(z,this._configuration)}_acquireTechnique(){switch(this.raymarchingSteps){case R.SIXTEEN:this._tilesPerSlice=1;break;case R.HUNDRED:this._tilesPerSlice=4;break;case R.COUNT:case R.TWOHUNDRED:this._tilesPerSlice=8;break;default:s(this.raymarchingSteps)}return this._configuration.writeTextureChannels=1-this.parameters.readChannels,this._configuration.steps=this.raymarchingSteps,this.context.techniques.get(z,this._configuration)}_computeWeatherTile(){const{camera:e,environment:t}=this.view,{latitude:s,longitude:i}=e.position;if(null==s||null==i)return x;f(G,(s+90)/180,(i+180)/360);const r=Math.floor(this._weatherTileCount*Math.abs(2*G[0]-1));G[0]=Math.floor(2*this._weatherTileCount*G[0]),G[1]=Math.floor(4*(this._weatherTileCount-r)*G[1]);let o=0,a=0;if("virtual"!==t?.lighting?.type&&null!=t?.lighting?.date){const e=new Date(t.lighting.date);e.setUTCHours(t.lighting.date.getUTCHours()+(t.lighting.displayUTCOffset??0)),o=31*e.getUTCMonth()+e.getUTCDate(),a=e.getUTCFullYear()}return G[0]=(G[0]+o)%(2*this._weatherTileCount),G[1]=(G[1]+a%100)%(4*this._weatherTileCount),G}get state(){return this._state.value}set state(e){this._state.value=e}get usedMemory(){return(this._fbo?.usedMemory??0)+(this._passParameters.noiseTexture?.textureAtlas?.usedMemory??0)}_ensureNoiseTexture(){return this._passParameters.noiseTexture??=new M({context:this.context}),this._passParameters.noiseTexture}_ensureFrameBufferCube(e){const t=this.context.renderContext.rctx;if(null==this._fbo){const s=new O(e,e/2);s.target=q.TEXTURE_2D_ARRAY,s.depth=6,s.wrapMode=D.CLAMP_TO_EDGE,this._fbo=new A(t,s),this.parameters.data=this,this.parameters.absorption=this.absorption,this.parameters.coverage=this.coverage}return t.unbindTexture(this._fbo.colorTexture),this._fbo}get cubeMap(){return this._fbo}get parameters(){return this.context.renderContext.bind.clouds}destroyCubeMap(){this._fbo=o(this._fbo),this.parameters.data=null}applyPreset(e,t){const s=e.median,r=e=>{const r=i(e[0],e[1],s);return t<.5?i(e[0],r,2*t):i(r,e[1],2*(t-.5))};this.coverage=r(e.coverage),this.density=r(e.density),this.absorption=r(e.absorption),this.cloudSize=r(e.cloudSize),this.detailSize=r(e.detailSize),this.smoothness=r(e.smoothness),this.cloudHeight=r(e.cloudHeight),this.raymarchingSteps=e.raymarchingSteps,this._precompileTechniques()}setDirty(){this._dirty=this.running=!0}runTask(e){if(this.state===S.Fading)return H;this._dirty&&(this._sliceIndex=this._tileIndex=0,this.state=S.Rendering,this._passParameters.absorption=this.absorption,this._passParameters.density=this.density,this._passParameters.cloudSize=this.cloudSize,this._passParameters.detailSize=this.detailSize,this._passParameters.smoothness=this.smoothness,this._passParameters.cloudHeight=this.cloudHeight,this._passParameters.coverage=this.coverage,this._ensureNoiseTexture().updateWeatherMap(this._computeWeatherTile()),this._dirty=!1);const t=this._acquireTechnique();if(!this._ensureNoiseTexture().textureAtlas||!t.compiled)return H;const s=k[this._sliceIndex],i=F[this._sliceIndex];d(this._viewMatrix,W,s,i),u(this._passParameters.viewMatrix,this._viewMatrix);const r=this.context.renderContext.rctx,o=r.getViewport(),a=j/this._tilesPerSlice,n=this._tileIndex*a;r.setViewport(0,n,j,a);const h=this._ensureFrameBufferCube(j);r.bindFramebuffer(h),this._passParameters.lastSlice=5===this._sliceIndex,r.bindTechnique(t,this.context.renderContext.bind,this._passParameters);const l=q.TEXTURE_2D_ARRAY;return h.setColorTextureTarget(l,E,this._sliceIndex),r.screen.draw(),r.gl.flush(),r.setViewport(o.x,o.y,o.width,o.height),this.requestRender(),++this._tileIndex,5===this._sliceIndex&&this._tileIndex===this._tilesPerSlice?(this._sliceIndex=this._tileIndex=0,this.state=S.Ready,this.running=!1):this._tileIndex===this._tilesPerSlice&&(++this._sliceIndex,this._tileIndex=0),e.madeProgress(),H}};e([l({constructOnly:!0})],N.prototype,"context",void 0),e([l({constructOnly:!0})],N.prototype,"view",void 0),e([l({constructOnly:!0})],N.prototype,"requestRender",void 0),e([l()],N.prototype,"coverage",void 0),e([l()],N.prototype,"density",void 0),e([l()],N.prototype,"absorption",void 0),e([l()],N.prototype,"cloudSize",void 0),e([l()],N.prototype,"detailSize",void 0),e([l()],N.prototype,"smoothness",void 0),e([l()],N.prototype,"cloudHeight",void 0),e([l()],N.prototype,"raymarchingSteps",void 0),e([l()],N.prototype,"running",void 0),N=e([c("esri.views.3d.environment.CloudsRenderer")],N);const k=[T(1,0,0),T(-1,0,0),T(0,1,0),T(0,-1,0),T(0,0,1),T(0,0,1)],F=[T(0,0,-1),T(0,0,-1),T(0,0,-1),T(0,0,-1),T(0,1,0),T(0,1,0)],W=b(),G=y();export{N as CloudsRenderer};
