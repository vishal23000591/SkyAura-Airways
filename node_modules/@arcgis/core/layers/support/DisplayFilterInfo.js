/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{_ as r}from"../../chunks/tslib.es6.js";import o from"../../core/Clonable.js";import e from"../../core/Collection.js";import t from"../../core/JSONSupport.js";import{property as s}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/Logger.js";import"../../core/RandomLCG.js";import{subclass as i}from"../../core/accessorSupport/decorators/subclass.js";import{writer as l}from"../../core/accessorSupport/decorators/writer.js";import{compareMinScale as p}from"../../geometry/support/scaleUtils.js";import a from"./DisplayFilter.js";import{createDisplayFilterJSONContext as m}from"./displayFilterUtils.js";let c=class extends(o.ClonableMixin(t)){constructor(r){super(r),this.activeFilterId=null,this.filters=new(e.ofType(a)),this.mode="manual"}writeFilters(r,o,e,t){const s=r.toArray();"scale"===this.mode&&s.sort(((r,o)=>{const e=p(o.minScale,r.minScale),t=r.maxScale-o.maxScale;return 0===e?t:e})),o[e]=s.map((r=>r.toJSON(t)))}write(r,o){return super.write(r,m(this,o))}};r([s({type:String,json:{write:{overridePolicy:(r,o,e)=>({enabled:"manual"===e.filterMode,isRequired:!0})}}})],c.prototype,"activeFilterId",void 0),r([s({type:e.ofType(a),nonNullable:!0,json:{write:!0}})],c.prototype,"filters",void 0),r([l("filters")],c.prototype,"writeFilters",null),r([s({type:["manual","scale"],nonNullable:!0,json:{name:"filterMode",write:!0}})],c.prototype,"mode",void 0),c=r([i("esri.layers.support.DisplayFilterInfo")],c);export{c as default};
