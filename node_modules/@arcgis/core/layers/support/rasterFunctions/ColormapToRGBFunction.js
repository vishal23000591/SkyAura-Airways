/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import{property as o}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/Logger.js";import"../../../core/RandomLCG.js";import{subclass as r}from"../../../core/accessorSupport/decorators/subclass.js";import{SimpleBandStatistics as e}from"../SimpleBandStatistics.js";import s from"./BaseRasterFunction.js";import n from"./ColormapToRGBFunctionArguments.js";import{createColormapLUT as i}from"./pixelUtils.js";import{isColormapSupportedByWebGL as p}from"../../../renderers/support/rasterRendererChecks.js";let a=class extends s{constructor(){super(...arguments),this.functionName="ColormapToRGB",this.functionArguments=null,this.rasterArgumentNames=["raster"]}_bindSourceRasters(){const t=this.sourceRasterInfos[0];if(t.bandCount>1||!t.colormap?.length)return{success:!1,supportsGPU:!1,error:"colormap-to-rgb-function: source data must be single band with a colormap"};const o=t.clone();o.pixelType=this.outputPixelType=this._getOutputPixelType("u8"),this._removeStatsHistColormapVAT(o),o.bandCount=3,o.statistics=[{min:0,max:255,avg:100,stddev:20},{min:0,max:255,avg:100,stddev:20},{min:0,max:255,avg:100,stddev:20}],this.rasterInfo=o;const r=[...t.colormap].sort(((t,o)=>t[0]-o[0])),{indexedColormap:e,offset:s}=i({colormap:r});return e?(this.lookup={indexedColormap:e,offset:s},{success:!0,supportsGPU:p(e)}):{success:!1,supportsGPU:!1,error:"colormap-to-rgb-function: the colormap is not supported"}}_processPixels(t){let o=t.pixelBlocks?.[0];if(!o||!this.lookup)return o;o=o.clone();const r=o.pixels[0],s=o.mask??new Uint8Array(r.length).fill(255),n=new Uint8Array(r.length),i=new Uint8Array(r.length),p=new Uint8Array(r.length),{indexedColormap:a,offset:u}=this.lookup,c=a.length;for(let e=0;e<r.length;e++)if(s[e]){let t=4*(r[e]-u);t<0||t>c-4?s[e]=0:(n[e]=a[t++],i[e]=a[t++],p[e]=a[t++])}return o.pixels=[n,i,p],o.statistics=[new e(0,255),new e(0,255),new e(0,255)],o.pixelType=this.outputPixelType,o}_getWebGLParameters(){return this.lookup}};t([o({json:{write:!0,name:"rasterFunction"}})],a.prototype,"functionName",void 0),t([o({type:n,json:{write:!0,name:"rasterFunctionArguments"}})],a.prototype,"functionArguments",void 0),t([o()],a.prototype,"rasterArgumentNames",void 0),t([o({json:{write:!0}})],a.prototype,"lookup",void 0),a=t([r("esri.layers.support.rasterFunctions.ColormapToRGBFunction")],a);const u=a;export{u as default};
