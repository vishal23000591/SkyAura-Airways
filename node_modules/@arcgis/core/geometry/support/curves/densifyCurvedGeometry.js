/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{interpolateCubicBezier as t}from"./bezierCurveUtils.js";import{deriveCircleFromCircularArc as s}from"./circularArcUtils.js";import{isCurvedGeometry as i,getCurves as n,getEndpoint as r,isCoordinate as e,isBezierCurve as a,isCircularArc as h,isEllipticArc as c,isEllipticArc4 as o,isEllipticArc7 as u}from"./curveUtils.js";import{deriveCircleFromEllipticArc4 as p}from"./ellipticArc4Utils.js";import{deriveEllipse as d,interpolateEllipse as l}from"./ellipticArc7Utils.js";import{interpolateSegment as S,pointToSegmentDistance2 as m,distance2 as E}from"./mathUtils.js";const f={maxSegmentLength:1/0,maxDeviation:1/0,maxSegmentsPerCurve:12e3,minSegmentsPerCurve:1},v=1e-6,g=[0,0];class P{constructor(t,s){this.curveStart=t,this.curveEnd=s,this.tStart=0,this.tEnd=0,this.tEndStack=[],this.arcEndStack=[]}get stackSize(){return this.tEndStack.length}initialize(t,s){this.tStart=0,this.arcStart=t,this.tEndStack.push(1),this.arcEndStack.push(s)}splitAt(t){this.tEndStack.push(this.tEnd),this.arcEndStack.push(this.arcEnd),this.tEndStack.push(t),this.arcEndStack.push(this.interpolate(t))}splitInHalf(){return this.splitAt((this.tStart+this.tEnd)/2)}pop(){this.tEnd=this.tEndStack.pop(),this.arcEnd=this.arcEndStack.pop()}next(){this.tStart=this.tEnd,this.arcStart=this.arcEnd}densify(t,{maxDeviation:s,maxSegmentLength:i,maxSegmentsPerCurve:n,minSegmentsPerCurve:r}){const e=i*i,a=s*s,h=1/n,c=this.interpolate(0),o=this.interpolate(1);E(this.curveStart,c)>v&&t.push(c),this.initialize(c,o);const u=1/r;for(let p=r-1;p>0;p--){const t=p*u;this.pop(),this.splitAt(t)}for(;this.stackSize>0;)this.pop(),this.tStart===this.tEnd||this.tEnd-this.tStart<h||(0===e||!isFinite(e)||E(this.arcStart,this.arcEnd)<e)&&(0===a||!isFinite(a)||this.getDeviation2()<a)?(t.push(this.arcEnd),this.next()):this.splitInHalf();return E(this.curveEnd,o)>v&&t.push([...this.curveEnd]),t}}class x extends P{constructor(t,s){const[i,n,r]=s.b;super(t,i),this._controlPointsStack=[],this._curveControlPoints=[n,r],this._arcControlPoints=[n,r],this._controlPointsStack.push(this._arcControlPoints)}splitAt(t){const{arcStart:s,arcEnd:i,tStart:n,tEnd:r}=this,[e,a]=this._arcControlPoints,h=(t-n)/(r-n),c=S([],s,e,h),o=S(g,e,a,h),u=S([],a,i,h),p=S([],c,o,h),d=S([],o,u,h),l=S([],p,d,h);this.tEndStack.push(this.tEnd),this.arcEndStack.push(this.arcEnd),this._controlPointsStack.push([d,u]),this.tEndStack.push(t),this.arcEndStack.push(l),this._arcControlPoints[0]=c,this._arcControlPoints[1]=p,this._controlPointsStack.push(this._arcControlPoints)}pop(){super.pop(),this._arcControlPoints=this._controlPointsStack.pop()}interpolate(s){const{curveStart:i,curveEnd:n}=this,[r,e]=this._curveControlPoints;return t(i,r,e,n,s)}getDeviation2(){const{arcStart:t,arcEnd:s}=this,[i,n]=this._arcControlPoints;return Math.max(m(i,t,s),m(n,t,s))}}class k extends P{constructor(t,s){const[i]=s.a;super(t,i),this._derivedEllipse=d(t,s)}pop(){super.pop(),this._tMid=(this.tStart+this.tEnd)/2,this._arcMid=this.interpolate(this._tMid)}splitInHalf(){this.tEndStack.push(this.tEnd),this.arcEndStack.push(this.arcEnd),this.tEndStack.push(this._tMid),this.arcEndStack.push(this._arcMid)}interpolate(t){return l(this._derivedEllipse,t)}getDeviation2(){return m(this._arcMid,this.arcStart,this.arcEnd)}}function C(t,s,i,{cx:n,cy:r,radius:e,thetaStart:a,thetaEnd:h,isInvalid:c},{maxDeviation:o,maxSegmentLength:u,maxSegmentsPerCurve:p,minSegmentsPerCurve:d}){if(c)return t.push([...i]),t;const l=2*e,S=[n+e*Math.cos(a),r+e*Math.sin(a)],m=[n+e*Math.cos(h),r+e*Math.sin(h)];E(s,S)>v&&t.push(S);const f=Math.abs(h-a),g=u<l?2*Math.asin(u/l):f,P=o<=e?2*Math.acos(1-o/e):f,x=Math.min(g,P),k=Math.min(p,Math.max(d,Math.ceil(Math.abs(f/x)))),C=1/k;for(let E=1;E<k;E++){const s=E*C,i=a*(1-s)+h*s;t.push([n+e*Math.cos(i),r+e*Math.sin(i)])}return t.push(m),E(i,m)>v&&t.push([...i]),t}function _(t,s,i,n){return new x(s,i).densify(t,n)}function M(t,i,n,r){const e=s(i,n),[a]=n.c;return C(t,i,a,e,r)}function D(t,s,i,n){const r=p(s,i),[e]=i.a;return C(t,s,e,r,n)}function A(t,s,i,n){const[r,e,a,h,c,o,u]=i.a;return 0===o||0===u?(t.push([...r]),t):new k(s,i).densify(t,n)}function j(t,s,i,n){if(e(i))return t.push([...i]),t;if(a(i))return _(t,s,i,n);if(h(i))return M(t,s,i,n);if(c(i)){if(o(i))return D(t,s,i,n);if(u(i))return A(t,s,i,n)}return t}function L(t,s){if(!i(t))return t;const e=n(t),a=[];for(const i of e){const t=[];for(let n=0,e=1;e<i.length;n=e++){const a=r(i[n]);0===n&&t.push(a);j(t,a,i[e],{maxSegmentLength:s.maxSegmentLength??f.maxSegmentLength,maxDeviation:s.maxDeviation??f.maxDeviation,maxSegmentsPerCurve:s.maxSegmentsPerCurve??f.maxSegmentsPerCurve,minSegmentsPerCurve:Math.max(s.minSegmentsPerCurve??f.minSegmentsPerCurve,1)})}a.push(t)}return"curvePaths"in t?{paths:a,spatialReference:t.spatialReference}:{rings:a,spatialReference:t.spatialReference}}export{L as densifyCurvedGeometry};
