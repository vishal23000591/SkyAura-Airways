/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{equals as n}from"../../core/arrayUtils.js";import{Axis as t}from"./Axis.js";import{getInfo as r}from"./spatialReferenceUtils.js";function e(n){if(!n)return null;if(Array.isArray(n))return n;const t=n.hasZ,r=n.hasM;if("point"===n.type)return r&&t?[n.x,n.y,n.z,n.m]:t?[n.x,n.y,n.z]:r?[n.x,n.y,n.m]:[n.x,n.y];if("polygon"===n.type)return n.rings.slice();if("polyline"===n.type)return n.paths.slice();if("multipoint"===n.type)return n.points.slice();if("extent"===n.type){const t=n.clone().normalize();if(!t)return null;let r=!1,e=!1;return t.forEach((n=>{n.hasZ&&(r=!0),n.hasM&&(e=!0)})),t.map((n=>{const t=[[n.xmin,n.ymin],[n.xmin,n.ymax],[n.xmax,n.ymax],[n.xmax,n.ymin],[n.xmin,n.ymin]];if(r&&n.hasZ){const r=.5*(n.zmax-n.zmin);for(let n=0;n<t.length;n++)t[n].push(r)}if(e&&n.hasM){const r=.5*(n.mmax-n.mmin);for(let n=0;n<t.length;n++)t[n].push(r)}return t}))}return null}function i(n,t){const r=t[0]-n[0],e=t[1]-n[1];if(n.length>2&&t.length>2){const i=n[2]-t[2];return Math.sqrt(r*r+e*e+i*i)}return Math.sqrt(r*r+e*e)}function o(n,t,r){const e=n[0]+r*(t[0]-n[0]),i=n[1]+r*(t[1]-n[1]);return n.length>2&&t.length>2?[e,i,n[2]+r*(t[2]-n[2])]:[e,i]}function s(n,t,r,e){return f(n,t,r[e],r[e+1])}function f(n,t,r,e){const[i,o]=t,[s,f]=r,[u,l]=e,c=u-s,h=l-f,p=c*c+h*h,a=(i-s)*c+(o-f)*h,y=Math.min(1,Math.max(0,a/p));return n[0]=s+c*y,n[1]=f+h*y,n}function u(n,t,r){let e,i,o,s,f=!1,u=1/0;for(r.reset();r.nextPath();)if(r.nextPoint())for(e=r.x,i=r.y;r.nextPoint();)o=r.x,s=r.y,i>t!=s>t&&n<(o-e)*(t-i)/(s-i)+e&&(f=!f),u=Math.min(u,l(n,t,e,i,o,s)),e=o,i=s;return 0===u?0:(f?1:-1)*Math.sqrt(u)}function l(n,t,r,e,i,o){let s=r,f=e,u=i-s,l=o-f;if(0!==u||0!==l){const r=((n-s)*u+(t-f)*l)/(u*u+l*l);r>1?(s=i,f=o):r>0&&(s+=u*r,f+=l*r)}return u=n-s,l=t-f,u*u+l*l}function c(n,t){return o(n,t,.5)}function h(n){const t=n.length;let r=0;for(let e=0;e<t-1;++e)r+=i(n[e],n[e+1]);return r}function p(n,t){if(t<=0)return n[0];const r=n.length;let e=0;for(let s=0;s<r-1;++s){const r=i(n[s],n[s+1]);if(t-e<r){const i=(t-e)/r;return o(n[s],n[s+1],i)}e+=r}return n[r-1]}function a(n,r=t.X,e=t.Y){let i=0;const o=n.length;let s=n[0];for(let t=1;t<o;t++){const o=n[t];i+=(o[r]-s[r])*(o[e]+s[e]),s=o}if(y(n)){const t=n[0];i+=(t[r]-s[r])*(t[e]+s[e])}return i>=0}function y(t){const r=t.length;return r>0&&!n(t[0],t[r-1])}function m(n){"rings"in n&&(g(n),x(n))}function g(n){if("rings"in n)for(const t of n.rings)y(t)&&t.push(t[0].slice())}function x(n){if(!("rings"in n))return!1;if(0===n.rings.length||a(n.rings[0]))return!1;for(const t of n.rings)t.reverse();return!0}function M(n){if("polygon"!==n.type&&"polyline"!==n.type)return n;return z("polygon"===n.type?n.rings:n.paths,n.spatialReference),n}function z(n,t){const e=r(t);if(!e)return;const i=e.valid[0],o=e.valid[1],s=o-i;for(const r of n){let n=1/0,t=-1/0;for(const s of r){const r=v(s[0],i,o);n=Math.min(n,r),t=Math.max(t,r),s[0]=r}const e=t-n;s-e<e&&r.forEach((n=>{n[0]<0&&(n[0]+=s)}))}}function v(n,t,r){const e=r-t;return n<t?r-(t-n)%e:n>r?t+(n-t)%e:n}function j(n,t){if(n===t)return!0;if(n.type!==t.type)return!1;if("point"===n.type||"mesh"===n.type||"extent"===n.type)return!0;if("multipoint"===n.type)return n.points.length===t.points.length;const[r,e]="polyline"===n.type?[n.paths,t.paths]:[n.rings,t.rings];return r.length===e.length&&r.every(((n,t)=>n.length===e[t].length))}export{g as closeRings,m as closeRingsAndFixWinding,u as distanceFromPointToPolygon,l as distanceToSegmentSquared,e as geometryToCoordinates,i as getLength,c as getMidpoint,h as getPathLength,p as getPointOnPath,j as hasCompatibleTopology,a as isClockwise,s as projectPointOnLine,f as projectPointOnLineSeg,M as unnormalizeGeometryOnDatelineCrossing,z as unnormalizeVerticesOnDatelineCrossing,v as unnormalizedCoordinate};
