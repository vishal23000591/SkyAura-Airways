/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import t from"../../../core/Logger.js";import{floatEqualUlp as n}from"../../../core/mathUtils.js";import{getMetersPerCartesianUnitForSR as r,convertUnit as e}from"../../../core/unitUtils.js";import{normalFromMat4 as o}from"../../../core/libs/gl-matrix-2/math/mat3.js";import{create as i}from"../../../core/libs/gl-matrix-2/factories/mat3f64.js";import{exactEquals as l,scale as a,invert as s,copy as c,multiply as u}from"../../../core/libs/gl-matrix-2/math/mat4.js";import{create as f,IDENTITY as m}from"../../../core/libs/gl-matrix-2/factories/mat4f64.js";import{u as p,d as g,t as A}from"../../../chunks/vec32.js";import{create as R}from"../../../core/libs/gl-matrix-2/factories/vec3f64.js";import{WGS84ECEFSpatialReference as x,getSphericalPCPF as E}from"../../spatialReferenceEllipsoidUtils.js";import{computeTranslationToOriginAndRotation as T}from"../../projection/computeTranslationToOriginAndRotation.js";import{projectPointToVector as v}from"../../projection/projectPointToVector.js";import{isRelativeVertexSpace as h,vertexSpaceEquals as j}from"../meshVertexSpaceUtils.js";import{isEarth as S}from"../spatialReferenceUtils.js";import{a as w,t as y,b as U}from"../../../chunks/vec3.js";import{logProjectionError as F,projectToPCPF as O,projectNormalToPCPF as _,projectTangentToPCPF as b,transformNormal as C,transformTangent as d,projectFromPCPF as G,projectNormalFromPCPF as N,projectTangentFromPCPF as D}from"./projection.js";const M=()=>t.getLogger("esri.geometry.support.meshUtils.vertexSpaceConversion");function k(t,n,{vertexSpace:r,spatialReference:e}){if("georeferenced"===r.type){const o=t;if(!v(n,o,e))return!1;const{origin:i}=r;return g(t,o,i),!0}const o=E(e),i=t;if(!v(n,i,o))return!1;const{origin:l}=r,a=lt;if(!T(e,l,a,o))return!1;const c=s(lt,a);return null!=c&&(A(t,i,c),!0)}function B(t,n,r){const{vertexSpace:e,transform:o,vertexAttributes:i}=t,a=h(e)?o:null,s=X(t.spatialReference,r,at.SOURCE_AND_TARGET);if(j(e,n)&&(!a||l(a.localMatrix,m))&&Y(s)){const{position:t,normal:n,tangent:e}=i,o=r?.allowBufferReuse;return{position:o?t:t.slice(),normal:o?n:n?.slice(),tangent:o?e:e?.slice()}}switch(t.vertexSpace.type){case"local":return"local"===n.type?H(t,t.vertexSpace,n.origin,r):P(t,t.vertexSpace,n.origin,r);case"georeferenced":return"local"===n.type?q(t,t.vertexSpace,n.origin,r):L(t,t.vertexSpace,n.origin,r)}}function L({vertexAttributes:t,transform:n,spatialReference:r},{origin:e},o,i){const l=X(r,i,at.SOURCE_AND_TARGET),a=e||!Y(l)?c(rt,n?.localMatrix??m):null;a&&W(a,r,i,at.SOURCE_AND_TARGET);const{position:s,normal:u,tangent:f}=a?I(t,a):t,g=i?.allowBufferReuse,A=g?s:new Float64Array(s.length);let R=s;if(e&&(R=w(A,R,e)),o){const t=p(it,o);R=w(A,R,t)}return{position:R!==t.position||g?R:R.slice(),normal:u!==t.normal||g?u:u?.slice(),tangent:f!==t.tangent||g?f:f?.slice()}}function V(t,n){return n?.useEllipsoid&&S(t)?x:E(t)}function P({spatialReference:t,vertexAttributes:n,transform:r},{origin:e},o,i){const l=V(t,i);if(!T(t,e,rt,l))return F(M(),t,l),null;r&&u(rt,rt,r.localMatrix),W(rt,t,i,at.SOURCE);const a=new Float64Array(n.position.length),s=J(n.position,rt,t,a,l);if(!s)return null;const c=K(s,t,a,l,n.normal,rt);if(n.normal&&!c)return null;const f=Q(s,t,a,l,n.tangent,rt);if(n.tangent&&!f)return null;if(o){const t=p(it,o);w(s,s,t)}return{position:s,normal:c,tangent:f}}function q({vertexAttributes:t,spatialReference:n,transform:r},{origin:e},i,l){const c=V(n,l);if(!T(n,i,rt,c))return F(M(),n,c),null;const u=1/X(n,l,at.TARGET);a(rt,rt,[u,u,u]);const f=s(et,rt),{position:m,normal:p,tangent:g}=z(t,e,r),A=new Float64Array(m.length),R=Z(m,n,f,A,c);if(!R)return null;const x=o(ot,f),E=$(p,m,n,A,c,x,p!==t.normal?p:void 0);if(!E&&p)return null;const v=tt(g,m,n,A,c,x,g!==t.tangent?g:void 0);return!v&&g?null:{position:R,normal:E,tangent:v}}function z(t,n,r){if(!n)return t;if(!r){const{position:r,normal:e,tangent:o}=t;return{position:w(new Float64Array(r.length),r,n),tangent:o,normal:e}}const e=I(t,r.localMatrix);return w(e.position,e.position,n),e}function H({vertexAttributes:t,spatialReference:n,transform:r},{origin:e},o,i){const l=V(n,i);if(!T(n,e,rt,l))return F(M(),n,l),null;if(r&&u(rt,rt,r.localMatrix),!T(n,o,et,l))return F(M(),l,n),null;s(et,et);const a=u(rt,et,rt);return W(a,n,i,at.SOURCE_AND_TARGET),I(t,a)}function I(t,n){const r=new Float64Array(t.position.length);y(r,t.position,n);const e=t.normal?new Float32Array(t.normal.length):null,o=t.tangent?new Float32Array(t.tangent.length):null;return e&&t.normal&&C(t.normal,e,n),o&&t.tangent&&d(t.tangent,o,n),{position:r,normal:e,tangent:o}}function J(t,n,r,e,o){y(e,t,n);const i=new Float64Array(t.length);return G(e,o,i,r)?i:(F(M(),o,r),null)}function K(t,n,r,e,o,i){if(null==o)return null;const l=new Float32Array(o.length);return C(o,l,i),N(l,t,n,r,e,l)?l:(F(M(),e,n),null)}function Q(t,n,r,e,o,i){if(null==o)return null;const l=new Float32Array(o.length);return d(o,l,i),D(l,t,n,r,e,l)?l:(F(M(),e,n),null)}function W(t,n,r,e){const o=X(n,r,e);Y(o)||a(t,t,[o,o,o])}function X(t,n,r){const e=!!(r&at.SOURCE),o=!!(r&at.TARGET),i=n?.sourceUnit,l=n?.targetUnit;if(!i&&!l)return 1;let a=nt(i,t);e||!i||Y(a)||(M().warn("source unit conversion not supported"),a=1);let s=1/nt(l,t);return o||!l||Y(s)||(M().warn("target unit conversion not supported"),s=1),a*s}function Y(t){return n(t,1)}function Z(t,n,r,e,o){const i=O(t,n,e,o);if(!i)return F(M(),n,o),null;const l=new Float64Array(i.length);return y(l,i,r),l}function $(t,n,r,e,o,i,l){if(null==t)return null;const a=l??new Float32Array(t.length);return _(t,n,r,e,o,a)?(U(a,a,i),a):(F(M(),r,o),null)}function tt(t,n,r,e,o,i,l){if(null==t)return null;const a=l??new Float32Array(t.length);return b(t,n,r,e,o,a)?(U(a,a,i,4),a):(F(M(),r,o),null)}function nt(t,n){if(null==t)return 1;const o=r(n);return 1/e(o,"meters",t)}const rt=f(),et=f(),ot=i(),it=R(),lt=f();var at;!function(t){t[t.NONE=0]="NONE",t[t.SOURCE=1]="SOURCE",t[t.TARGET=2]="TARGET",t[t.SOURCE_AND_TARGET=3]="SOURCE_AND_TARGET"}(at||(at={}));export{B as convertVertexSpace,nt as getUnitToSpatialReferenceScaleConversion,k as projectPointToVertexSpace};
