/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.33/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../Graphic.js";import i from"../../PopupTemplate.js";import r from"../../core/Clonable.js";import a from"../../core/JSONSupport.js";import{property as s}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/Logger.js";import"../../core/RandomLCG.js";import{reader as o}from"../../core/accessorSupport/decorators/reader.js";import{subclass as u}from"../../core/accessorSupport/decorators/subclass.js";import{writer as p}from"../../core/accessorSupport/decorators/writer.js";import n from"../../geometry/Point.js";import{getTimezoneOffset as l,getPrefixedProperties as m,setPrefixedProperties as d,toKebabImpedanceAttributes as c,fromKebabImpedanceAttributes as y}from"../route/utils.js";import{statusJsonMap as v,locationTypeJsonMap as b,curbApproachJsonMap as T,sideOfEdgeJsonMap as h}from"./networkEnums.js";import{symbolTypes as f}from"../../symbols/support/typeUtils.js";var C;let S=class extends(r.ClonableMixin(a)){static{C=this}constructor(e){super(e),this.arriveCurbApproach=null,this.arriveTime=null,this.arriveTimeOffset=null,this.bearing=null,this.bearingTol=null,this.cumulativeCosts=null,this.cumulativeDistance=null,this.cumulativeDuration=null,this.curbApproach=null,this.departCurbApproach=null,this.departTime=null,this.departTimeOffset=null,this.distanceToNetworkInMeters=null,this.geometry=null,this.lateDuration=null,this.locationType=null,this.name=null,this.navLatency=null,this.objectId=null,this.popupTemplate=null,this.posAlong=null,this.routeName=null,this.serviceCosts=null,this.serviceDistance=null,this.serviceDuration=null,this.sequence=null,this.sideOfEdge=null,this.snapX=null,this.snapY=null,this.snapZ=null,this.sourceId=null,this.sourceOid=null,this.status=null,this.symbol=null,this.timeWindowEnd=null,this.timeWindowEndOffset=null,this.timeWindowStart=null,this.timeWindowStartOffset=null,this.type="stop",this.violations=null,this.waitDuration=null,this.wait=null}readArriveTimeOffset(e,t){return l(t.attributes.ArriveTime,t.attributes.ArriveTimeUTC)}readCumulativeCosts(e,t){return m(t.attributes,"Cumul_")}readDepartTimeOffset(e,t){return l(t.attributes.DepartTime,t.attributes.DepartTimeUTC)}readServiceCosts(e,t){return m(t.attributes,"Attr_")}writeServiceCosts(e,t){d(e,t,"Attr_")}writeTimeWindowEnd(e,t){null!=e&&(t.attributes||(t.attributes={}),t.attributes.TimeWindowEnd=e.getTime())}writeTimeWindowStart(e,t){null!=e&&(t.attributes||(t.attributes={}),t.attributes.TimeWindowStart=e.getTime())}readViolations(e,t){return m(t.attributes,"Violation_")}readWait(e,t){return m(t.attributes,"Wait_")}static{this.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"ArrivalCurbApproach",alias:"Arrival Curb Approach",type:"esriFieldTypeInteger"},{name:"ArrivalTime",alias:"Arrival Time",type:"esriFieldTypeDate"},{name:"ArrivalUTCOffset",alias:"Arrival Time",type:"esriFieldTypeInteger"},{name:"CumulativeCosts",alias:"Cumulative Costs",type:"esriFieldTypeString"},{name:"CumulativeMeters",alias:"Cumulative Meters",type:"esriFieldTypeDouble"},{name:"CumulativeMinutes",alias:"Cumulative Minutes",type:"esriFieldTypeDouble"},{name:"CurbApproach",alias:"Curb Approach",type:"esriFieldTypeInteger"},{name:"DepartureCurbApproach",alias:"Departure Curb Approach",type:"esriFieldTypeInteger"},{name:"DepartureTime",alias:"Departure Time",type:"esriFieldTypeDate"},{name:"DepartureUTCOffset",alias:"Departure Time",type:"esriFieldTypeInteger"},{name:"LateMinutes",alias:"Minutes Late",type:"esriFieldTypeDouble"},{name:"LocationType",alias:"Location Type",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"RouteName",alias:"Route Name",type:"esriFieldTypeString"},{name:"Sequence",alias:"Sequence",type:"esriFieldTypeInteger"},{name:"ServiceCosts",alias:"Service Costs",type:"esriFieldTypeString"},{name:"ServiceMeters",alias:"Service Meters",type:"esriFieldTypeDouble"},{name:"ServiceMinutes",alias:"Service Minutes",type:"esriFieldTypeDouble"},{name:"Status",alias:"Status",type:"esriFieldTypeInteger"},{name:"TimeWindowEnd",alias:"Time Window End",type:"esriFieldTypeDate"},{name:"TimeWindowEndUTCOffset",alias:"Time Window End Offset",type:"esriFieldTypeInteger"},{name:"TimeWindowStart",alias:"Time Window Start",type:"esriFieldTypeDate"},{name:"TimeWindowStartUTCOffset",alias:"Time Window Start Offset",type:"esriFieldTypeInteger"},{name:"WaitMinutes",alias:"Minutes Wait",type:"esriFieldTypeDouble"}]}static fromGraphic(e){return new C({arriveCurbApproach:null!=e.attributes.ArrivalCurbApproach?T.fromJSON(e.attributes.ArrivalCurbApproach):null,arriveTime:null!=e.attributes.ArrivalTime?new Date(e.attributes.ArrivalTime):null,arriveTimeOffset:e.attributes.ArrivalUTCOffset,cumulativeCosts:null!=e.attributes.CumulativeCosts?c(JSON.parse(e.attributes.CumulativeCosts)):null,cumulativeDistance:e.attributes.CumulativeMeters??null,cumulativeDuration:e.attributes.CumulativeMinutes??null,curbApproach:null!=e.attributes.CurbApproach?T.fromJSON(e.attributes.CurbApproach):null,departCurbApproach:null!=e.attributes.DepartureCurbApproach?T.fromJSON(e.attributes.DepartureCurbApproach):null,departTime:null!=e.attributes.DepartureTime?new Date(e.attributes.DepartureTime):null,departTimeOffset:e.attributes.DepartureUTCOffset??null,geometry:e.geometry,lateDuration:e.attributes.LateMinutes??null,locationType:null!=e.attributes.LocationType?b.fromJSON(e.attributes.LocationType):null,name:e.attributes.Name,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,routeName:e.attributes.RouteName,sequence:e.attributes.Sequence??null,serviceCosts:null!=e.attributes.ServiceCosts?c(JSON.parse(e.attributes.ServiceCosts)):null,serviceDistance:e.attributes.ServiceMeters??null,serviceDuration:e.attributes.ServiceMinutes??null,status:null!=e.attributes.Status?v.fromJSON(e.attributes.Status):null,symbol:e.symbol,timeWindowEnd:null!=e.attributes.TimeWindowEnd?new Date(e.attributes.TimeWindowEnd):null,timeWindowEndOffset:e.attributes.TimeWindowEndUTCOffset??null,timeWindowStart:null!=e.attributes.TimeWindowStart?new Date(e.attributes.TimeWindowStart):null,timeWindowStartOffset:e.attributes.TimeWindowStartUTCOffset??null,waitDuration:e.attributes.WaitMinutes??null})}toGraphic(){const e={ObjectID:this.objectId,ArrivalCurbApproach:this.arriveCurbApproach?T.toJSON(this.arriveCurbApproach):null,ArrivalTime:this.arriveTime?.getTime()??null,ArrivalUTCOffset:this.arriveTimeOffset,CumulativeCosts:this.cumulativeCosts?JSON.stringify(y(this.cumulativeCosts)):null,CumulativeMeters:this.cumulativeDistance,CumulativeMinutes:this.cumulativeDuration,CurbApproach:this.curbApproach?T.toJSON(this.curbApproach):null,DepartureCurbApproach:this.departCurbApproach?T.toJSON(this.departCurbApproach):null,DepartureTime:this.departTime?.getTime()??null,DepartureUTCOffset:this.departTimeOffset,LateMinutes:this.lateDuration,LocationType:this.locationType?b.toJSON(this.locationType):null,Name:this.name,RouteName:this.routeName,Sequence:this.sequence,ServiceCosts:this.serviceCosts?JSON.stringify(y(this.serviceCosts)):null,ServiceMeters:this.serviceDistance,ServiceMinutes:this.serviceDuration,Status:this.status?v.toJSON(this.status):null,TimeWindowEnd:this.timeWindowEnd?.getTime()??null,TimeWindowEndUTCOffset:this.timeWindowEndOffset??this.arriveTimeOffset,TimeWindowStart:this.timeWindowStart?.getTime()??null,TimeWindowStartUTCOffset:this.timeWindowStartOffset??this.arriveTimeOffset,WaitMinutes:this.waitDuration};return new t({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};e([s({type:T.apiValues,json:{read:{source:"attributes.ArrivalCurbApproach",reader:T.read}}})],S.prototype,"arriveCurbApproach",void 0),e([s({type:Date,json:{read:{source:"attributes.ArriveTimeUTC"}}})],S.prototype,"arriveTime",void 0),e([s()],S.prototype,"arriveTimeOffset",void 0),e([o("arriveTimeOffset",["attributes.ArriveTime","attributes.ArriveTimeUTC"])],S.prototype,"readArriveTimeOffset",null),e([s({json:{name:"attributes.Bearing",read:!1,write:!0}})],S.prototype,"bearing",void 0),e([s({json:{name:"attributes.BearingTol",read:!1,write:!0}})],S.prototype,"bearingTol",void 0),e([s()],S.prototype,"cumulativeCosts",void 0),e([o("cumulativeCosts",["attributes"])],S.prototype,"readCumulativeCosts",null),e([s()],S.prototype,"cumulativeDistance",void 0),e([s()],S.prototype,"cumulativeDuration",void 0),e([s({type:T.apiValues,json:{name:"attributes.CurbApproach",read:{reader:T.read},write:{writer:T.write}}})],S.prototype,"curbApproach",void 0),e([s({type:T.apiValues,json:{read:{source:"attributes.DepartCurbApproach",reader:T.read}}})],S.prototype,"departCurbApproach",void 0),e([s({type:Date,json:{read:{source:"attributes.DepartTimeUTC"}}})],S.prototype,"departTime",void 0),e([s()],S.prototype,"departTimeOffset",void 0),e([o("departTimeOffset",["attributes.DepartTime","attributes.DepartTimeUTC"])],S.prototype,"readDepartTimeOffset",null),e([s({json:{read:{source:"attributes.DistanceToNetworkInMeters"}}})],S.prototype,"distanceToNetworkInMeters",void 0),e([s({type:n,json:{write:!0}})],S.prototype,"geometry",void 0),e([s()],S.prototype,"lateDuration",void 0),e([s({type:b.apiValues,json:{name:"attributes.LocationType",read:{reader:b.read},write:{writer:b.write}}})],S.prototype,"locationType",void 0),e([s({json:{name:"attributes.Name"}})],S.prototype,"name",void 0),e([s({json:{name:"attributes.NavLatency",read:!1,write:!0}})],S.prototype,"navLatency",void 0),e([s({json:{name:"attributes.ObjectID"}})],S.prototype,"objectId",void 0),e([s({type:i})],S.prototype,"popupTemplate",void 0),e([s({json:{read:{source:"attributes.PosAlong"}}})],S.prototype,"posAlong",void 0),e([s({json:{name:"attributes.RouteName"}})],S.prototype,"routeName",void 0),e([s()],S.prototype,"serviceCosts",void 0),e([o("serviceCosts",["attributes"])],S.prototype,"readServiceCosts",null),e([p("serviceCosts")],S.prototype,"writeServiceCosts",null),e([s()],S.prototype,"serviceDistance",void 0),e([s()],S.prototype,"serviceDuration",void 0),e([s({json:{name:"attributes.Sequence"}})],S.prototype,"sequence",void 0),e([s({type:h.apiValues,json:{read:{source:"attributes.SideOfEdge",reader:h.read}}})],S.prototype,"sideOfEdge",void 0),e([s({json:{read:{source:"attributes.SnapX"}}})],S.prototype,"snapX",void 0),e([s({json:{read:{source:"attributes.SnapY"}}})],S.prototype,"snapY",void 0),e([s({json:{read:{source:"attributes.SnapZ"}}})],S.prototype,"snapZ",void 0),e([s({json:{read:{source:"attributes.SourceID"}}})],S.prototype,"sourceId",void 0),e([s({json:{read:{source:"attributes.SourceOID"}}})],S.prototype,"sourceOid",void 0),e([s({type:v.apiValues,json:{read:{source:"attributes.Status",reader:v.read}}})],S.prototype,"status",void 0),e([s({types:f})],S.prototype,"symbol",void 0),e([s({type:Date,json:{name:"attributes.TimeWindowEnd"}})],S.prototype,"timeWindowEnd",void 0),e([p("timeWindowEnd")],S.prototype,"writeTimeWindowEnd",null),e([s()],S.prototype,"timeWindowEndOffset",void 0),e([s({type:Date,json:{name:"attributes.TimeWindowStart"}})],S.prototype,"timeWindowStart",void 0),e([p("timeWindowStart")],S.prototype,"writeTimeWindowStart",null),e([s()],S.prototype,"timeWindowStartOffset",void 0),e([s({readOnly:!0,json:{read:!1}})],S.prototype,"type",void 0),e([s()],S.prototype,"violations",void 0),e([o("violations",["attributes"])],S.prototype,"readViolations",null),e([s()],S.prototype,"waitDuration",void 0),e([s()],S.prototype,"wait",void 0),e([o("wait",["attributes"])],S.prototype,"readWait",null),S=C=e([u("esri.rest.support.Stop")],S);export{S as default};
