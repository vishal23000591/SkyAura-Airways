import { DirectiveResult } from 'lit/directive.js';
import { ClassInfo, ClassMapDirective } from 'lit/directives/class-map.js';
import { StyleMapDirective } from 'lit/directives/style-map.js';
import { ChangeEventHandlerUnion, CustomAttributes, EventHandlerUnion, FocusEventHandlerUnion, InputEventHandlerUnion } from './baseTypes';
import { JsxNode } from './types';
import { Properties as CssProperties } from 'csstype';
/**
 * Some attributes accepts numbers as a number or as a string, while also
 * accepting "inherit". Define the type as `number | string | "inherit"` rather
 * than `number | string` to keep things more self-documenting.
 */
type HtmlAutocapitalize = "characters" | "none" | "off" | "on" | "sentences" | "words";
type HtmlDir = "auto" | "ltr" | "rtl";
type HtmlFormEncType = "application/x-www-form-urlencoded" | "multipart/form-data" | "text/plain";
type HtmlFormMethod = "dialog" | "get" | "post";
type HtmlCrossOrigin = "" | "anonymous" | "use-credentials";
type HtmlIframeSandbox = "allow-downloads-without-user-activation" | "allow-downloads" | "allow-forms" | "allow-modals" | "allow-orientation-lock" | "allow-pointer-lock" | "allow-popups-to-escape-sandbox" | "allow-popups" | "allow-presentation" | "allow-same-origin" | "allow-scripts" | "allow-storage-access-by-user-activation" | "allow-top-navigation-by-user-activation" | "allow-top-navigation-to-custom-protocols" | "allow-top-navigation";
type HtmlLinkAs = "audio" | "document" | "embed" | "fetch" | "font" | "image" | "object" | "script" | "style" | "track" | "video" | "worker";
/**
 * Attributes that are common to HTMLElements and SVGElements
 *
 * @remarks
 * Name uses consecutive capitalized letters to avoid a breaking change. We can
 * batch breaking changes in a single release in the future.
 */
export interface DOMAttributes<T = HTMLElement> extends CustomAttributes<T>, GlobalEventHandlersCamelCase<T> {
    children?: JsxNode;
    class?: ClassInfo | DirectiveResult<typeof ClassMapDirective> | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/innerHTML) */
    innerHTML?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/innerText) */
    innerText?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/textContent) */
    textContent?: number | string;
}
export interface GlobalEventHandlersCamelCase<T = HTMLElement> {
    /**
     * Fires when the user aborts the download.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)
     */
    onAbort?: EventHandlerUnion<T, UIEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event) */
    onAnimationCancel?: EventHandlerUnion<T, AnimationEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event) */
    onAnimationEnd?: EventHandlerUnion<T, AnimationEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event) */
    onAnimationIteration?: EventHandlerUnion<T, AnimationEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event) */
    onAnimationStart?: EventHandlerUnion<T, AnimationEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event) */
    onAuxClick?: EventHandlerUnion<T, MouseEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/beforeinput_event) */
    onBeforeInput?: InputEventHandlerUnion<T, InputEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforetoggle_event) */
    onBeforeToggle?: EventHandlerUnion<T, Event>;
    /**
     * Fires when the object loses the input focus.
     * @param ev The focus event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/blur_event)
     */
    onBlur?: FocusEventHandlerUnion<T, FocusEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event) */
    onCancel?: EventHandlerUnion<T, Event>;
    /**
     * Occurs when playback is possible, but would require further buffering.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)
     */
    onCanPlay?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event) */
    onCanPlayThrough?: EventHandlerUnion<T, Event>;
    /**
     * Fires when the contents of the object or selection have changed.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)
     */
    onChange?: ChangeEventHandlerUnion<T, Event>;
    /**
     * Fires when the user clicks the left mouse button on the object
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/click_event)
     */
    onClick?: EventHandlerUnion<T, PointerEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event) */
    onClose?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/compositionend_event) */
    onCompositionEnd?: EventHandlerUnion<T, CompositionEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/compositionstart_event) */
    onCompositionStart?: EventHandlerUnion<T, CompositionEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/compositionupdate_event) */
    onCompositionUpdate?: EventHandlerUnion<T, CompositionEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/contextlost_event) */
    onContextLost?: EventHandlerUnion<T, Event>;
    /**
     * Fires when the user clicks the right mouse button in the client area, opening the context menu.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)
     */
    onContextMenu?: EventHandlerUnion<T, MouseEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/contextrestored_event) */
    onContextRestored?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/copy_event) */
    onCopy?: EventHandlerUnion<T, ClipboardEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event) */
    onCueChange?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/cut_event) */
    onCut?: EventHandlerUnion<T, ClipboardEvent>;
    /**
     * Fires when the user double-clicks the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)
     */
    onDblClick?: EventHandlerUnion<T, MouseEvent>;
    /**
     * Fires on the source object continuously during a drag operation.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)
     */
    onDrag?: EventHandlerUnion<T, DragEvent>;
    /**
     * Fires on the source object when the user releases the mouse at the close of a drag operation.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)
     */
    onDragEnd?: EventHandlerUnion<T, DragEvent>;
    /**
     * Fires on the target element when the user drags the object to a valid drop target.
     * @param ev The drag event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)
     */
    onDragEnter?: EventHandlerUnion<T, DragEvent>;
    /**
     * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
     * @param ev The drag event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)
     */
    onDragLeave?: EventHandlerUnion<T, DragEvent>;
    /**
     * Fires on the target element continuously while the user drags the object over a valid drop target.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)
     */
    onDragOver?: EventHandlerUnion<T, DragEvent>;
    /**
     * Fires on the source object when the user starts to drag a text selection or selected object.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)
     */
    onDragStart?: EventHandlerUnion<T, DragEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event) */
    onDrop?: EventHandlerUnion<T, DragEvent>;
    /**
     * Occurs when the duration attribute is updated.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)
     */
    onDurationChange?: EventHandlerUnion<T, Event>;
    /**
     * Occurs when the media element is reset to its initial state.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)
     */
    onEmptied?: EventHandlerUnion<T, Event>;
    /**
     * Occurs when the end of playback is reached.
     * @param ev The event
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)
     */
    onEnded?: EventHandlerUnion<T, Event>;
    /**
     * Fires when an error occurs during object loading.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/error_event)
     */
    onError?: EventHandlerUnion<T, Event>;
    /**
     * Fires when the object receives focus.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/focus_event)
     */
    onFocus?: FocusEventHandlerUnion<T, FocusEvent>;
    /** [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event) */
    onFocusIn?: FocusEventHandlerUnion<T, FocusEvent>;
    /** [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event) */
    onFocusOut?: FocusEventHandlerUnion<T, FocusEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event) */
    onFormData?: EventHandlerUnion<T, FormDataEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/fullscreenchange_event) */
    onFullscreenChange?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/fullscreenerror_event) */
    onFullscreenError?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event) */
    onGotPointerCapture?: EventHandlerUnion<T, PointerEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/input_event) */
    onInput?: InputEventHandlerUnion<T, InputEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event) */
    onInvalid?: EventHandlerUnion<T, Event>;
    /**
     * Fires when the user presses a key.
     * @param ev The keyboard event
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)
     */
    onKeyDown?: EventHandlerUnion<T, KeyboardEvent>;
    /**
     * Fires when the user releases a key.
     * @param ev The keyboard event
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)
     */
    onKeyUp?: EventHandlerUnion<T, KeyboardEvent>;
    /**
     * Fires immediately after the browser loads the object.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement/load_event)
     */
    onLoad?: EventHandlerUnion<T, Event>;
    /**
     * Occurs when media data is loaded at the current playback position.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)
     */
    onLoadedData?: EventHandlerUnion<T, Event>;
    /**
     * Occurs when the duration and dimensions of the media have been determined.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)
     */
    onLoadedMetadata?: EventHandlerUnion<T, Event>;
    /**
     * Occurs when Internet Explorer begins looking for media data.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)
     */
    onLoadStart?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/lostpointercapture_event) */
    onLostPointerCapture?: EventHandlerUnion<T, PointerEvent>;
    /**
     * Fires when the user clicks the object with either mouse button.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)
     */
    onMouseDown?: EventHandlerUnion<T, MouseEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event) */
    onMouseEnter?: EventHandlerUnion<T, MouseEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event) */
    onMouseLeave?: EventHandlerUnion<T, MouseEvent>;
    /**
     * Fires when the user moves the mouse over the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)
     */
    onMouseMove?: EventHandlerUnion<T, MouseEvent>;
    /**
     * Fires when the user moves the mouse pointer outside the boundaries of the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)
     */
    onMouseOut?: EventHandlerUnion<T, MouseEvent>;
    /**
     * Fires when the user moves the mouse pointer into the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)
     */
    onMouseOver?: EventHandlerUnion<T, MouseEvent>;
    /**
     * Fires when the user releases a mouse button while the mouse is over the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)
     */
    onMouseUp?: EventHandlerUnion<T, MouseEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/paste_event) */
    onPaste?: EventHandlerUnion<T, ClipboardEvent>;
    /**
     * Occurs when playback is paused.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)
     */
    onPause?: EventHandlerUnion<T, Event>;
    /**
     * Occurs when the play method is requested.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)
     */
    onPlay?: EventHandlerUnion<T, Event>;
    /**
     * Occurs when the audio or video has started playing.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)
     */
    onPlaying?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event) */
    onPointerCancel?: EventHandlerUnion<T, PointerEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event) */
    onPointerDown?: EventHandlerUnion<T, PointerEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event) */
    onPointerEnter?: EventHandlerUnion<T, PointerEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event) */
    onPointerLeave?: EventHandlerUnion<T, PointerEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event) */
    onPointerMove?: EventHandlerUnion<T, PointerEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event) */
    onPointerOut?: EventHandlerUnion<T, PointerEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event) */
    onPointerOver?: EventHandlerUnion<T, PointerEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event) */
    onPointerUp?: EventHandlerUnion<T, PointerEvent>;
    /**
     * Occurs to indicate progress while downloading media data.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)
     */
    onProgress?: EventHandlerUnion<T, Event>;
    /**
     * Occurs when the playback rate is increased or decreased.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)
     */
    onRateChange?: EventHandlerUnion<T, Event>;
    /**
     * Fires when the user resets a form.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)
     */
    onReset?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event) */
    onResize?: EventHandlerUnion<T, UIEvent>;
    /**
     * Fires when the user repositions the scroll box in the scroll bar on the object.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)
     */
    onScroll?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event) */
    onScrollEnd?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event) */
    onSecurityPolicyViolation?: EventHandlerUnion<T, SecurityPolicyViolationEvent>;
    /**
     * Occurs when the seek operation ends.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)
     */
    onSeeked?: EventHandlerUnion<T, Event>;
    /**
     * Occurs when the current playback position is moved.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)
     */
    onSeeking?: EventHandlerUnion<T, Event>;
    /**
     * Fires when the current selection changes.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)
     */
    onSelect?: EventHandlerUnion<T, UIEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event) */
    onSelectionChange?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event) */
    onSelectStart?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event) */
    onSlotChange?: EventHandlerUnion<T, Event>;
    /**
     * Occurs when the download has stopped.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)
     */
    onStalled?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event) */
    onSubmit?: EventHandlerUnion<T, SubmitEvent>;
    /**
     * Occurs if the load operation has been intentionally halted.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)
     */
    onSuspend?: EventHandlerUnion<T, Event>;
    /**
     * Occurs to indicate the current playback position.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)
     */
    onTimeUpdate?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/toggle_event) */
    onToggle?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchcancel_event) */
    onTouchCancel?: EventHandlerUnion<T, TouchEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchend_event) */
    onTouchEnd?: EventHandlerUnion<T, TouchEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchmove_event) */
    onTouchMove?: EventHandlerUnion<T, TouchEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchstart_event) */
    onTouchStart?: EventHandlerUnion<T, TouchEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event) */
    onTransitionCancel?: EventHandlerUnion<T, TransitionEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event) */
    onTransitionEnd?: EventHandlerUnion<T, TransitionEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event) */
    onTransitionRun?: EventHandlerUnion<T, TransitionEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event) */
    onTransitionStart?: EventHandlerUnion<T, TransitionEvent>;
    /**
     * Occurs when the volume is changed, or playback is muted or unmuted.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)
     */
    onVolumeChange?: EventHandlerUnion<T, Event>;
    /**
     * Occurs when playback stops because the next frame of a video resource is not available.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)
     */
    onWaiting?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/wheel_event) */
    onWheel?: EventHandlerUnion<T, WheelEvent>;
}
/**
 * All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/
 *
 * @remarks
 * If attribute is settable as a property, that is preferred - such aria
 * attributes are in camelCase in this interface. Some are settable as
 * DOM attribute only - such names are in kebab-case.
 */
export interface AriaAttributes {
    /**
     * Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.
     *
     * @remarks
     * While HTML attributes on regular HTML elements are case-insensitive, when
     * the same common attributes are set on a foreign HTML elements (SVG/Math),
     * they are case sensitive. Thus, we can't author this as
     * "aria-activeDescendant"
     */
    ["aria-activedescendant"]?: string;
    /**
     * Identifies the element (or elements) whose contents or presence are controlled by the current element.
     * @see ariaOwns.
     */
    ["aria-controls"]?: string;
    /**
     * Identifies the element (or elements) that describes the object.
     * @see aria-labelledby
     */
    ["aria-describedby"]?: string;
    /**
     * Identifies the element that provides a detailed, extended description for the object.
     * @see aria-describedby
     */
    ["aria-details"]?: string;
    /**
     * Identifies the element that provides an error message for the object.
     * @see ariaInvalid
     * @see aria-describedby
     */
    ["aria-errormessage"]?: string;
    /**
     * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
     * allows assistive technology to override the general default of reading in document source order.
     */
    ["aria-flowto"]?: string;
    /**
     * Identifies the element (or elements) that labels the current element.
     * @see aria-describedby
     */
    ["aria-labelledby"]?: string;
    /**
     * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
     * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
     * @see aria-controls
     */
    ["aria-owns"]?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaAtomic) */
    ariaAtomic?: boolean | "false" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaAutoComplete) */
    ariaAutoComplete?: "both" | "inline" | "list" | "none";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaBrailleLabel) */
    ariaBrailleLabel?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaBrailleRoleDescription) */
    ariaBrailleRoleDescription?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaBusy) */
    ariaBusy?: boolean | "false" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaChecked) */
    ariaChecked?: boolean | "false" | "mixed" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColCount) */
    ariaColCount?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColIndex) */
    ariaColIndex?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColSpan) */
    ariaColSpan?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaCurrent) */
    ariaCurrent?: boolean | "date" | "false" | "location" | "page" | "step" | "time" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDescription) */
    ariaDescription?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDisabled) */
    ariaDisabled?: boolean | "false" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaExpanded) */
    ariaExpanded?: boolean | "false" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaHasPopup) */
    ariaHasPopup?: boolean | "dialog" | "false" | "grid" | "listbox" | "menu" | "tree" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaHidden) */
    ariaHidden?: boolean | "false" | "true";
    /**
     * Indicates the entered value does not conform to the format expected by the application.
     * @see aria-errormessage
     */
    ariaInvalid?: boolean | "false" | "grammar" | "spelling" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaKeyShortcuts) */
    ariaKeyShortcuts?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLabel) */
    ariaLabel?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLevel) */
    ariaLevel?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLive) */
    ariaLive?: "assertive" | "off" | "polite";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaModal) */
    ariaModal?: boolean | "false" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiLine) */
    ariaMultiLine?: boolean | "false" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiSelectable) */
    ariaMultiSelectable?: boolean | "false" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaOrientation) */
    ariaOrientation?: "horizontal" | "vertical";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPlaceholder) */
    ariaPlaceholder?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPosInSet) */
    ariaPosInSet?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPressed) */
    ariaPressed?: boolean | "false" | "mixed" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaReadOnly) */
    ariaReadOnly?: boolean | "false" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRelevant) */
    ariaRelevant?: "additions removals" | "additions text" | "additions" | "all" | "removals additions" | "removals text" | "removals" | "text additions" | "text removals" | "text";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRequired) */
    ariaRequired?: boolean | "false" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRoleDescription) */
    ariaRoleDescription?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowCount) */
    ariaRowCount?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowIndex) */
    ariaRowIndex?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowSpan) */
    ariaRowSpan?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSelected) */
    ariaSelected?: boolean | "false" | "true";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSetSize) */
    ariaSetSize?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSort) */
    ariaSort?: "ascending" | "descending" | "none" | "other";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMax) */
    ariaValueMax?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMin) */
    ariaValueMin?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueNow) */
    ariaValueNow?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueText) */
    ariaValueText?: string;
    role?: "alert" | "alertdialog" | "application" | "article" | "banner" | "button" | "cell" | "checkbox" | "columnheader" | "combobox" | "complementary" | "contentinfo" | "definition" | "dialog" | "directory" | "document" | "feed" | "figure" | "form" | "grid" | "gridcell" | "group" | "heading" | "img" | "link" | "list" | "listbox" | "listitem" | "log" | "main" | "marquee" | "math" | "menu" | "menubar" | "menuitem" | "menuitemcheckbox" | "menuitemradio" | "meter" | "navigation" | "none" | "note" | "option" | "presentation" | "progressbar" | "radio" | "radiogroup" | "region" | "row" | "rowgroup" | "rowheader" | "scrollbar" | "search" | "searchbox" | "separator" | "slider" | "spinbutton" | "status" | "switch" | "tab" | "table" | "tablist" | "tabpanel" | "term" | "textbox" | "timer" | "toolbar" | "tooltip" | "tree" | "treegrid" | "treeitem";
}
/**
 * @remarks
 * Name uses consecutive capitalized letters to avoid a breaking change. We can
 * batch breaking changes in a single release in the future.
 */
export interface HTMLAttributes<T = HTMLElement> extends AriaAttributes, DOMAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKey) */
    accessKey?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColIndexText) */
    ariaColIndexText?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowIndexText) */
    ariaRowIndexText?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/autocapitalize) */
    autocapitalize?: HtmlAutocapitalize;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/autofocus) */
    autofocus?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/contentEditable) */
    contentEditable?: boolean | "inherit" | "plaintext-only";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dir) */
    dir?: HtmlDir;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/draggable) */
    draggable?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/enterKeyHint) */
    enterKeyHint?: "done" | "enter" | "go" | "next" | "previous" | "search" | "send";
    exportParts?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/hidden) */
    hidden?: boolean | "hidden" | "until-found";
    /**
     * Returns the value of element's id content attribute. Can be set to change it.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/id)
     */
    id?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/inert) */
    inert?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/inputMode) */
    inputMode?: "decimal" | "email" | "none" | "numeric" | "search" | "tel" | "text" | "url";
    itemId?: string;
    itemProp?: string;
    itemRef?: string;
    itemScope?: boolean;
    itemType?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/lang) */
    lang?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/nonce) */
    nonce?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/part) */
    part?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/popover) */
    popover?: boolean | "auto" | "manual";
    /**
     * Returns the value of element's slot content attribute. Can be set to change it.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/slot)
     */
    slot?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/spellcheck) */
    spellcheck?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/style) */
    style?: CssProperties | DirectiveResult<typeof StyleMapDirective> | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/tabIndex) */
    tabIndex?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/title) */
    title?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/translate) */
    translate?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/writingSuggestions) */
    writingSuggestions?: string;
}
interface HtmlAnchorAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/download) */
    download?: string;
    /**
     * Returns the hyperlink's URL.
     *
     * Can be set, to change the URL.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/href)
     */
    href?: string;
    /**
     * Sets or retrieves the language code of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hreflang)
     */
    hreflang?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/ping) */
    ping?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/referrerPolicy) */
    referrerPolicy?: ReferrerPolicy;
    /**
     * Sets or retrieves the relationship between the object and the destination of the link.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/rel)
     */
    rel?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/relList) */
    relList?: string;
    /**
     * Sets or retrieves the window or frame at which to target content.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/target)
     */
    target?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/type) */
    type?: string;
}
interface HtmlAudioAttributes<T> extends HtmlMediaAttributes<T> {
}
interface HtmlAreaAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves a text alternative to the graphic.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/alt)
     */
    alt?: string;
    /**
     * Sets or retrieves the coordinates of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/coords)
     */
    coords?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/download) */
    download?: string;
    /**
     * Returns the hyperlink's URL.
     *
     * Can be set, to change the URL.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/href)
     */
    href?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/ping) */
    ping?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/referrerPolicy) */
    referrerPolicy?: ReferrerPolicy;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/rel) */
    rel?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/relList) */
    relList?: string;
    /**
     * Sets or retrieves the shape of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/shape)
     */
    shape?: "circle" | "default" | "poly" | "rect";
    /**
     * Sets or retrieves the window or frame at which to target content.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/target)
     */
    target?: string;
}
interface HtmlBaseAttributes<T> extends HTMLAttributes<T> {
    /**
     * Gets or sets the baseline URL on which relative links are based.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/href)
     */
    href?: string;
    /**
     * Sets or retrieves the window or frame at which to target content.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/target)
     */
    target?: string;
}
interface HtmlBlockquoteAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves reference information about the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement/cite)
     */
    cite?: string;
}
interface HtmlButtonAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/disabled) */
    disabled?: boolean;
    form?: string;
    /**
     * Overrides the action attribute (where the data on a form is sent) on the parent form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formAction)
     */
    formAction?: string;
    /**
     * Used to override the encoding (formEnctype attribute) specified on the form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formEnctype)
     */
    formEnctype?: HtmlFormEncType;
    /**
     * Overrides the submit method attribute previously specified on a form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formMethod)
     */
    formMethod?: HtmlFormMethod;
    /**
     * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formNoValidate)
     */
    formNoValidate?: boolean;
    /**
     * Overrides the target attribute on a form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formTarget)
     */
    formTarget?: string;
    /**
     * Sets or retrieves the name of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/name)
     */
    name?: string;
    popoverTarget?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetAction) */
    popoverTargetAction?: "hide" | "show" | "toggle";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetElement) */
    popoverTargetElement?: HTMLElement;
    /**
     * Gets the classification and default behavior of the button.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/type)
     */
    type?: "button" | "reset" | "submit";
    /**
     * Sets or retrieves the default or selected value of the control.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/value)
     */
    value?: number | string;
}
interface HtmlCanvasAttributes<T> extends HTMLAttributes<T> {
    /**
     * Gets or sets the height of a canvas element on a document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/height)
     */
    height?: number | string;
    /**
     * Gets or sets the width of a canvas element on a document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/width)
     */
    width?: number | string;
}
interface HtmlColAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves the number of columns in the group.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/span)
     */
    span?: number | string;
}
interface HtmlColgroupAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves the number of columns in the group.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/span)
     */
    span?: number | string;
}
interface HtmlDataAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataElement/value) */
    value?: number | string;
}
interface HtmlModAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves reference information about the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement/cite)
     */
    cite?: string;
    /**
     * Sets or retrieves the date and time of a modification to the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement/dateTime)
     */
    dateTime?: string;
}
interface HtmlDetailsAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/name) */
    name?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/open) */
    open?: boolean;
}
interface HtmlDialogAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/open) */
    open?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/returnValue) */
    returnValue?: string;
}
interface HtmlEmbedAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves the height of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/height)
     */
    height?: number | string;
    /**
     * Sets or retrieves a URL to be loaded by the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/src)
     */
    src?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/type) */
    type?: string;
    /**
     * Sets or retrieves the width of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/width)
     */
    width?: number | string;
}
interface HtmlFieldsetAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/disabled) */
    disabled?: boolean;
    form?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/name) */
    name?: string;
}
interface HtmlFormAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/acceptCharset)
     */
    acceptCharset?: string;
    /**
     * Sets or retrieves the URL to which the form content is sent for processing.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/action)
     */
    action?: string;
    /**
     * Specifies whether autocomplete is applied to an editable text field.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/autocomplete)
     */
    autocomplete?: "off" | "on";
    /**
     * Sets or retrieves the MIME encoding for the form.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/encoding)
     */
    encoding?: HtmlFormEncType;
    /**
     * Sets or retrieves the encoding type for the form.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/enctype)
     */
    enctype?: HtmlFormEncType;
    /**
     * Sets or retrieves how to send the form data to the server.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/method)
     */
    method?: HtmlFormMethod;
    /**
     * Sets or retrieves the name of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/name)
     */
    name?: string;
    /**
     * Designates a form that is not validated when submitted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/noValidate)
     */
    noValidate?: boolean;
    rel?: string;
    relList?: string;
    /**
     * Sets or retrieves the window or frame at which to target content.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/target)
     */
    target?: string;
}
interface HtmlIframeAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/allow) */
    allow?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/allowFullscreen) */
    allowFullscreen?: boolean;
    /**
     * Sets or retrieves the height of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/height)
     */
    height?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/loading) */
    loading?: "eager" | "lazy";
    /**
     * Sets or retrieves the frame name.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/name)
     */
    name?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/referrerPolicy) */
    referrerPolicy?: ReferrerPolicy;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/sandbox) */
    sandbox?: HtmlIframeSandbox | string;
    /**
     * Sets or retrieves a URL to be loaded by the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/src)
     */
    src?: string;
    /**
     * Sets or retrives the content of the page that is to contain.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/srcdoc)
     */
    srcdoc?: string;
    /**
     * Sets or retrieves the width of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/width)
     */
    width?: number | string;
}
interface HtmlImgAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves a text alternative to the graphic.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/alt)
     */
    alt?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/crossOrigin) */
    crossOrigin?: HtmlCrossOrigin;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/decoding) */
    decoding?: "async" | "auto" | "sync";
    elementTiming?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/fetchPriority) */
    fetchPriority?: "auto" | "high" | "low";
    /**
     * Sets or retrieves the height of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/height)
     */
    height?: number | string;
    /**
     * Sets or retrieves whether the image is a server-side image map.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/isMap)
     */
    isMap?: boolean;
    /**
     * Sets or retrieves the policy for loading image elements that are outside the viewport.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/loading)
     */
    loading?: "eager" | "lazy";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/referrerPolicy) */
    referrerPolicy?: ReferrerPolicy;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/sizes) */
    sizes?: string;
    /**
     * The address or URL of the a media resource that is to be considered.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/src)
     */
    src?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/srcset) */
    srcset?: string;
    /**
     * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/useMap)
     */
    useMap?: string;
    /**
     * Sets or retrieves the width of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/width)
     */
    width?: number | string;
}
interface HtmlInputAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves a comma-separated list of content types.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/accept)
     */
    accept?: string;
    /**
     * Sets or retrieves a text alternative to the graphic.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/alt)
     */
    alt?: string;
    /**
     * Specifies whether autocomplete is applied to an editable text field.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/autocomplete)
     */
    autocomplete?: AutoFill;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/capture) */
    capture?: boolean | string;
    /**
     * Sets or retrieves the state of the check box or radio button.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/checked)
     */
    checked?: boolean;
    /**
     * Sets or retrieves the state of the check box or radio button.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/defaultChecked)
     */
    defaultChecked?: boolean;
    /**
     * Sets or retrieves the initial contents of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/defaultValue)
     */
    defaultValue?: number | string;
    dirName?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/disabled) */
    disabled?: boolean;
    /**
     * Returns a FileList object on a file type input object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/files)
     */
    files?: FileList;
    form?: string;
    /**
     * Overrides the action attribute (where the data on a form is sent) on the parent form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formAction)
     */
    formAction?: string;
    /**
     * Used to override the encoding (formEnctype attribute) specified on the form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formEnctype)
     */
    formEnctype?: HtmlFormEncType;
    /**
     * Overrides the submit method attribute previously specified on a form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formMethod)
     */
    formMethod?: HtmlFormMethod;
    /**
     * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formNoValidate)
     */
    formNoValidate?: boolean;
    /**
     * Overrides the target attribute on a form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formTarget)
     */
    formTarget?: string;
    /**
     * Sets or retrieves the height of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/height)
     */
    height?: number | string;
    /**
     * When set, overrides the rendering of checkbox controls so that the current value is not visible.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/indeterminate)
     */
    indeterminate?: boolean;
    list?: string;
    /**
     * Defines the maximum acceptable value for an input element with type="number".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/max)
     */
    max?: number | string;
    /**
     * Sets or retrieves the maximum number of characters that the user can enter in a text control.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/maxLength)
     */
    maxLength?: number | string;
    /**
     * Defines the minimum acceptable value for an input element with type="number". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/min)
     */
    min?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/minLength) */
    minLength?: number | string;
    /**
     * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/multiple)
     */
    multiple?: boolean;
    /**
     * Sets or retrieves the name of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/name)
     */
    name?: string;
    /**
     * Gets or sets a string containing a regular expression that the user's input must match.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/pattern)
     */
    pattern?: string;
    /**
     * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/placeholder)
     */
    placeholder?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetAction) */
    popoverTargetAction?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetElement) */
    popoverTargetElement?: Element;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/readOnly) */
    readOnly?: boolean;
    /**
     * When present, marks an element that can't be submitted without a value.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/required)
     */
    required?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionDirection) */
    selectionDirection?: "backward" | "forward" | "none";
    /**
     * Gets or sets the end position or offset of a text selection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionEnd)
     */
    selectionEnd?: number;
    /**
     * Gets or sets the starting position or offset of a text selection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionStart)
     */
    selectionStart?: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/size) */
    size?: number | string;
    /**
     * The address or URL of the a media resource that is to be considered.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/src)
     */
    src?: string;
    /**
     * Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/step)
     */
    step?: number | string;
    /**
     * Returns the content type of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/type)
     */
    type?: string;
    /**
     * Returns the value of the data at the cursor's current position.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/value)
     */
    value?: number | string;
    /**
     * Returns a Date object representing the form control's value, if applicable; otherwise, returns null. Can be set, to change the value. Throws an "InvalidStateError" DOMException if the control isn't date- or time-based.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/valueAsDate)
     */
    valueAsDate?: Date;
    /**
     * Returns the input field value as a number.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/valueAsNumber)
     */
    valueAsNumber?: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/webkitdirectory) */
    webkitdirectory?: boolean;
    /**
     * Sets or retrieves the width of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/width)
     */
    width?: number | string;
}
interface HtmlLabelAttributes<T> extends HTMLAttributes<T> {
    form?: string;
    /**
     * Sets or retrieves the object to which the given label object is assigned.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/htmlFor)
     */
    htmlFor?: string;
}
interface HtmlLiAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves the value of a list item.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLIElement/value)
     */
    value?: number | string;
}
interface HtmlLinkAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/as) */
    as?: HtmlLinkAs;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/blocking) */
    blocking?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/crossOrigin) */
    crossOrigin?: HtmlCrossOrigin;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/disabled) */
    disabled?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/fetchPriority) */
    fetchPriority?: "auto" | "high" | "low";
    /**
     * Sets or retrieves a destination URL or an anchor point.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/href)
     */
    href?: string;
    /**
     * Sets or retrieves the language code of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/hreflang)
     */
    hreflang?: string;
    imageSizes?: string;
    imageSrcset?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/integrity) */
    integrity?: string;
    /**
     * Sets or retrieves the media type.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/media)
     */
    media?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/referrerPolicy) */
    referrerPolicy?: ReferrerPolicy;
    /**
     * Sets or retrieves the relationship between the object and the destination of the link.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/rel)
     */
    rel?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/relList) */
    relList?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/sizes) */
    sizes?: string;
    /**
     * Sets or retrieves the MIME type of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/type)
     */
    type?: string;
}
interface HtmlMapAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves the name of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement/name)
     */
    name?: string;
}
interface HtmlMathMlAttributes<T> extends HTMLAttributes<T> {
    dir?: "ltr" | "rtl";
    /**
     * HTML attributes in foreign elements are case-sensitive
     */
    displaystyle?: boolean;
    /**
     * HTML attributes in foreign elements are case-sensitive
     */
    scriptlevel?: boolean | string;
}
interface HTMLMathElement extends MathMLElement {
    display?: "block" | "inline";
}
interface HtmlMediaAttributes<T> extends HTMLAttributes<T> {
    /**
     * Gets or sets a value that indicates whether to start playing the media automatically.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/autoplay)
     */
    autoplay?: boolean;
    /**
     * Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/controls)
     */
    controls?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/crossOrigin) */
    crossOrigin?: HtmlCrossOrigin;
    /**
     * Gets or sets the current playback position, in seconds.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/currentTime)
     */
    currentTime?: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultMuted) */
    defaultMuted?: boolean;
    /**
     * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultPlaybackRate)
     */
    defaultPlaybackRate?: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/disableRemotePlayback) */
    disableRemotePlayback?: boolean;
    /**
     * Gets or sets a flag to specify whether playback should restart after it completes.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loop)
     */
    loop?: boolean;
    /**
     * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/muted)
     */
    muted?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/encrypted_event) */
    onEncrypted?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waitingforkey_event) */
    onWaitingForKey?: EventHandlerUnion<T, Event>;
    /**
     * Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playbackRate)
     */
    playbackRate?: number;
    /**
     * Gets or sets a value indicating what data should be preloaded, if any.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preload)
     */
    preload?: "" | "auto" | "metadata" | "none";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preservesPitch) */
    preservesPitch?: boolean;
    /**
     * The address or URL of the a media resource that is to be considered.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/src)
     */
    src?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/srcObject) */
    srcObject?: MediaProvider;
    /**
     * Gets or sets the volume level for audio portions of the media element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volume)
     */
    volume?: number;
}
interface HtmlMenuAttributes<T> extends HTMLAttributes<T> {
    label?: string;
    type?: "context" | "toolbar";
}
interface HtmlMetaAttributes<T> extends HTMLAttributes<T> {
    charset?: string;
    /**
     * Gets or sets meta-information to associate with httpEquiv or name.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/content)
     */
    content?: string;
    /**
     * Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/httpEquiv)
     */
    httpEquiv?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/media) */
    media?: string;
    /**
     * Sets or retrieves the value specified in the content attribute of the meta object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/name)
     */
    name?: string;
}
interface HtmlMeterAttributes<T> extends HTMLAttributes<T> {
    form?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/high) */
    high?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/low) */
    low?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/max) */
    max?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/min) */
    min?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/optimum) */
    optimum?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/value) */
    value?: number | string;
}
interface HtmlQuoteAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves reference information about the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement/cite)
     */
    cite?: string;
}
interface HtmlObjectAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves the URL that references the data of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/data)
     */
    data?: string;
    form?: string;
    /**
     * Sets or retrieves the height of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/height)
     */
    height?: number | string;
    /**
     * Sets or retrieves the name of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/name)
     */
    name?: string;
    /**
     * Sets or retrieves the MIME type of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/type)
     */
    type?: string;
    /**
     * Sets or retrieves the width of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/width)
     */
    width?: number | string;
}
interface HtmlOlAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/reversed) */
    reversed?: boolean;
    /**
     * The starting number.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/start)
     */
    start?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/type) */
    type?: "1" | "A" | "a" | "I" | "i";
}
interface HtmlOptgroupAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/disabled) */
    disabled?: boolean;
    /**
     * Sets or retrieves a value that you can use to implement your own label functionality for the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/label)
     */
    label?: string;
}
interface HtmlOptionAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves the status of an option.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/defaultSelected)
     */
    defaultSelected?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/disabled) */
    disabled?: boolean;
    /**
     * Sets or retrieves a value that you can use to implement your own label functionality for the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/label)
     */
    label?: string;
    /**
     * Sets or retrieves whether the option in the list box is the default item.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/selected)
     */
    selected?: boolean;
    /**
     * Sets or retrieves the value which is returned to the server when the form control is submitted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/value)
     */
    value?: number | string;
}
interface HtmlOutputAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/defaultValue) */
    defaultValue?: number | string;
    for?: string;
    form?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/htmlFor) */
    htmlFor?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/name) */
    name?: string;
    /**
     * Returns the element's current value.
     *
     * Can be set, to change the value.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/value)
     */
    value?: number | string;
}
interface HtmlProgressAttributes<T> extends HTMLAttributes<T> {
    /**
     * Defines the maximum, or "done" value for a progress element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/max)
     */
    max?: number | string;
    /**
     * Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/value)
     */
    value?: number | string;
}
interface HtmlScriptAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/async) */
    async?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/blocking) */
    blocking?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/crossOrigin) */
    crossOrigin?: HtmlCrossOrigin;
    /**
     * Sets or retrieves the status of the script.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/defer)
     */
    defer?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/fetchPriority) */
    fetchPriority?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/integrity) */
    integrity?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/noModule) */
    noModule?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/referrerPolicy) */
    referrerPolicy?: ReferrerPolicy;
    /**
     * Retrieves the URL to an external file that contains the source code or data.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/src)
     */
    src?: string;
    /**
     * Sets or retrieves the MIME type for the associated scripting engine.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/type)
     */
    type?: string;
}
interface HtmlSelectAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/autocomplete) */
    autocomplete?: AutoFill;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/disabled) */
    disabled?: boolean;
    form?: string;
    /**
     * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/multiple)
     */
    multiple?: boolean;
    /**
     * Sets or retrieves the name of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/name)
     */
    name?: string;
    /**
     * When present, marks an element that can't be submitted without a value.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/required)
     */
    required?: boolean;
    /**
     * Sets or retrieves the index of the selected option in a select object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/selectedIndex)
     */
    selectedIndex?: number;
    /**
     * Sets or retrieves the number of rows in the list box.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/size)
     */
    size?: number | string;
    /**
     * Sets or retrieves the value which is returned to the server when the form control is submitted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/value)
     */
    value?: number | string;
}
interface HtmlSlotAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/name) */
    name?: string;
}
interface HtmlSourceAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/height) */
    height?: number;
    /**
     * Gets or sets the intended media type of the media source.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/media)
     */
    media?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/sizes) */
    sizes?: string;
    /**
     * The address or URL of the a media resource that is to be considered.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/src)
     */
    src?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/srcset) */
    srcset?: string;
    /**
     * Gets or sets the MIME type of a media resource.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/type)
     */
    type?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/width) */
    width?: number;
}
interface HtmlStyleAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/blocking) */
    blocking?: string;
    /**
     * Enables or disables the style sheet.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/disabled)
     */
    disabled?: boolean;
    /**
     * Sets or retrieves the media type.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/media)
     */
    media?: string;
}
interface HtmlTdAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves abbreviated text for the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/abbr)
     */
    abbr?: string;
    /**
     * Sets or retrieves the number columns in the table that the object should span.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/colSpan)
     */
    colSpan?: number | string;
    /**
     * Sets or retrieves a list of header cells that provide information for the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/headers)
     */
    headers?: string;
    /**
     * Sets or retrieves how many rows in a table the cell should span.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/rowSpan)
     */
    rowSpan?: number | string;
    /**
     * Sets or retrieves the group of cells in a table to which the object's information applies.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/scope)
     */
    scope?: "col" | "colgroup" | "row" | "rowgroup";
}
interface HtmlTemplateAttributes<T extends HTMLTemplateElement> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootClonable) */
    shadowRootClonable?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootDelegatesFocus) */
    shadowRootDelegatesFocus?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootMode) */
    shadowRootMode?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootSerializable) */
    shadowRootSerializable?: boolean;
}
interface HtmlTextareaAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/autocomplete) */
    autocomplete?: AutoFill;
    children?: "Error: Use value property instead. See https://lit.dev/docs/templates/expressions/#invalid-locations";
    /**
     * Sets or retrieves the width of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/cols)
     */
    cols?: number | string;
    /**
     * Sets or retrieves the initial contents of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/defaultValue)
     */
    defaultValue?: number | string;
    dirName?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/disabled) */
    disabled?: boolean;
    form?: string;
    /**
     * Sets or retrieves the maximum number of characters that the user can enter in a text control.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/maxLength)
     */
    maxLength?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/minLength) */
    minLength?: number | string;
    /**
     * Sets or retrieves the name of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/name)
     */
    name?: string;
    /**
     * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/placeholder)
     */
    placeholder?: string;
    /**
     * Sets or retrieves the value indicated whether the content of the object is read-only.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/readOnly)
     */
    readOnly?: boolean;
    /**
     * When present, marks an element that can't be submitted without a value.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/required)
     */
    required?: boolean;
    /**
     * Sets or retrieves the number of horizontal rows contained in the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/rows)
     */
    rows?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/selectionDirection) */
    selectionDirection?: "backward" | "forward" | "none";
    /**
     * Gets or sets the end position or offset of a text selection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/selectionEnd)
     */
    selectionEnd?: number;
    /**
     * Gets or sets the starting position or offset of a text selection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/selectionStart)
     */
    selectionStart?: number;
    /**
     * Retrieves or sets the text in the entry field of the textArea element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/value)
     */
    value?: number | string;
    /**
     * Sets or retrieves how to handle wordwrapping in the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/wrap)
     */
    wrap?: "hard" | "off" | "soft";
}
interface HtmlThAttributes<T> extends HTMLAttributes<T> {
    /**
     * Sets or retrieves abbreviated text for the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/abbr)
     */
    abbr?: string;
    /**
     * Sets or retrieves the number columns in the table that the object should span.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/colSpan)
     */
    colSpan?: number | string;
    /**
     * Sets or retrieves a list of header cells that provide information for the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/headers)
     */
    headers?: string;
    /**
     * Sets or retrieves how many rows in a table the cell should span.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/rowSpan)
     */
    rowSpan?: number | string;
    /**
     * Sets or retrieves the group of cells in a table to which the object's information applies.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/scope)
     */
    scope?: "col" | "colgroup" | "row" | "rowgroup";
}
interface HtmlTimeAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTimeElement/dateTime) */
    dateTime?: string;
}
interface HtmlTrackAttributes<T> extends HTMLAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/default) */
    default?: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/kind) */
    kind?: "captions" | "chapters" | "descriptions" | "metadata" | "subtitles";
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/label) */
    label?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/src) */
    src?: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/srclang) */
    srclang?: string;
}
interface HtmlVideoAttributes<T> extends HtmlMediaAttributes<T> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/disablePictureInPicture) */
    disablePictureInPicture?: boolean;
    elementTiming?: string;
    /**
     * Gets or sets the height of the video element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/height)
     */
    height?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/enterpictureinpicture_event) */
    onEnterPictureInPicture?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/leavepictureinpicture_event) */
    onLeavePictureInPicture?: EventHandlerUnion<T, Event>;
    /** Gets or sets the playsinline of the video element. for example, On iPhone, video elements will now be allowed to play inline, and will not automatically enter fullscreen mode when playback begins. */
    playsInline?: boolean;
    /**
     * Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/poster)
     */
    poster?: string;
    /**
     * Gets or sets the width of the video element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/width)
     */
    width?: number | string;
}
type SVGPreserveAspectRatio = "none" | "xMaxYMax meet" | "xMaxYMax slice" | "xMaxYMax" | "xMaxYMid meet" | "xMaxYMid slice" | "xMaxYMid" | "xMaxYMin meet" | "xMaxYMin slice" | "xMaxYMin" | "xMidYMax meet" | "xMidYMax slice" | "xMidYMax" | "xMidYMid meet" | "xMidYMid slice" | "xMidYMid" | "xMidYMin meet" | "xMidYMin slice" | "xMidYMin" | "xMinYMax meet" | "xMinYMax slice" | "xMinYMax" | "xMinYMid meet" | "xMinYMid slice" | "xMinYMid" | "xMinYMin meet" | "xMinYMin slice" | "xMinYMin";
type ImagePreserveAspectRatio = SVGPreserveAspectRatio | "defer none" | "defer xMaxYMax meet" | "defer xMaxYMax slice" | "defer xMaxYMax" | "defer xMaxYMid meet" | "defer xMaxYMid slice" | "defer xMaxYMid" | "defer xMaxYMin meet" | "defer xMaxYMin slice" | "defer xMaxYMin" | "defer xMidYMax meet" | "defer xMidYMax slice" | "defer xMidYMax" | "defer xMidYMid meet" | "defer xMidYMid slice" | "defer xMidYMid" | "defer xMidYMin meet" | "defer xMidYMin slice" | "defer xMidYMin" | "defer xMinYMax meet" | "defer xMinYMax slice" | "defer xMinYMax" | "defer xMinYMid meet" | "defer xMinYMid slice" | "defer xMinYMid" | "defer xMinYMin meet" | "defer xMinYMin slice" | "defer xMinYMin";
type SVGUnits = "objectBoundingBox" | "userSpaceOnUse";
interface SvgCoreAttributes<T> extends AriaAttributes, DOMAttributes<T> {
    id?: string;
    lang?: string;
    tabIndex?: number | string;
}
interface SvgStylableAttributes {
    class?: ClassInfo | DirectiveResult<typeof ClassMapDirective> | string;
    style?: CssProperties | DirectiveResult<typeof StyleMapDirective> | string;
}
interface SvgTransformableAttributes {
    transform?: string;
}
interface SvgConditionalProcessingAttributes {
    requiredExtensions?: string;
    requiredFeatures?: string;
    systemLanguage?: string;
}
interface SvgExternalResourceAttributes {
    externalResourcesRequired?: boolean | "false" | "true";
}
interface SvgAnimationTimingAttributes {
    begin?: string;
    dur?: string;
    end?: string;
    fill?: "freeze" | "remove";
    max?: string;
    min?: string;
    repeatCount?: number | "indefinite";
    repeatDur?: string;
    restart?: "always" | "never" | "whenNotActive";
}
interface SvgAnimationValueAttributes {
    by?: number | string;
    calcMode?: "discrete" | "linear" | "paced" | "spline";
    from?: number | string;
    keySplines?: string;
    keyTimes?: string;
    to?: number | string;
    values?: string;
}
interface SvgAnimationAdditionAttributes {
    accumulate?: "none" | "sum";
    additive?: "replace" | "sum";
    attributeName?: string;
}
interface SvgAnimationAttributeTargetAttributes {
    attributeName?: string;
    attributeType?: "auto" | "CSS" | "XML";
}
interface SvgPresentationAttributes {
    "alignment-baseline"?: "after-edge" | "alphabetic" | "auto" | "baseline" | "before-edge" | "central" | "hanging" | "ideographic" | "inherit" | "mathematical" | "middle" | "text-after-edge" | "text-before-edge";
    "baseline-shift"?: number | string;
    "clip"?: string;
    "clip-path"?: string;
    "clip-rule"?: "evenodd" | "inherit" | "nonzero";
    "color"?: string;
    "color-interpolation"?: "auto" | "inherit" | "linearRGB" | "sRGB";
    "color-interpolation-filters"?: "auto" | "inherit" | "linearRGB" | "sRGB";
    "color-profile"?: string;
    "color-rendering"?: "auto" | "inherit" | "optimizeQuality" | "optimizeSpeed";
    "cursor"?: string;
    "direction"?: "inherit" | "ltr" | "rtl";
    "display"?: string;
    "dominant-baseline"?: "alphabetic" | "auto" | "central" | "hanging" | "ideographic" | "inherit" | "mathematical" | "middle" | "text-bottom" | "text-top";
    "enable-background"?: string;
    "fill"?: string;
    "fill-opacity"?: number | string | "inherit";
    "fill-rule"?: "evenodd" | "inherit" | "nonzero";
    "filter"?: string;
    "flood-color"?: string;
    "flood-opacity"?: number | string | "inherit";
    "font-family"?: string;
    "font-size"?: string;
    "font-size-adjust"?: number | string;
    "font-stretch"?: string;
    "font-style"?: "inherit" | "italic" | "normal" | "oblique";
    "font-variant"?: string;
    "font-weight"?: number | string;
    "glyph-orientation-horizontal"?: string;
    "glyph-orientation-vertical"?: string;
    "image-rendering"?: "auto" | "inherit" | "optimizeQuality" | "optimizeSpeed";
    "kerning"?: string;
    "letter-spacing"?: number | string;
    "lighting-color"?: string;
    "marker-end"?: string;
    "marker-mid"?: string;
    "marker-start"?: string;
    "mask"?: string;
    "opacity"?: number | string | "inherit";
    "overflow"?: "auto" | "hidden" | "inherit" | "scroll" | "visible";
    "pathLength"?: number | string;
    "pointer-events"?: "all" | "bounding-box" | "color" | "fill" | "inherit" | "none" | "painted" | "stroke" | "visible" | "visibleFill" | "visiblePainted" | "visibleStroke";
    "shape-rendering"?: "auto" | "crispEdges" | "geometricPrecision" | "inherit" | "optimizeSpeed";
    "stop-color"?: string;
    "stop-opacity"?: number | string | "inherit";
    "stroke"?: string;
    "stroke-dasharray"?: string;
    "stroke-dashoffset"?: number | string;
    "stroke-linecap"?: "butt" | "inherit" | "round" | "square";
    "stroke-linejoin"?: "arcs" | "bevel" | "inherit" | "miter-clip" | "miter" | "round";
    "stroke-miterlimit"?: number | string | "inherit";
    "stroke-opacity"?: number | string | "inherit";
    "stroke-width"?: number | string;
    "text-anchor"?: "end" | "inherit" | "middle" | "start";
    "text-decoration"?: "blink" | "inherit" | "line-through" | "none" | "overline" | "underline";
    "text-rendering"?: "auto" | "geometricPrecision" | "inherit" | "optimizeLegibility" | "optimizeSpeed";
    "unicode-bidi"?: string;
    "visibility"?: "collapse" | "hidden" | "inherit" | "visible";
    "word-spacing"?: number | string;
    "writing-mode"?: "inherit" | "lr-tb" | "lr" | "rl-tb" | "rl" | "tb-rl" | "tb";
}
interface SvgAnimationElementAttributes<T> extends SvgCoreAttributes<T>, SvgExternalResourceAttributes, SvgConditionalProcessingAttributes {
}
interface SvgContainerElementAttributes<T> extends SvgCoreAttributes<T>, SvgShapeElementAttributes<T>, Pick<SvgPresentationAttributes, "clip-path" | "color-interpolation" | "color-rendering" | "cursor" | "enable-background" | "filter" | "mask" | "opacity"> {
}
interface SvgFilterPrimitiveElementAttributes<T> extends SvgCoreAttributes<T>, Pick<SvgPresentationAttributes, "color-interpolation-filters"> {
    height?: number | string;
    result?: string;
    width?: number | string;
    x?: number | string;
    y?: number | string;
}
interface SvgSingleInputFilterAttributes {
    in?: string;
}
interface SvgDoubleInputFilterAttributes {
    in?: string;
    in2?: string;
}
interface SvgFitToViewBoxAttributes {
    preserveAspectRatio?: SVGPreserveAspectRatio;
    viewBox?: string;
}
interface SvgGradientElementAttributes<T> extends SvgCoreAttributes<T>, SvgExternalResourceAttributes, SvgStylableAttributes {
    gradientTransform?: string;
    gradientUnits?: SVGUnits;
    href?: string;
    spreadMethod?: "pad" | "reflect" | "repeat";
}
interface SvgGraphicsElementAttributes<T> extends SvgCoreAttributes<T>, Pick<SvgPresentationAttributes, "clip-rule" | "color-interpolation" | "color-rendering" | "cursor" | "display" | "filter" | "mask" | "opacity" | "pointer-events" | "visibility"> {
}
interface SvgLightSourceElementAttributes<T> extends SvgCoreAttributes<T> {
}
interface SvgNewViewportAttributes<T> extends SvgCoreAttributes<T>, Pick<SvgPresentationAttributes, "clip" | "overflow"> {
    viewBox?: string;
}
interface SvgShapeElementAttributes<T> extends SvgCoreAttributes<T>, Pick<SvgPresentationAttributes, "color" | "fill-opacity" | "fill-rule" | "fill" | "pathLength" | "shape-rendering" | "stroke-dasharray" | "stroke-dashoffset" | "stroke-linecap" | "stroke-linejoin" | "stroke-miterlimit" | "stroke-opacity" | "stroke-width" | "stroke"> {
}
interface SvgTextContentElementAttributes<T> extends SvgCoreAttributes<T>, Pick<SvgPresentationAttributes, "color" | "direction" | "dominant-baseline" | "fill-opacity" | "fill-rule" | "fill" | "font-family" | "font-size-adjust" | "font-size" | "font-stretch" | "font-style" | "font-variant" | "font-weight" | "glyph-orientation-horizontal" | "glyph-orientation-vertical" | "kerning" | "letter-spacing" | "stroke-dasharray" | "stroke-dashoffset" | "stroke-linecap" | "stroke-linejoin" | "stroke-miterlimit" | "stroke-opacity" | "stroke-width" | "stroke" | "text-anchor" | "text-decoration" | "unicode-bidi" | "word-spacing"> {
}
interface SvgZoomAndPanAttributes {
    zoomAndPan?: "disable" | "magnify";
}
interface SvgAnimateAttributes<T> extends SvgAnimationElementAttributes<T>, SvgAnimationAttributeTargetAttributes, SvgAnimationTimingAttributes, SvgAnimationValueAttributes, SvgAnimationAdditionAttributes, Pick<SvgPresentationAttributes, "color-interpolation" | "color-rendering"> {
}
interface SvgAnimateMotionAttributes<T> extends SvgAnimationElementAttributes<T>, SvgAnimationTimingAttributes, SvgAnimationValueAttributes, SvgAnimationAdditionAttributes {
    keyPoints?: string;
    origin?: "default";
    path?: string;
    rotate?: number | string | "auto-reverse" | "auto";
}
interface SvgAnimateTransformAttributes<T> extends SvgAnimationElementAttributes<T>, SvgAnimationAttributeTargetAttributes, SvgAnimationTimingAttributes, SvgAnimationValueAttributes, SvgAnimationAdditionAttributes {
    type?: "rotate" | "scale" | "skewX" | "skewY" | "translate";
}
interface SvgCircleAttributes<T> extends SvgGraphicsElementAttributes<T>, SvgShapeElementAttributes<T>, SvgConditionalProcessingAttributes, SvgStylableAttributes, SvgTransformableAttributes {
    cx?: number | string;
    cy?: number | string;
    r?: number | string;
}
interface SvgClipPathAttributes<T> extends SvgCoreAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, SvgTransformableAttributes, Pick<SvgPresentationAttributes, "clip-path"> {
    clipPathUnits?: SVGUnits;
}
interface SvgDefsAttributes<T> extends SvgContainerElementAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, SvgTransformableAttributes {
}
interface SvgDescAttributes<T> extends SvgCoreAttributes<T>, SvgStylableAttributes {
}
interface SvgEllipseAttributes<T> extends SvgGraphicsElementAttributes<T>, SvgShapeElementAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, SvgTransformableAttributes {
    cx?: number | string;
    cy?: number | string;
    rx?: number | string;
    ry?: number | string;
}
interface SvgFeBlendAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgDoubleInputFilterAttributes, SvgStylableAttributes {
    mode?: "darken" | "lighten" | "multiply" | "normal" | "screen";
}
interface SvgFeColorMatrixAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgSingleInputFilterAttributes, SvgStylableAttributes {
    type?: "hueRotate" | "luminanceToAlpha" | "matrix" | "saturate";
    values?: string;
}
interface SvgFeComponentTransferAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgSingleInputFilterAttributes, SvgStylableAttributes {
}
interface SvgFeCompositeAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgDoubleInputFilterAttributes, SvgStylableAttributes {
    k1?: number | string;
    k2?: number | string;
    k3?: number | string;
    k4?: number | string;
    operator?: "arithmetic" | "atop" | "in" | "out" | "over" | "xor";
}
interface SvgFeConvolveMatrixAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgSingleInputFilterAttributes, SvgStylableAttributes {
    bias?: number | string;
    divisor?: number | string;
    edgeMode?: "duplicate" | "none" | "wrap";
    kernelMatrix?: string;
    kernelUnitLength?: number | string;
    order?: number | string;
    preserveAlpha?: boolean | "false" | "true";
    targetX?: number | string;
    targetY?: number | string;
}
interface SvgFeDiffuseLightingAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgSingleInputFilterAttributes, SvgStylableAttributes, Pick<SvgPresentationAttributes, "color" | "lighting-color"> {
    diffuseConstant?: number | string;
    kernelUnitLength?: number | string;
    surfaceScale?: number | string;
}
interface SvgFeDisplacementMapAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgDoubleInputFilterAttributes, SvgStylableAttributes {
    scale?: number | string;
    xChannelSelector?: "A" | "B" | "G" | "R";
    yChannelSelector?: "A" | "B" | "G" | "R";
}
interface SvgFeDistantLightAttributes<T> extends SvgLightSourceElementAttributes<T> {
    azimuth?: number | string;
    elevation?: number | string;
}
interface SvgFeDropShadowAttributes<T> extends SvgCoreAttributes<T>, SvgFilterPrimitiveElementAttributes<T>, SvgStylableAttributes, Pick<SvgPresentationAttributes, "color" | "flood-color" | "flood-opacity"> {
    dx?: number | string;
    dy?: number | string;
    stdDeviation?: number | string;
}
interface SvgFeFloodAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgStylableAttributes, Pick<SvgPresentationAttributes, "color" | "flood-color" | "flood-opacity"> {
}
interface SvgFeFuncAttributes<T> extends SvgCoreAttributes<T> {
    amplitude?: number | string;
    exponent?: number | string;
    intercept?: number | string;
    offset?: number | string;
    slope?: number | string;
    tableValues?: string;
    type?: "discrete" | "gamma" | "identity" | "linear" | "table";
}
interface SvgFeGaussianBlurAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgSingleInputFilterAttributes, SvgStylableAttributes {
    stdDeviation?: number | string;
}
interface SvgFeImageAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgExternalResourceAttributes, SvgStylableAttributes {
    href?: string;
    preserveAspectRatio?: SVGPreserveAspectRatio;
}
interface SvgFeMergeAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgStylableAttributes {
}
interface SvgFeMergeNodeAttributes<T> extends SvgCoreAttributes<T>, SvgSingleInputFilterAttributes {
}
interface SvgFeMorphologyAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgSingleInputFilterAttributes, SvgStylableAttributes {
    operator?: "dilate" | "erode";
    radius?: number | string;
}
interface SvgFeOffsetAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgSingleInputFilterAttributes, SvgStylableAttributes {
    dx?: number | string;
    dy?: number | string;
}
interface SvgFePointLightAttributes<T> extends SvgLightSourceElementAttributes<T> {
    x?: number | string;
    y?: number | string;
    z?: number | string;
}
interface SvgFeSpecularLightingAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgSingleInputFilterAttributes, SvgStylableAttributes, Pick<SvgPresentationAttributes, "color" | "lighting-color"> {
    kernelUnitLength?: number | string;
    specularConstant?: string;
    specularExponent?: string;
    surfaceScale?: string;
}
interface SvgFeSpotLightAttributes<T> extends SvgLightSourceElementAttributes<T> {
    limitingConeAngle?: number | string;
    pointsAtX?: number | string;
    pointsAtY?: number | string;
    pointsAtZ?: number | string;
    specularExponent?: number | string;
    x?: number | string;
    y?: number | string;
    z?: number | string;
}
interface SvgFeTileAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgSingleInputFilterAttributes, SvgStylableAttributes {
}
interface SvgFeTurbulanceAttributes<T> extends SvgFilterPrimitiveElementAttributes<T>, SvgStylableAttributes {
    baseFrequency?: number | string;
    numOctaves?: number | string;
    seed?: number | string;
    stitchTiles?: "noStitch" | "stitch";
    type?: "fractalNoise" | "turbulence";
}
interface SvgFilterAttributes<T> extends SvgCoreAttributes<T>, SvgExternalResourceAttributes, SvgStylableAttributes {
    filterRes?: number | string;
    filterUnits?: SVGUnits;
    height?: number | string;
    primitiveUnits?: SVGUnits;
    width?: number | string;
    x?: number | string;
    y?: number | string;
}
interface SvgForeignObjectAttributes<T> extends SvgNewViewportAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, SvgTransformableAttributes, Pick<SvgPresentationAttributes, "display" | "visibility"> {
    height?: number | string;
    width?: number | string;
    x?: number | string;
    y?: number | string;
}
interface SvgGAttributes<T> extends SvgContainerElementAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, SvgTransformableAttributes, Pick<SvgPresentationAttributes, "display" | "visibility"> {
}
interface SvgImageAttributes<T> extends SvgNewViewportAttributes<T>, SvgGraphicsElementAttributes<T>, SvgConditionalProcessingAttributes, SvgStylableAttributes, SvgTransformableAttributes, Pick<SvgPresentationAttributes, "color-profile" | "image-rendering"> {
    crossOrigin?: HtmlCrossOrigin;
    elementTiming?: string;
    height?: number | string;
    href?: string;
    preserveAspectRatio?: ImagePreserveAspectRatio;
    width?: number | string;
    x?: number | string;
    y?: number | string;
}
interface SvgLineAttributes<T> extends SvgGraphicsElementAttributes<T>, SvgShapeElementAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, SvgTransformableAttributes, Pick<SvgPresentationAttributes, "marker-end" | "marker-mid" | "marker-start"> {
    x1?: number | string;
    x2?: number | string;
    y1?: number | string;
    y2?: number | string;
}
interface SvgLinearGradientAttributes<T> extends SvgGradientElementAttributes<T> {
    x1?: number | string;
    x2?: number | string;
    y1?: number | string;
    y2?: number | string;
}
interface SvgMarkerAttributes<T> extends SvgContainerElementAttributes<T>, SvgExternalResourceAttributes, SvgStylableAttributes, SvgFitToViewBoxAttributes, Pick<SvgPresentationAttributes, "clip" | "overflow"> {
    markerHeight?: number | string;
    markerUnits?: "strokeWidth" | "userSpaceOnUse";
    markerWidth?: number | string;
    orient?: string;
    refX?: number | string;
    refY?: number | string;
}
interface SvgMaskAttributes<T> extends Omit<SvgContainerElementAttributes<T>, "filter" | "opacity">, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes {
    height?: number | string;
    maskContentUnits?: SVGUnits;
    maskUnits?: SVGUnits;
    width?: number | string;
    x?: number | string;
    y?: number | string;
}
interface SvgMetadataAttributes<T> extends SvgCoreAttributes<T> {
}
interface SvgMpathAttributes<T> extends SvgCoreAttributes<T> {
}
interface SvgPathAttributes<T> extends SvgGraphicsElementAttributes<T>, SvgShapeElementAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, SvgTransformableAttributes, Pick<SvgPresentationAttributes, "marker-end" | "marker-mid" | "marker-start"> {
    d?: string;
    pathLength?: number | string;
}
interface SvgPatternAttributes<T> extends SvgContainerElementAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, SvgFitToViewBoxAttributes, Pick<SvgPresentationAttributes, "clip" | "overflow"> {
    height?: number | string;
    href?: string;
    patternContentUnits?: SVGUnits;
    patternTransform?: string;
    patternUnits?: SVGUnits;
    width?: number | string;
    x?: number | string;
    y?: number | string;
}
interface SvgPolygonAttributes<T> extends SvgGraphicsElementAttributes<T>, SvgShapeElementAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, SvgTransformableAttributes, Pick<SvgPresentationAttributes, "marker-end" | "marker-mid" | "marker-start"> {
    points?: string;
}
interface SvgPolylineAttributes<T> extends SvgGraphicsElementAttributes<T>, SvgShapeElementAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, SvgTransformableAttributes, Pick<SvgPresentationAttributes, "marker-end" | "marker-mid" | "marker-start"> {
    points?: string;
}
interface SvgRadialGradientAttributes<T> extends SvgGradientElementAttributes<T> {
    cx?: number | string;
    cy?: number | string;
    fx?: number | string;
    fy?: number | string;
    r?: number | string;
}
interface SvgRectAttributes<T> extends SvgGraphicsElementAttributes<T>, SvgShapeElementAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, SvgTransformableAttributes {
    height?: number | string;
    rx?: number | string;
    ry?: number | string;
    width?: number | string;
    x?: number | string;
    y?: number | string;
}
interface SvgSetAttributes<T> extends SvgCoreAttributes<T>, SvgStylableAttributes, SvgAnimationTimingAttributes {
}
interface SvgStopAttributes<T> extends SvgCoreAttributes<T>, SvgStylableAttributes, Pick<SvgPresentationAttributes, "color" | "stop-color" | "stop-opacity"> {
    offset?: number | string;
}
interface SvgSvgAttributes<T> extends SvgContainerElementAttributes<T>, SvgNewViewportAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, SvgFitToViewBoxAttributes, SvgZoomAndPanAttributes, SvgPresentationAttributes {
    baseProfile?: string;
    contentScriptType?: string;
    contentStyleType?: string;
    currentScale?: number;
    height?: number | string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/afterprint_event) */
    onAfterPrint?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeprint_event) */
    onBeforePrint?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event) */
    onBeforeunload?: EventHandlerUnion<T, BeforeUnloadEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepadconnected_event) */
    onGamepadConnected?: EventHandlerUnion<T, GamepadEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepaddisconnected_event) */
    onGamepadDisconnected?: EventHandlerUnion<T, GamepadEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/hashchange_event) */
    onHashChange?: EventHandlerUnion<T, HashChangeEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/languagechange_event) */
    onLanguageChange?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/message_event) */
    onMessage?: EventHandlerUnion<T, MessageEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/messageerror_event) */
    onMessageError?: EventHandlerUnion<T, MessageEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/offline_event) */
    onOffline?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/online_event) */
    onOnline?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pagehide_event) */
    onPageHide?: EventHandlerUnion<T, PageTransitionEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pagereveal_event) */
    onPageReveal?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pageshow_event) */
    onPageShow?: EventHandlerUnion<T, PageTransitionEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pageswap_event) */
    onPageSwap?: EventHandlerUnion<T, Event>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/popstate_event) */
    onPopState?: EventHandlerUnion<T, PopStateEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/rejectionhandled_event) */
    onRejectionHandled?: EventHandlerUnion<T, PromiseRejectionEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/storage_event) */
    onStorage?: EventHandlerUnion<T, StorageEvent>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event) */
    onUnhandledRejection?: EventHandlerUnion<T, PromiseRejectionEvent>;
    version?: string;
    width?: number | string;
    x?: number | string;
    xmlns?: string;
    y?: number | string;
}
interface SvgSwitchAttributes<T> extends SvgContainerElementAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, SvgTransformableAttributes, Pick<SvgPresentationAttributes, "display" | "visibility"> {
}
interface SvgSymbolAttributes<T> extends SvgContainerElementAttributes<T>, SvgNewViewportAttributes<T>, SvgExternalResourceAttributes, SvgStylableAttributes, SvgFitToViewBoxAttributes {
    height?: number | string;
    preserveAspectRatio?: SVGPreserveAspectRatio;
    refX?: number | string;
    refY?: number | string;
    viewBox?: string;
    width?: number | string;
    x?: number | string;
    y?: number | string;
}
interface SvgTextAttributes<T> extends SvgTextContentElementAttributes<T>, SvgGraphicsElementAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, SvgTransformableAttributes, Pick<SvgPresentationAttributes, "text-rendering" | "writing-mode"> {
    dx?: number | string;
    dy?: number | string;
    lengthAdjust?: "spacing" | "spacingAndGlyphs";
    rotate?: number | string;
    textLength?: number | string;
    x?: number | string;
    y?: number | string;
}
interface SvgTextPathAttributes<T> extends SvgTextContentElementAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, Pick<SvgPresentationAttributes, "alignment-baseline" | "baseline-shift" | "display" | "visibility"> {
    href?: string;
    method?: "align" | "stretch";
    spacing?: "auto" | "exact";
    startOffset?: number | string;
}
interface SvgTspanAttributes<T> extends SvgTextContentElementAttributes<T>, SvgConditionalProcessingAttributes, SvgExternalResourceAttributes, SvgStylableAttributes, Pick<SvgPresentationAttributes, "alignment-baseline" | "baseline-shift" | "display" | "visibility"> {
    dx?: number | string;
    dy?: number | string;
    lengthAdjust?: "spacing" | "spacingAndGlyphs";
    rotate?: number | string;
    textLength?: number | string;
    x?: number | string;
    y?: number | string;
}
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use
 */
interface SvgUseAttributes<T> extends SvgCoreAttributes<T>, SvgStylableAttributes, SvgConditionalProcessingAttributes, SvgGraphicsElementAttributes<T>, SvgPresentationAttributes, SvgExternalResourceAttributes, SvgTransformableAttributes {
    height?: number | string;
    href?: string;
    width?: number | string;
    x?: number | string;
    y?: number | string;
}
interface SvgViewAttributes<T> extends SvgCoreAttributes<T>, SvgExternalResourceAttributes, SvgFitToViewBoxAttributes, SvgZoomAndPanAttributes {
    viewTarget?: string;
}
/**
 * A list of native HTML elements and their props.
 *
 * @see {HTMLElementTagNameMap}
 * @remarks
 * Name uses consecutive capitalized letters to avoid a breaking change. We can
 * batch breaking changes in a single release in the future.
 */
export interface HTMLElementTags {
    a: HtmlAnchorAttributes<HTMLAnchorElement>;
    abbr: HTMLAttributes;
    address: HTMLAttributes;
    area: HtmlAreaAttributes<HTMLAreaElement>;
    article: HTMLAttributes;
    aside: HTMLAttributes;
    audio: HtmlAudioAttributes<HTMLAudioElement>;
    b: HTMLAttributes;
    base: HtmlBaseAttributes<HTMLBaseElement>;
    bdi: HTMLAttributes;
    bdo: HTMLAttributes;
    blockquote: HtmlBlockquoteAttributes<HTMLQuoteElement>;
    br: HTMLAttributes<HTMLBRElement>;
    button: HtmlButtonAttributes<HTMLButtonElement>;
    canvas: HtmlCanvasAttributes<HTMLCanvasElement>;
    caption: HTMLAttributes;
    cite: HTMLAttributes;
    code: HTMLAttributes;
    col: HtmlColAttributes<HTMLTableColElement>;
    colgroup: HtmlColgroupAttributes<HTMLTableColElement>;
    data: HtmlDataAttributes<HTMLDataElement>;
    datalist: HTMLAttributes<HTMLDataListElement>;
    dd: HTMLAttributes;
    del: HtmlModAttributes<HTMLModElement>;
    details: HtmlDetailsAttributes<HTMLDetailsElement>;
    dfn: HTMLAttributes;
    dialog: HtmlDialogAttributes<HTMLDialogElement>;
    div: HTMLAttributes<HTMLDivElement>;
    dl: HTMLAttributes<HTMLDListElement>;
    dt: HTMLAttributes;
    em: HTMLAttributes;
    embed: HtmlEmbedAttributes<HTMLEmbedElement>;
    fieldset: HtmlFieldsetAttributes<HTMLFieldSetElement>;
    figcaption: HTMLAttributes;
    figure: HTMLAttributes;
    footer: HTMLAttributes;
    form: HtmlFormAttributes<HTMLFormElement>;
    h1: HTMLAttributes<HTMLHeadingElement>;
    h2: HTMLAttributes<HTMLHeadingElement>;
    h3: HTMLAttributes<HTMLHeadingElement>;
    h4: HTMLAttributes<HTMLHeadingElement>;
    h5: HTMLAttributes<HTMLHeadingElement>;
    h6: HTMLAttributes<HTMLHeadingElement>;
    header: HTMLAttributes;
    hgroup: HTMLAttributes;
    hr: HTMLAttributes<HTMLHRElement>;
    i: HTMLAttributes;
    iframe: HtmlIframeAttributes<HTMLIFrameElement>;
    img: HtmlImgAttributes<HTMLImageElement>;
    input: HtmlInputAttributes<HTMLInputElement>;
    ins: HtmlModAttributes<HTMLModElement>;
    kbd: HTMLAttributes;
    label: HtmlLabelAttributes<HTMLLabelElement>;
    legend: HTMLAttributes<HTMLLegendElement>;
    li: HtmlLiAttributes<HTMLLIElement>;
    link: HtmlLinkAttributes<HTMLLinkElement>;
    main: HTMLAttributes;
    map: HtmlMapAttributes<HTMLMapElement>;
    mark: HTMLAttributes;
    math: HtmlMathMlAttributes<HTMLMathElement>;
    menu: HtmlMenuAttributes<HTMLMenuElement>;
    meta: HtmlMetaAttributes<HTMLMetaElement>;
    meter: HtmlMeterAttributes<HTMLMeterElement>;
    nav: HTMLAttributes;
    noscript: HTMLAttributes;
    object: HtmlObjectAttributes<HTMLObjectElement>;
    ol: HtmlOlAttributes<HTMLOListElement>;
    optgroup: HtmlOptgroupAttributes<HTMLOptGroupElement>;
    option: HtmlOptionAttributes<HTMLOptionElement>;
    output: HtmlOutputAttributes<HTMLOutputElement>;
    p: HTMLAttributes<HTMLParagraphElement>;
    picture: HTMLAttributes;
    pre: HTMLAttributes<HTMLPreElement>;
    progress: HtmlProgressAttributes<HTMLProgressElement>;
    q: HtmlQuoteAttributes<HTMLQuoteElement>;
    rp: HTMLAttributes;
    rt: HTMLAttributes;
    ruby: HTMLAttributes;
    s: HTMLAttributes;
    samp: HTMLAttributes;
    script: HtmlScriptAttributes<HTMLScriptElement>;
    search: HTMLAttributes;
    section: HTMLAttributes;
    select: HtmlSelectAttributes<HTMLSelectElement>;
    slot: HtmlSlotAttributes<HTMLSlotElement>;
    small: HTMLAttributes;
    source: HtmlSourceAttributes<HTMLSourceElement>;
    span: HTMLAttributes<HTMLSpanElement>;
    strong: HTMLAttributes;
    /**
     * For use when you have a dynamic CSS string that needs to be added as a
     * style. If you have a static string, use Lit's "styles" property instead
     * for better performance.
     */
    style: HtmlStyleAttributes<HTMLStyleElement>;
    sub: HTMLAttributes;
    summary: HTMLAttributes;
    sup: HTMLAttributes;
    table: HTMLAttributes<HTMLTableElement>;
    tbody: HTMLAttributes<HTMLTableSectionElement>;
    td: HtmlTdAttributes<HTMLTableCellElement>;
    template: HtmlTemplateAttributes<HTMLTemplateElement>;
    textarea: HtmlTextareaAttributes<HTMLTextAreaElement>;
    tfoot: HTMLAttributes<HTMLTableSectionElement>;
    th: HtmlThAttributes<HTMLTableCellElement>;
    thead: HTMLAttributes<HTMLTableSectionElement>;
    time: HtmlTimeAttributes<HTMLTimeElement>;
    title: HTMLAttributes<HTMLTitleElement>;
    tr: HTMLAttributes<HTMLTableRowElement>;
    track: HtmlTrackAttributes<HTMLTrackElement>;
    u: HTMLAttributes;
    ul: HTMLAttributes<HTMLUListElement>;
    var: HTMLAttributes;
    video: HtmlVideoAttributes<HTMLVideoElement>;
    wbr: HTMLAttributes;
}
/**
 * A list of native SVG elements and their props.
 *
 * @type {SVGElementTagNameMap}
 */
export interface SvgElementTags {
    animate: SvgAnimateAttributes<SVGAnimateElement>;
    animateMotion: SvgAnimateMotionAttributes<SVGAnimateMotionElement>;
    animateTransform: SvgAnimateTransformAttributes<SVGAnimateTransformElement>;
    circle: SvgCircleAttributes<SVGCircleElement>;
    clipPath: SvgClipPathAttributes<SVGClipPathElement>;
    defs: SvgDefsAttributes<SVGDefsElement>;
    desc: SvgDescAttributes<SVGDescElement>;
    ellipse: SvgEllipseAttributes<SVGEllipseElement>;
    feBlend: SvgFeBlendAttributes<SVGFEBlendElement>;
    feColorMatrix: SvgFeColorMatrixAttributes<SVGFEColorMatrixElement>;
    feComponentTransfer: SvgFeComponentTransferAttributes<SVGFEComponentTransferElement>;
    feComposite: SvgFeCompositeAttributes<SVGFECompositeElement>;
    feConvolveMatrix: SvgFeConvolveMatrixAttributes<SVGFEConvolveMatrixElement>;
    feDiffuseLighting: SvgFeDiffuseLightingAttributes<SVGFEDiffuseLightingElement>;
    feDisplacementMap: SvgFeDisplacementMapAttributes<SVGFEDisplacementMapElement>;
    feDistantLight: SvgFeDistantLightAttributes<SVGFEDistantLightElement>;
    feDropShadow: SvgFeDropShadowAttributes<SVGFEDropShadowElement>;
    feFlood: SvgFeFloodAttributes<SVGFEFloodElement>;
    feFuncA: SvgFeFuncAttributes<SVGFEFuncAElement>;
    feFuncB: SvgFeFuncAttributes<SVGFEFuncBElement>;
    feFuncG: SvgFeFuncAttributes<SVGFEFuncGElement>;
    feFuncR: SvgFeFuncAttributes<SVGFEFuncRElement>;
    feGaussianBlur: SvgFeGaussianBlurAttributes<SVGFEGaussianBlurElement>;
    feImage: SvgFeImageAttributes<SVGFEImageElement>;
    feMerge: SvgFeMergeAttributes<SVGFEMergeElement>;
    feMergeNode: SvgFeMergeNodeAttributes<SVGFEMergeNodeElement>;
    feMorphology: SvgFeMorphologyAttributes<SVGFEMorphologyElement>;
    feOffset: SvgFeOffsetAttributes<SVGFEOffsetElement>;
    fePointLight: SvgFePointLightAttributes<SVGFEPointLightElement>;
    feSpecularLighting: SvgFeSpecularLightingAttributes<SVGFESpecularLightingElement>;
    feSpotLight: SvgFeSpotLightAttributes<SVGFESpotLightElement>;
    feTile: SvgFeTileAttributes<SVGFETileElement>;
    feTurbulence: SvgFeTurbulanceAttributes<SVGFETurbulenceElement>;
    filter: SvgFilterAttributes<SVGFilterElement>;
    foreignObject: SvgForeignObjectAttributes<SVGForeignObjectElement>;
    g: SvgGAttributes<SVGGElement>;
    image: SvgImageAttributes<SVGImageElement>;
    line: SvgLineAttributes<SVGLineElement>;
    linearGradient: SvgLinearGradientAttributes<SVGLinearGradientElement>;
    marker: SvgMarkerAttributes<SVGMarkerElement>;
    mask: SvgMaskAttributes<SVGMaskElement>;
    metadata: SvgMetadataAttributes<SVGMetadataElement>;
    mpath: SvgMpathAttributes<SVGMPathElement>;
    path: SvgPathAttributes<SVGPathElement>;
    pattern: SvgPatternAttributes<SVGPatternElement>;
    polygon: SvgPolygonAttributes<SVGPolygonElement>;
    polyline: SvgPolylineAttributes<SVGPolylineElement>;
    radialGradient: SvgRadialGradientAttributes<SVGRadialGradientElement>;
    rect: SvgRectAttributes<SVGRectElement>;
    set: SvgSetAttributes<SVGSetElement>;
    stop: SvgStopAttributes<SVGStopElement>;
    svg: SvgSvgAttributes<SVGSVGElement>;
    switch: SvgSwitchAttributes<SVGSwitchElement>;
    symbol: SvgSymbolAttributes<SVGSymbolElement>;
    text: SvgTextAttributes<SVGTextElement>;
    textPath: SvgTextPathAttributes<SVGTextPathElement>;
    tspan: SvgTspanAttributes<SVGTSpanElement>;
    use: SvgUseAttributes<SVGUseElement>;
    view: SvgViewAttributes<SVGViewElement>;
}
export {};
