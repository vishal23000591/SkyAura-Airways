import { BaseController } from './types';
import { GenericController } from './Controller';
import { PropertyValues } from 'lit';
import { LitElement } from '../LitElement';
/**
 * A manager for all other controllers. It finds all controllers on the
 * component, loads them, and forwards lifecycle events to them.
 */
export declare class ControllerManager extends GenericController<undefined> {
    #private;
    hasDestroy: boolean;
    destroyed: boolean;
    constructor(component: LitElement);
    /**
     * Throws an error if component does not implement destroy() lifecycle, but
     * tries to use it. This check is only present in development mode
     *
     * @private
     */
    devOnly$ensureHasDestroy?: () => void;
    destroy(): Promise<void>;
    /** @private */
    _setAutoDestroyTimeout(): void;
    /**
     * "readOnly" is not enabled initially since we need to allow to set property
     * default values in the constructor.
     *
     * @private
     */
    _isEnforcingReadonly: boolean;
    /** @private */
    _trackedValue: unknown;
    /** @private */
    _keyTrackers: ((key: string | undefined, value: unknown) => void)[];
    /** @private */
    _firePropTrackers(key: string | undefined, value: unknown): void;
    /**
     * Map with keys for any properties that have changed since the last
     * update cycle with previous values.
     *
     * Do not access this directly as this value is only set during the update
     * lifecycle. Instead, use the `changes` property that is provided
     * to the shouldUpdate(), willUpdate() and updated() lifecycle hooks.
     *
     * @private
     */
    _changedProperties?: PropertyValues;
    /**
     * Associate an exports object with a controller for reverse lookup in
     * controller.use
     *
     * @private
     */
    _markExports(controller: BaseController, exports: unknown): void;
    /** @private */
    _resolveExports(exports: unknown): BaseController | undefined;
}
export declare let autoDestroyOnDisconnectTimeout: number;
export declare const autoDestroyDisabledPropName = "autoDestroyDisabled";
export declare const exportsForTests: {
    setAutoDestroyOnDisconnectTimeout: (timeout: number) => void;
} | undefined;
export type LuminaLifecycles = {
    connectedCallback?: LitElement["connectedCallback"];
    disconnectedCallback?: LitElement["disconnectedCallback"];
    load?: () => Promise<void> | void;
    loaded?: () => void;
};
