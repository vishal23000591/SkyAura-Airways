import { getWindow } from "@lit-labs/ssr/lib/dom-shim.js";
import { render } from "@lit-labs/ssr/lib/render.js";
import { html } from "@lit-labs/ssr/lib/server-template.js";
import { withStatic, unsafeStatic } from "lit-html/static.js";
import { collectResult } from "@lit-labs/ssr/lib/render-result.js";
import { RenderResultReadable } from "@lit-labs/ssr/lib/render-result-readable.js";
const staticHtml = withStatic(html);
function createWindowFromHtml(templateHtml, uniqueId = Math.random().toString()) {
  const window = getWindow({ includeJSBuiltIns: true });
  window.document.defaultView = window;
  window.document.templateHtml = templateHtml;
  window.document.buildId = uniqueId;
  return window;
}
function streamToString(html2, options) {
  const { result } = getRenderResult(html2, options);
  return new RenderResultReadable(result);
}
function getRenderResult(rawSource, options) {
  const maybeDocument = typeof rawSource === "object" && rawSource !== null ? "document" in rawSource ? rawSource.document : rawSource : void 0;
  const source = maybeDocument && "templateHtml" in maybeDocument ? maybeDocument.templateHtml : maybeDocument && "documentElement" in maybeDocument ? maybeDocument.documentElement?.outerHTML ?? maybeDocument : rawSource;
  const renderTemplate = typeof source === "string" ? staticHtml`${unsafeStatic(source)}` : source;
  const tagNames = [];
  const result = render(renderTemplate, {
    customElementRendered(tagName) {
      tagNames.push(tagName);
    },
    ...options
  });
  return { result, maybeDocument, tagNames };
}
function renderToString(html2, options, asStream = false) {
  if (asStream) {
    return streamToString(html2, options);
  } else {
    return resultsToString(html2, options);
  }
}
async function resultsToString(html2, options) {
  const { result, tagNames, maybeDocument } = getRenderResult(html2, options);
  const collected = await collectResult(result);
  const renderResult = {
    buildId: maybeDocument?.buildId ?? Math.random().toString(),
    diagnostics: [],
    url: globalThis?.location?.href ?? "https://hydrate.stenciljs.com/",
    host: globalThis?.location?.host ?? "hydrate.stenciljs.com",
    hostname: globalThis?.location?.hostname ?? "hydrate.stenciljs.com",
    href: globalThis?.location?.href ?? "https://hydrate.stenciljs.com/",
    port: globalThis?.location?.port ?? "",
    pathname: globalThis?.location?.pathname ?? "/",
    search: globalThis?.location?.search ?? "",
    hash: globalThis?.location?.hash ?? "",
    html: collected,
    httpStatus: 200,
    hydratedCount: tagNames.length,
    anchors: [],
    components: tagNames.map((tag) => ({
      tag,
      mode: "$",
      count: 1,
      depth: 1
    })),
    imgs: [],
    scripts: [],
    staticData: [],
    styles: [],
    title: globalThis?.document?.title ?? "Vite + TS"
  };
  if (maybeDocument && "templateHtml" in maybeDocument) {
    maybeDocument.outerHtml = collected;
  }
  return renderResult;
}
function hydrateDocument(doc, options, asStream) {
  return renderToString(doc, options, asStream);
}
function serializeDocumentToString(doc, _unused) {
  const maybeDocument = doc;
  return maybeDocument.outerHtml ?? maybeDocument.templateHtml ?? String(maybeDocument);
}
export {
  createWindowFromHtml,
  hydrateDocument,
  renderToString,
  serializeDocumentToString,
  streamToString
};
